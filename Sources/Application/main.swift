import MMIO
import Registers

// ESP32 App Descriptor as raw bytes - this will be a compile-time constant
let espAppDescriptor: [UInt8] = [
    // Magic word (0xABCD5432) - little endian
    0x32, 0x54, 0xCD, 0xAB,
    // Secure version (0) 
    0x00, 0x00, 0x00, 0x00,
    // Reserved (8 bytes)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // Version string "1.0.0" (32 bytes, null terminated)
    0x31, 0x2E, 0x30, 0x2E, 0x30, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // Project name "swift-blink" (32 bytes, null terminated)
    0x73, 0x77, 0x69, 0x66, 0x74, 0x2D, 0x62, 0x6C,
    0x69, 0x6E, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // Time (16 bytes) - filled with zeros for now
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // Date (16 bytes) - filled with zeros for now  
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // IDF version "v5.0" (32 bytes, null terminated)
    0x76, 0x35, 0x2E, 0x30, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // SHA256 (32 bytes) - zeros for now
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // Reserved2 (80 bytes) - zeros
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]

// Force the descriptor to be referenced so it's included in the binary
@_cdecl("get_app_descriptor")
public func getAppDescriptor() -> UnsafePointer<UInt8> {
    return espAppDescriptor.withUnsafeBufferPointer { $0.baseAddress! }
}

@_cdecl("_start")
public func _start() -> Never {
    // Force reference to app descriptor
    _ = getAppDescriptor()
    
    // Simple bare metal main loop
    while true {
        setLED(on: true)
        busyWait(cycles: 5_000_000)
        setLED(on: false)
        busyWait(cycles: 15_000_000)
    }
}

// Simple LED control
private func setLED(on: Bool) {
    let gpioBase = UnsafeMutablePointer<UInt32>(bitPattern: 0x60004000)!
    if on {
        gpioBase.pointee |= (1 << 8)
    } else {
        gpioBase.pointee &= ~(1 << 8)
    }
}

private func busyWait(cycles: UInt32) {
    var counter: UInt32 = 0
    while counter < cycles {
        counter += 1
        _ = counter
    }
}

@_cdecl("posix_memalign")
public func posix_memalign(_ memptr: UnsafeMutablePointer<UnsafeMutableRawPointer?>, _ alignment: Int, _ size: Int) -> Int32 {
    memptr.pointee = nil
    return 12 // ENOMEM
}

@_cdecl("free")
public func free(_ ptr: UnsafeMutableRawPointer?) {
    // No-op for embedded systems
}
