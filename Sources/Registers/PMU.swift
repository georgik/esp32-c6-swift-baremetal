// Generated by svd2swift.

import MMIO

/// PMU Peripheral
@RegisterBlock
public struct PMU {
    /// need_des
    @RegisterBlock(offset: 0x0)
    public var hp_active_dig_power: Register<HP_ACTIVE_DIG_POWER>

    /// need_des
    @RegisterBlock(offset: 0x4)
    public var hp_active_icg_hp_func: Register<HP_ACTIVE_ICG_HP_FUNC>

    /// need_des
    @RegisterBlock(offset: 0x8)
    public var hp_active_icg_hp_apb: Register<HP_ACTIVE_ICG_HP_APB>

    /// need_des
    @RegisterBlock(offset: 0xc)
    public var hp_active_icg_modem: Register<HP_ACTIVE_ICG_MODEM>

    /// need_des
    @RegisterBlock(offset: 0x10)
    public var hp_active_hp_sys_cntl: Register<HP_ACTIVE_HP_SYS_CNTL>

    /// need_des
    @RegisterBlock(offset: 0x14)
    public var hp_active_hp_ck_power: Register<HP_ACTIVE_HP_CK_POWER>

    /// need_des
    @RegisterBlock(offset: 0x18)
    public var hp_active_bias: Register<HP_ACTIVE_BIAS>

    /// need_des
    @RegisterBlock(offset: 0x1c)
    public var hp_active_backup: Register<HP_ACTIVE_BACKUP>

    /// need_des
    @RegisterBlock(offset: 0x20)
    public var hp_active_backup_clk: Register<HP_ACTIVE_BACKUP_CLK>

    /// need_des
    @RegisterBlock(offset: 0x24)
    public var hp_active_sysclk: Register<HP_ACTIVE_SYSCLK>

    /// need_des
    @RegisterBlock(offset: 0x28)
    public var hp_active_hp_regulator0: Register<HP_ACTIVE_HP_REGULATOR0>

    /// need_des
    @RegisterBlock(offset: 0x2c)
    public var hp_active_hp_regulator1: Register<HP_ACTIVE_HP_REGULATOR1>

    /// need_des
    @RegisterBlock(offset: 0x30)
    public var hp_active_xtal: Register<HP_ACTIVE_XTAL>

    /// need_des
    @RegisterBlock(offset: 0x34)
    public var hp_modem_dig_power: Register<HP_MODEM_DIG_POWER>

    /// need_des
    @RegisterBlock(offset: 0x38)
    public var hp_modem_icg_hp_func: Register<HP_MODEM_ICG_HP_FUNC>

    /// need_des
    @RegisterBlock(offset: 0x3c)
    public var hp_modem_icg_hp_apb: Register<HP_MODEM_ICG_HP_APB>

    /// need_des
    @RegisterBlock(offset: 0x40)
    public var hp_modem_icg_modem: Register<HP_MODEM_ICG_MODEM>

    /// need_des
    @RegisterBlock(offset: 0x44)
    public var hp_modem_hp_sys_cntl: Register<HP_MODEM_HP_SYS_CNTL>

    /// need_des
    @RegisterBlock(offset: 0x48)
    public var hp_modem_hp_ck_power: Register<HP_MODEM_HP_CK_POWER>

    /// need_des
    @RegisterBlock(offset: 0x4c)
    public var hp_modem_bias: Register<HP_MODEM_BIAS>

    /// need_des
    @RegisterBlock(offset: 0x50)
    public var hp_modem_backup: Register<HP_MODEM_BACKUP>

    /// need_des
    @RegisterBlock(offset: 0x54)
    public var hp_modem_backup_clk: Register<HP_MODEM_BACKUP_CLK>

    /// need_des
    @RegisterBlock(offset: 0x58)
    public var hp_modem_sysclk: Register<HP_MODEM_SYSCLK>

    /// need_des
    @RegisterBlock(offset: 0x5c)
    public var hp_modem_hp_regulator0: Register<HP_MODEM_HP_REGULATOR0>

    /// need_des
    @RegisterBlock(offset: 0x60)
    public var hp_modem_hp_regulator1: Register<HP_MODEM_HP_REGULATOR1>

    /// need_des
    @RegisterBlock(offset: 0x64)
    public var hp_modem_xtal: Register<HP_MODEM_XTAL>

    /// need_des
    @RegisterBlock(offset: 0x68)
    public var hp_sleep_dig_power: Register<HP_SLEEP_DIG_POWER>

    /// need_des
    @RegisterBlock(offset: 0x6c)
    public var hp_sleep_icg_hp_func: Register<HP_SLEEP_ICG_HP_FUNC>

    /// need_des
    @RegisterBlock(offset: 0x70)
    public var hp_sleep_icg_hp_apb: Register<HP_SLEEP_ICG_HP_APB>

    /// need_des
    @RegisterBlock(offset: 0x74)
    public var hp_sleep_icg_modem: Register<HP_SLEEP_ICG_MODEM>

    /// need_des
    @RegisterBlock(offset: 0x78)
    public var hp_sleep_hp_sys_cntl: Register<HP_SLEEP_HP_SYS_CNTL>

    /// need_des
    @RegisterBlock(offset: 0x7c)
    public var hp_sleep_hp_ck_power: Register<HP_SLEEP_HP_CK_POWER>

    /// need_des
    @RegisterBlock(offset: 0x80)
    public var hp_sleep_bias: Register<HP_SLEEP_BIAS>

    /// need_des
    @RegisterBlock(offset: 0x84)
    public var hp_sleep_backup: Register<HP_SLEEP_BACKUP>

    /// need_des
    @RegisterBlock(offset: 0x88)
    public var hp_sleep_backup_clk: Register<HP_SLEEP_BACKUP_CLK>

    /// need_des
    @RegisterBlock(offset: 0x8c)
    public var hp_sleep_sysclk: Register<HP_SLEEP_SYSCLK>

    /// need_des
    @RegisterBlock(offset: 0x90)
    public var hp_sleep_hp_regulator0: Register<HP_SLEEP_HP_REGULATOR0>

    /// need_des
    @RegisterBlock(offset: 0x94)
    public var hp_sleep_hp_regulator1: Register<HP_SLEEP_HP_REGULATOR1>

    /// need_des
    @RegisterBlock(offset: 0x98)
    public var hp_sleep_xtal: Register<HP_SLEEP_XTAL>

    /// need_des
    @RegisterBlock(offset: 0x9c)
    public var hp_sleep_lp_regulator0: Register<HP_SLEEP_LP_REGULATOR0>

    /// need_des
    @RegisterBlock(offset: 0xa0)
    public var hp_sleep_lp_regulator1: Register<HP_SLEEP_LP_REGULATOR1>

    /// need_des
    @RegisterBlock(offset: 0xa4)
    public var hp_sleep_lp_dcdc_reserve: Register<HP_SLEEP_LP_DCDC_RESERVE>

    /// need_des
    @RegisterBlock(offset: 0xa8)
    public var hp_sleep_lp_dig_power: Register<HP_SLEEP_LP_DIG_POWER>

    /// need_des
    @RegisterBlock(offset: 0xac)
    public var hp_sleep_lp_ck_power: Register<HP_SLEEP_LP_CK_POWER>

    /// need_des
    @RegisterBlock(offset: 0xb0)
    public var lp_sleep_lp_bias_reserve: Register<LP_SLEEP_LP_BIAS_RESERVE>

    /// need_des
    @RegisterBlock(offset: 0xb4)
    public var lp_sleep_lp_regulator0: Register<LP_SLEEP_LP_REGULATOR0>

    /// need_des
    @RegisterBlock(offset: 0xb8)
    public var lp_sleep_lp_regulator1: Register<LP_SLEEP_LP_REGULATOR1>

    /// need_des
    @RegisterBlock(offset: 0xbc)
    public var lp_sleep_xtal: Register<LP_SLEEP_XTAL>

    /// need_des
    @RegisterBlock(offset: 0xc0)
    public var lp_sleep_lp_dig_power: Register<LP_SLEEP_LP_DIG_POWER>

    /// need_des
    @RegisterBlock(offset: 0xc4)
    public var lp_sleep_lp_ck_power: Register<LP_SLEEP_LP_CK_POWER>

    /// need_des
    @RegisterBlock(offset: 0xc8)
    public var lp_sleep_bias: Register<LP_SLEEP_BIAS>

    /// need_des
    @RegisterBlock(offset: 0xcc)
    public var imm_hp_ck_power: Register<IMM_HP_CK_POWER>

    /// need_des
    @RegisterBlock(offset: 0xd0)
    public var imm_sleep_sysclk: Register<IMM_SLEEP_SYSCLK>

    /// need_des
    @RegisterBlock(offset: 0xd4)
    public var imm_hp_func_icg: Register<IMM_HP_FUNC_ICG>

    /// need_des
    @RegisterBlock(offset: 0xd8)
    public var imm_hp_apb_icg: Register<IMM_HP_APB_ICG>

    /// need_des
    @RegisterBlock(offset: 0xdc)
    public var imm_modem_icg: Register<IMM_MODEM_ICG>

    /// need_des
    @RegisterBlock(offset: 0xe0)
    public var imm_lp_icg: Register<IMM_LP_ICG>

    /// need_des
    @RegisterBlock(offset: 0xe4)
    public var imm_pad_hold_all: Register<IMM_PAD_HOLD_ALL>

    /// need_des
    @RegisterBlock(offset: 0xe8)
    public var imm_i2c_iso: Register<IMM_I2C_ISO>

    /// need_des
    @RegisterBlock(offset: 0xec)
    public var power_wait_timer0: Register<POWER_WAIT_TIMER0>

    /// need_des
    @RegisterBlock(offset: 0xf0)
    public var power_wait_timer1: Register<POWER_WAIT_TIMER1>

    /// need_des
    @RegisterBlock(offset: 0xf4)
    public var power_pd_top_cntl: Register<POWER_PD_TOP_CNTL>

    /// need_des
    @RegisterBlock(offset: 0xf8)
    public var power_pd_hpaon_cntl: Register<POWER_PD_HPAON_CNTL>

    /// need_des
    @RegisterBlock(offset: 0xfc)
    public var power_pd_hpcpu_cntl: Register<POWER_PD_HPCPU_CNTL>

    /// need_des
    @RegisterBlock(offset: 0x100)
    public var power_pd_hpperi_reserve: Register<POWER_PD_HPPERI_RESERVE>

    /// need_des
    @RegisterBlock(offset: 0x104)
    public var power_pd_hpwifi_cntl: Register<POWER_PD_HPWIFI_CNTL>

    /// need_des
    @RegisterBlock(offset: 0x108)
    public var power_pd_lpperi_cntl: Register<POWER_PD_LPPERI_CNTL>

    /// need_des
    @RegisterBlock(offset: 0x10c)
    public var power_pd_mem_cntl: Register<POWER_PD_MEM_CNTL>

    /// need_des
    @RegisterBlock(offset: 0x110)
    public var power_pd_mem_mask: Register<POWER_PD_MEM_MASK>

    /// need_des
    @RegisterBlock(offset: 0x114)
    public var power_hp_pad: Register<POWER_HP_PAD>

    /// need_des
    @RegisterBlock(offset: 0x118)
    public var power_vdd_spi_cntl: Register<POWER_VDD_SPI_CNTL>

    /// need_des
    @RegisterBlock(offset: 0x11c)
    public var power_ck_wait_cntl: Register<POWER_CK_WAIT_CNTL>

    /// need_des
    @RegisterBlock(offset: 0x120)
    public var slp_wakeup_cntl0: Register<SLP_WAKEUP_CNTL0>

    /// need_des
    @RegisterBlock(offset: 0x124)
    public var slp_wakeup_cntl1: Register<SLP_WAKEUP_CNTL1>

    /// need_des
    @RegisterBlock(offset: 0x128)
    public var slp_wakeup_cntl2: Register<SLP_WAKEUP_CNTL2>

    /// need_des
    @RegisterBlock(offset: 0x12c)
    public var slp_wakeup_cntl3: Register<SLP_WAKEUP_CNTL3>

    /// need_des
    @RegisterBlock(offset: 0x130)
    public var slp_wakeup_cntl4: Register<SLP_WAKEUP_CNTL4>

    /// need_des
    @RegisterBlock(offset: 0x134)
    public var slp_wakeup_cntl5: Register<SLP_WAKEUP_CNTL5>

    /// need_des
    @RegisterBlock(offset: 0x138)
    public var slp_wakeup_cntl6: Register<SLP_WAKEUP_CNTL6>

    /// need_des
    @RegisterBlock(offset: 0x13c)
    public var slp_wakeup_cntl7: Register<SLP_WAKEUP_CNTL7>

    /// need_des
    @RegisterBlock(offset: 0x140)
    public var slp_wakeup_status0: Register<SLP_WAKEUP_STATUS0>

    /// need_des
    @RegisterBlock(offset: 0x144)
    public var slp_wakeup_status1: Register<SLP_WAKEUP_STATUS1>

    /// need_des
    @RegisterBlock(offset: 0x148)
    public var hp_ck_poweron: Register<HP_CK_POWERON>

    /// need_des
    @RegisterBlock(offset: 0x14c)
    public var hp_ck_cntl: Register<HP_CK_CNTL>

    /// need_des
    @RegisterBlock(offset: 0x150)
    public var por_status: Register<POR_STATUS>

    /// need_des
    @RegisterBlock(offset: 0x154)
    public var rf_pwc: Register<RF_PWC>

    /// need_des
    @RegisterBlock(offset: 0x158)
    public var backup_cfg: Register<BACKUP_CFG>

    /// need_des
    @RegisterBlock(offset: 0x15c)
    public var int_raw: Register<INT_RAW>

    /// need_des
    @RegisterBlock(offset: 0x160)
    public var hp_int_st: Register<HP_INT_ST>

    /// need_des
    @RegisterBlock(offset: 0x164)
    public var hp_int_ena: Register<HP_INT_ENA>

    /// need_des
    @RegisterBlock(offset: 0x168)
    public var hp_int_clr: Register<HP_INT_CLR>

    /// need_des
    @RegisterBlock(offset: 0x16c)
    public var lp_int_raw: Register<LP_INT_RAW>

    /// need_des
    @RegisterBlock(offset: 0x170)
    public var lp_int_st: Register<LP_INT_ST>

    /// need_des
    @RegisterBlock(offset: 0x174)
    public var lp_int_ena: Register<LP_INT_ENA>

    /// need_des
    @RegisterBlock(offset: 0x178)
    public var lp_int_clr: Register<LP_INT_CLR>

    /// need_des
    @RegisterBlock(offset: 0x17c)
    public var lp_cpu_pwr0: Register<LP_CPU_PWR0>

    /// need_des
    @RegisterBlock(offset: 0x180)
    public var lp_cpu_pwr1: Register<LP_CPU_PWR1>

    /// need_des
    @RegisterBlock(offset: 0x184)
    public var hp_lp_cpu_comm: Register<HP_LP_CPU_COMM>

    /// need_des
    @RegisterBlock(offset: 0x188)
    public var hp_regulator_cfg: Register<HP_REGULATOR_CFG>

    /// need_des
    @RegisterBlock(offset: 0x18c)
    public var main_state: Register<MAIN_STATE>

    /// need_des
    @RegisterBlock(offset: 0x190)
    public var pwr_state: Register<PWR_STATE>

    /// need_des
    @RegisterBlock(offset: 0x194)
    public var clk_state0: Register<CLK_STATE0>

    /// need_des
    @RegisterBlock(offset: 0x198)
    public var clk_state1: Register<CLK_STATE1>

    /// need_des
    @RegisterBlock(offset: 0x19c)
    public var clk_state2: Register<CLK_STATE2>

    /// need_des
    @RegisterBlock(offset: 0x1a0)
    public var vdd_spi_status: Register<VDD_SPI_STATUS>

    /// need_des
    @RegisterBlock(offset: 0x3fc)
    public var date: Register<DATE>
}

extension PMU {
    /// need_des
    @Register(bitWidth: 32)
    public struct HP_ACTIVE_DIG_POWER {
        /// need_des
        @ReadWrite(bits: 21..<22)
        public var hp_active_vdd_spi_pd_en: HP_ACTIVE_VDD_SPI_PD_EN

        /// need_des
        @ReadWrite(bits: 22..<23)
        public var hp_active_hp_mem_dslp: HP_ACTIVE_HP_MEM_DSLP

        /// need_des
        @ReadWrite(bits: 23..<27)
        public var hp_active_pd_hp_mem_pd_en: HP_ACTIVE_PD_HP_MEM_PD_EN

        /// need_des
        @ReadWrite(bits: 27..<28)
        public var hp_active_pd_hp_wifi_pd_en: HP_ACTIVE_PD_HP_WIFI_PD_EN

        /// need_des
        @ReadWrite(bits: 29..<30)
        public var hp_active_pd_hp_cpu_pd_en: HP_ACTIVE_PD_HP_CPU_PD_EN

        /// need_des
        @ReadWrite(bits: 30..<31)
        public var hp_active_pd_hp_aon_pd_en: HP_ACTIVE_PD_HP_AON_PD_EN

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var hp_active_pd_top_pd_en: HP_ACTIVE_PD_TOP_PD_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_ACTIVE_ICG_HP_FUNC {
        /// need_des
        @ReadWrite(bits: 0..<32)
        public var hp_active_dig_icg_func_en: HP_ACTIVE_DIG_ICG_FUNC_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_ACTIVE_ICG_HP_APB {
        /// need_des
        @ReadWrite(bits: 0..<32)
        public var hp_active_dig_icg_apb_en: HP_ACTIVE_DIG_ICG_APB_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_ACTIVE_ICG_MODEM {
        /// need_des
        @ReadWrite(bits: 30..<32)
        public var hp_active_dig_icg_modem_code: HP_ACTIVE_DIG_ICG_MODEM_CODE
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_ACTIVE_HP_SYS_CNTL {
        /// need_des
        @ReadWrite(bits: 24..<25)
        public var hp_active_uart_wakeup_en: HP_ACTIVE_UART_WAKEUP_EN

        /// need_des
        @ReadWrite(bits: 25..<26)
        public var hp_active_lp_pad_hold_all: HP_ACTIVE_LP_PAD_HOLD_ALL

        /// need_des
        @ReadWrite(bits: 26..<27)
        public var hp_active_hp_pad_hold_all: HP_ACTIVE_HP_PAD_HOLD_ALL

        /// need_des
        @ReadWrite(bits: 27..<28)
        public var hp_active_dig_pad_slp_sel: HP_ACTIVE_DIG_PAD_SLP_SEL

        /// need_des
        @ReadWrite(bits: 28..<29)
        public var hp_active_dig_pause_wdt: HP_ACTIVE_DIG_PAUSE_WDT

        /// need_des
        @ReadWrite(bits: 29..<30)
        public var hp_active_dig_cpu_stall: HP_ACTIVE_DIG_CPU_STALL
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_ACTIVE_HP_CK_POWER {
        /// need_des
        @ReadWrite(bits: 26..<27)
        public var hp_active_i2c_iso_en: HP_ACTIVE_I2C_ISO_EN

        /// need_des
        @ReadWrite(bits: 27..<28)
        public var hp_active_i2c_retention: HP_ACTIVE_I2C_RETENTION

        /// need_des
        @ReadWrite(bits: 28..<29)
        public var hp_active_xpd_bb_i2c: HP_ACTIVE_XPD_BB_I2C

        /// need_des
        @ReadWrite(bits: 29..<30)
        public var hp_active_xpd_bbpll_i2c: HP_ACTIVE_XPD_BBPLL_I2C

        /// need_des
        @ReadWrite(bits: 30..<31)
        public var hp_active_xpd_bbpll: HP_ACTIVE_XPD_BBPLL
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_ACTIVE_BIAS {
        /// need_des
        @ReadWrite(bits: 25..<26)
        public var hp_active_xpd_bias: HP_ACTIVE_XPD_BIAS

        /// need_des
        @ReadWrite(bits: 26..<30)
        public var hp_active_dbg_atten: HP_ACTIVE_DBG_ATTEN

        /// need_des
        @ReadWrite(bits: 30..<31)
        public var hp_active_pd_cur: HP_ACTIVE_PD_CUR

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var sleep: SLEEP
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_ACTIVE_BACKUP {
        /// need_des
        @ReadWrite(bits: 4..<6)
        public var hp_sleep2active_backup_modem_clk_code: HP_SLEEP2ACTIVE_BACKUP_MODEM_CLK_CODE

        /// need_des
        @ReadWrite(bits: 6..<8)
        public var hp_modem2active_backup_modem_clk_code: HP_MODEM2ACTIVE_BACKUP_MODEM_CLK_CODE

        /// need_des
        @ReadWrite(bits: 10..<11)
        public var hp_active_retention_mode: HP_ACTIVE_RETENTION_MODE

        /// need_des
        @ReadWrite(bits: 11..<12)
        public var hp_sleep2active_retention_en: HP_SLEEP2ACTIVE_RETENTION_EN

        /// need_des
        @ReadWrite(bits: 12..<13)
        public var hp_modem2active_retention_en: HP_MODEM2ACTIVE_RETENTION_EN

        /// need_des
        @ReadWrite(bits: 14..<16)
        public var hp_sleep2active_backup_clk_sel: HP_SLEEP2ACTIVE_BACKUP_CLK_SEL

        /// need_des
        @ReadWrite(bits: 16..<18)
        public var hp_modem2active_backup_clk_sel: HP_MODEM2ACTIVE_BACKUP_CLK_SEL

        /// need_des
        @ReadWrite(bits: 20..<23)
        public var hp_sleep2active_backup_mode: HP_SLEEP2ACTIVE_BACKUP_MODE

        /// need_des
        @ReadWrite(bits: 23..<26)
        public var hp_modem2active_backup_mode: HP_MODEM2ACTIVE_BACKUP_MODE

        /// need_des
        @ReadWrite(bits: 29..<30)
        public var hp_sleep2active_backup_en: HP_SLEEP2ACTIVE_BACKUP_EN

        /// need_des
        @ReadWrite(bits: 30..<31)
        public var hp_modem2active_backup_en: HP_MODEM2ACTIVE_BACKUP_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_ACTIVE_BACKUP_CLK {
        /// need_des
        @ReadWrite(bits: 0..<32)
        public var hp_active_backup_icg_func_en: HP_ACTIVE_BACKUP_ICG_FUNC_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_ACTIVE_SYSCLK {
        /// need_des
        @ReadWrite(bits: 26..<27)
        public var hp_active_dig_sys_clk_no_div: HP_ACTIVE_DIG_SYS_CLK_NO_DIV

        /// need_des
        @ReadWrite(bits: 27..<28)
        public var hp_active_icg_sys_clock_en: HP_ACTIVE_ICG_SYS_CLOCK_EN

        /// need_des
        @ReadWrite(bits: 28..<29)
        public var hp_active_sys_clk_slp_sel: HP_ACTIVE_SYS_CLK_SLP_SEL

        /// need_des
        @ReadWrite(bits: 29..<30)
        public var hp_active_icg_slp_sel: HP_ACTIVE_ICG_SLP_SEL

        /// need_des
        @ReadWrite(bits: 30..<32)
        public var hp_active_dig_sys_clk_sel: HP_ACTIVE_DIG_SYS_CLK_SEL
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_ACTIVE_HP_REGULATOR0 {
        /// need_des
        @ReadOnly(bits: 4..<9)
        public var lp_dbias_vol: LP_DBIAS_VOL

        /// need_des
        @ReadOnly(bits: 9..<14)
        public var hp_dbias_vol: HP_DBIAS_VOL

        /// need_des
        @ReadWrite(bits: 14..<15)
        public var dig_regulator0_dbias_sel: DIG_REGULATOR0_DBIAS_SEL

        /// need_des
        @WriteOnly(bits: 15..<16)
        public var dig_dbias_init: DIG_DBIAS_INIT

        /// need_des
        @ReadWrite(bits: 16..<17)
        public var hp_active_hp_regulator_slp_mem_xpd: HP_ACTIVE_HP_REGULATOR_SLP_MEM_XPD

        /// need_des
        @ReadWrite(bits: 17..<18)
        public var hp_active_hp_regulator_slp_logic_xpd: HP_ACTIVE_HP_REGULATOR_SLP_LOGIC_XPD

        /// need_des
        @ReadWrite(bits: 18..<19)
        public var hp_active_hp_regulator_xpd: HP_ACTIVE_HP_REGULATOR_XPD

        /// need_des
        @ReadWrite(bits: 19..<23)
        public var hp_active_hp_regulator_slp_mem_dbias: HP_ACTIVE_HP_REGULATOR_SLP_MEM_DBIAS

        /// need_des
        @ReadWrite(bits: 23..<27)
        public var hp_active_hp_regulator_slp_logic_dbias: HP_ACTIVE_HP_REGULATOR_SLP_LOGIC_DBIAS

        /// need_des
        @ReadWrite(bits: 27..<32)
        public var hp_active_hp_regulator_dbias: HP_ACTIVE_HP_REGULATOR_DBIAS
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_ACTIVE_HP_REGULATOR1 {
        /// need_des
        @ReadWrite(bits: 8..<32)
        public var hp_active_hp_regulator_drv_b: HP_ACTIVE_HP_REGULATOR_DRV_B
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_ACTIVE_XTAL {
        /// need_des
        @ReadWrite(bits: 31..<32)
        public var hp_active_xpd_xtal: HP_ACTIVE_XPD_XTAL
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_MODEM_DIG_POWER {
        /// need_des
        @ReadWrite(bits: 21..<22)
        public var hp_modem_vdd_spi_pd_en: HP_MODEM_VDD_SPI_PD_EN

        /// need_des
        @ReadWrite(bits: 22..<23)
        public var hp_modem_hp_mem_dslp: HP_MODEM_HP_MEM_DSLP

        /// need_des
        @ReadWrite(bits: 23..<27)
        public var hp_modem_pd_hp_mem_pd_en: HP_MODEM_PD_HP_MEM_PD_EN

        /// need_des
        @ReadWrite(bits: 27..<28)
        public var hp_modem_pd_hp_wifi_pd_en: HP_MODEM_PD_HP_WIFI_PD_EN

        /// need_des
        @ReadWrite(bits: 29..<30)
        public var hp_modem_pd_hp_cpu_pd_en: HP_MODEM_PD_HP_CPU_PD_EN

        /// need_des
        @ReadWrite(bits: 30..<31)
        public var hp_modem_pd_hp_aon_pd_en: HP_MODEM_PD_HP_AON_PD_EN

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var hp_modem_pd_top_pd_en: HP_MODEM_PD_TOP_PD_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_MODEM_ICG_HP_FUNC {
        /// need_des
        @ReadWrite(bits: 0..<32)
        public var hp_modem_dig_icg_func_en: HP_MODEM_DIG_ICG_FUNC_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_MODEM_ICG_HP_APB {
        /// need_des
        @ReadWrite(bits: 0..<32)
        public var hp_modem_dig_icg_apb_en: HP_MODEM_DIG_ICG_APB_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_MODEM_ICG_MODEM {
        /// need_des
        @ReadWrite(bits: 30..<32)
        public var hp_modem_dig_icg_modem_code: HP_MODEM_DIG_ICG_MODEM_CODE
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_MODEM_HP_SYS_CNTL {
        /// need_des
        @ReadWrite(bits: 24..<25)
        public var hp_modem_uart_wakeup_en: HP_MODEM_UART_WAKEUP_EN

        /// need_des
        @ReadWrite(bits: 25..<26)
        public var hp_modem_lp_pad_hold_all: HP_MODEM_LP_PAD_HOLD_ALL

        /// need_des
        @ReadWrite(bits: 26..<27)
        public var hp_modem_hp_pad_hold_all: HP_MODEM_HP_PAD_HOLD_ALL

        /// need_des
        @ReadWrite(bits: 27..<28)
        public var hp_modem_dig_pad_slp_sel: HP_MODEM_DIG_PAD_SLP_SEL

        /// need_des
        @ReadWrite(bits: 28..<29)
        public var hp_modem_dig_pause_wdt: HP_MODEM_DIG_PAUSE_WDT

        /// need_des
        @ReadWrite(bits: 29..<30)
        public var hp_modem_dig_cpu_stall: HP_MODEM_DIG_CPU_STALL
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_MODEM_HP_CK_POWER {
        /// need_des
        @ReadWrite(bits: 26..<27)
        public var hp_modem_i2c_iso_en: HP_MODEM_I2C_ISO_EN

        /// need_des
        @ReadWrite(bits: 27..<28)
        public var hp_modem_i2c_retention: HP_MODEM_I2C_RETENTION

        /// need_des
        @ReadWrite(bits: 28..<29)
        public var hp_modem_xpd_bb_i2c: HP_MODEM_XPD_BB_I2C

        /// need_des
        @ReadWrite(bits: 29..<30)
        public var hp_modem_xpd_bbpll_i2c: HP_MODEM_XPD_BBPLL_I2C

        /// need_des
        @ReadWrite(bits: 30..<31)
        public var hp_modem_xpd_bbpll: HP_MODEM_XPD_BBPLL
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_MODEM_BIAS {
        /// need_des
        @ReadWrite(bits: 25..<26)
        public var hp_modem_xpd_bias: HP_MODEM_XPD_BIAS

        /// need_des
        @ReadWrite(bits: 26..<30)
        public var hp_modem_dbg_atten: HP_MODEM_DBG_ATTEN

        /// need_des
        @ReadWrite(bits: 30..<31)
        public var hp_modem_pd_cur: HP_MODEM_PD_CUR

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var sleep: SLEEP
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_MODEM_BACKUP {
        /// need_des
        @ReadWrite(bits: 4..<6)
        public var hp_sleep2modem_backup_modem_clk_code: HP_SLEEP2MODEM_BACKUP_MODEM_CLK_CODE

        /// need_des
        @ReadWrite(bits: 10..<11)
        public var hp_modem_retention_mode: HP_MODEM_RETENTION_MODE

        /// need_des
        @ReadWrite(bits: 11..<12)
        public var hp_sleep2modem_retention_en: HP_SLEEP2MODEM_RETENTION_EN

        /// need_des
        @ReadWrite(bits: 14..<16)
        public var hp_sleep2modem_backup_clk_sel: HP_SLEEP2MODEM_BACKUP_CLK_SEL

        /// need_des
        @ReadWrite(bits: 20..<23)
        public var hp_sleep2modem_backup_mode: HP_SLEEP2MODEM_BACKUP_MODE

        /// need_des
        @ReadWrite(bits: 29..<30)
        public var hp_sleep2modem_backup_en: HP_SLEEP2MODEM_BACKUP_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_MODEM_BACKUP_CLK {
        /// need_des
        @ReadWrite(bits: 0..<32)
        public var hp_modem_backup_icg_func_en: HP_MODEM_BACKUP_ICG_FUNC_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_MODEM_SYSCLK {
        /// need_des
        @ReadWrite(bits: 26..<27)
        public var hp_modem_dig_sys_clk_no_div: HP_MODEM_DIG_SYS_CLK_NO_DIV

        /// need_des
        @ReadWrite(bits: 27..<28)
        public var hp_modem_icg_sys_clock_en: HP_MODEM_ICG_SYS_CLOCK_EN

        /// need_des
        @ReadWrite(bits: 28..<29)
        public var hp_modem_sys_clk_slp_sel: HP_MODEM_SYS_CLK_SLP_SEL

        /// need_des
        @ReadWrite(bits: 29..<30)
        public var hp_modem_icg_slp_sel: HP_MODEM_ICG_SLP_SEL

        /// need_des
        @ReadWrite(bits: 30..<32)
        public var hp_modem_dig_sys_clk_sel: HP_MODEM_DIG_SYS_CLK_SEL
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_MODEM_HP_REGULATOR0 {
        /// need_des
        @ReadWrite(bits: 16..<17)
        public var hp_modem_hp_regulator_slp_mem_xpd: HP_MODEM_HP_REGULATOR_SLP_MEM_XPD

        /// need_des
        @ReadWrite(bits: 17..<18)
        public var hp_modem_hp_regulator_slp_logic_xpd: HP_MODEM_HP_REGULATOR_SLP_LOGIC_XPD

        /// need_des
        @ReadWrite(bits: 18..<19)
        public var hp_modem_hp_regulator_xpd: HP_MODEM_HP_REGULATOR_XPD

        /// need_des
        @ReadWrite(bits: 19..<23)
        public var hp_modem_hp_regulator_slp_mem_dbias: HP_MODEM_HP_REGULATOR_SLP_MEM_DBIAS

        /// need_des
        @ReadWrite(bits: 23..<27)
        public var hp_modem_hp_regulator_slp_logic_dbias: HP_MODEM_HP_REGULATOR_SLP_LOGIC_DBIAS

        /// need_des
        @ReadWrite(bits: 27..<32)
        public var hp_modem_hp_regulator_dbias: HP_MODEM_HP_REGULATOR_DBIAS
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_MODEM_HP_REGULATOR1 {
        /// need_des
        @ReadWrite(bits: 8..<32)
        public var hp_modem_hp_regulator_drv_b: HP_MODEM_HP_REGULATOR_DRV_B
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_MODEM_XTAL {
        /// need_des
        @ReadWrite(bits: 31..<32)
        public var hp_modem_xpd_xtal: HP_MODEM_XPD_XTAL
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_SLEEP_DIG_POWER {
        /// need_des
        @ReadWrite(bits: 21..<22)
        public var hp_sleep_vdd_spi_pd_en: HP_SLEEP_VDD_SPI_PD_EN

        /// need_des
        @ReadWrite(bits: 22..<23)
        public var hp_sleep_hp_mem_dslp: HP_SLEEP_HP_MEM_DSLP

        /// need_des
        @ReadWrite(bits: 23..<27)
        public var hp_sleep_pd_hp_mem_pd_en: HP_SLEEP_PD_HP_MEM_PD_EN

        /// need_des
        @ReadWrite(bits: 27..<28)
        public var hp_sleep_pd_hp_wifi_pd_en: HP_SLEEP_PD_HP_WIFI_PD_EN

        /// need_des
        @ReadWrite(bits: 29..<30)
        public var hp_sleep_pd_hp_cpu_pd_en: HP_SLEEP_PD_HP_CPU_PD_EN

        /// need_des
        @ReadWrite(bits: 30..<31)
        public var hp_sleep_pd_hp_aon_pd_en: HP_SLEEP_PD_HP_AON_PD_EN

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var hp_sleep_pd_top_pd_en: HP_SLEEP_PD_TOP_PD_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_SLEEP_ICG_HP_FUNC {
        /// need_des
        @ReadWrite(bits: 0..<32)
        public var hp_sleep_dig_icg_func_en: HP_SLEEP_DIG_ICG_FUNC_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_SLEEP_ICG_HP_APB {
        /// need_des
        @ReadWrite(bits: 0..<32)
        public var hp_sleep_dig_icg_apb_en: HP_SLEEP_DIG_ICG_APB_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_SLEEP_ICG_MODEM {
        /// need_des
        @ReadWrite(bits: 30..<32)
        public var hp_sleep_dig_icg_modem_code: HP_SLEEP_DIG_ICG_MODEM_CODE
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_SLEEP_HP_SYS_CNTL {
        /// need_des
        @ReadWrite(bits: 24..<25)
        public var hp_sleep_uart_wakeup_en: HP_SLEEP_UART_WAKEUP_EN

        /// need_des
        @ReadWrite(bits: 25..<26)
        public var hp_sleep_lp_pad_hold_all: HP_SLEEP_LP_PAD_HOLD_ALL

        /// need_des
        @ReadWrite(bits: 26..<27)
        public var hp_sleep_hp_pad_hold_all: HP_SLEEP_HP_PAD_HOLD_ALL

        /// need_des
        @ReadWrite(bits: 27..<28)
        public var hp_sleep_dig_pad_slp_sel: HP_SLEEP_DIG_PAD_SLP_SEL

        /// need_des
        @ReadWrite(bits: 28..<29)
        public var hp_sleep_dig_pause_wdt: HP_SLEEP_DIG_PAUSE_WDT

        /// need_des
        @ReadWrite(bits: 29..<30)
        public var hp_sleep_dig_cpu_stall: HP_SLEEP_DIG_CPU_STALL
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_SLEEP_HP_CK_POWER {
        /// need_des
        @ReadWrite(bits: 26..<27)
        public var hp_sleep_i2c_iso_en: HP_SLEEP_I2C_ISO_EN

        /// need_des
        @ReadWrite(bits: 27..<28)
        public var hp_sleep_i2c_retention: HP_SLEEP_I2C_RETENTION

        /// need_des
        @ReadWrite(bits: 28..<29)
        public var hp_sleep_xpd_bb_i2c: HP_SLEEP_XPD_BB_I2C

        /// need_des
        @ReadWrite(bits: 29..<30)
        public var hp_sleep_xpd_bbpll_i2c: HP_SLEEP_XPD_BBPLL_I2C

        /// need_des
        @ReadWrite(bits: 30..<31)
        public var hp_sleep_xpd_bbpll: HP_SLEEP_XPD_BBPLL
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_SLEEP_BIAS {
        /// need_des
        @ReadWrite(bits: 25..<26)
        public var hp_sleep_xpd_bias: HP_SLEEP_XPD_BIAS

        /// need_des
        @ReadWrite(bits: 26..<30)
        public var hp_sleep_dbg_atten: HP_SLEEP_DBG_ATTEN

        /// need_des
        @ReadWrite(bits: 30..<31)
        public var hp_sleep_pd_cur: HP_SLEEP_PD_CUR

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var sleep: SLEEP
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_SLEEP_BACKUP {
        /// need_des
        @ReadWrite(bits: 6..<8)
        public var hp_modem2sleep_backup_modem_clk_code: HP_MODEM2SLEEP_BACKUP_MODEM_CLK_CODE

        /// need_des
        @ReadWrite(bits: 8..<10)
        public var hp_active2sleep_backup_modem_clk_code: HP_ACTIVE2SLEEP_BACKUP_MODEM_CLK_CODE

        /// need_des
        @ReadWrite(bits: 10..<11)
        public var hp_sleep_retention_mode: HP_SLEEP_RETENTION_MODE

        /// need_des
        @ReadWrite(bits: 12..<13)
        public var hp_modem2sleep_retention_en: HP_MODEM2SLEEP_RETENTION_EN

        /// need_des
        @ReadWrite(bits: 13..<14)
        public var hp_active2sleep_retention_en: HP_ACTIVE2SLEEP_RETENTION_EN

        /// need_des
        @ReadWrite(bits: 16..<18)
        public var hp_modem2sleep_backup_clk_sel: HP_MODEM2SLEEP_BACKUP_CLK_SEL

        /// need_des
        @ReadWrite(bits: 18..<20)
        public var hp_active2sleep_backup_clk_sel: HP_ACTIVE2SLEEP_BACKUP_CLK_SEL

        /// need_des
        @ReadWrite(bits: 23..<26)
        public var hp_modem2sleep_backup_mode: HP_MODEM2SLEEP_BACKUP_MODE

        /// need_des
        @ReadWrite(bits: 26..<29)
        public var hp_active2sleep_backup_mode: HP_ACTIVE2SLEEP_BACKUP_MODE

        /// need_des
        @ReadWrite(bits: 30..<31)
        public var hp_modem2sleep_backup_en: HP_MODEM2SLEEP_BACKUP_EN

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var hp_active2sleep_backup_en: HP_ACTIVE2SLEEP_BACKUP_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_SLEEP_BACKUP_CLK {
        /// need_des
        @ReadWrite(bits: 0..<32)
        public var hp_sleep_backup_icg_func_en: HP_SLEEP_BACKUP_ICG_FUNC_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_SLEEP_SYSCLK {
        /// need_des
        @ReadWrite(bits: 26..<27)
        public var hp_sleep_dig_sys_clk_no_div: HP_SLEEP_DIG_SYS_CLK_NO_DIV

        /// need_des
        @ReadWrite(bits: 27..<28)
        public var hp_sleep_icg_sys_clock_en: HP_SLEEP_ICG_SYS_CLOCK_EN

        /// need_des
        @ReadWrite(bits: 28..<29)
        public var hp_sleep_sys_clk_slp_sel: HP_SLEEP_SYS_CLK_SLP_SEL

        /// need_des
        @ReadWrite(bits: 29..<30)
        public var hp_sleep_icg_slp_sel: HP_SLEEP_ICG_SLP_SEL

        /// need_des
        @ReadWrite(bits: 30..<32)
        public var hp_sleep_dig_sys_clk_sel: HP_SLEEP_DIG_SYS_CLK_SEL
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_SLEEP_HP_REGULATOR0 {
        /// need_des
        @ReadWrite(bits: 16..<17)
        public var hp_sleep_hp_regulator_slp_mem_xpd: HP_SLEEP_HP_REGULATOR_SLP_MEM_XPD

        /// need_des
        @ReadWrite(bits: 17..<18)
        public var hp_sleep_hp_regulator_slp_logic_xpd: HP_SLEEP_HP_REGULATOR_SLP_LOGIC_XPD

        /// need_des
        @ReadWrite(bits: 18..<19)
        public var hp_sleep_hp_regulator_xpd: HP_SLEEP_HP_REGULATOR_XPD

        /// need_des
        @ReadWrite(bits: 19..<23)
        public var hp_sleep_hp_regulator_slp_mem_dbias: HP_SLEEP_HP_REGULATOR_SLP_MEM_DBIAS

        /// need_des
        @ReadWrite(bits: 23..<27)
        public var hp_sleep_hp_regulator_slp_logic_dbias: HP_SLEEP_HP_REGULATOR_SLP_LOGIC_DBIAS

        /// need_des
        @ReadWrite(bits: 27..<32)
        public var hp_sleep_hp_regulator_dbias: HP_SLEEP_HP_REGULATOR_DBIAS
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_SLEEP_HP_REGULATOR1 {
        /// need_des
        @ReadWrite(bits: 8..<32)
        public var hp_sleep_hp_regulator_drv_b: HP_SLEEP_HP_REGULATOR_DRV_B
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_SLEEP_XTAL {
        /// need_des
        @ReadWrite(bits: 31..<32)
        public var hp_sleep_xpd_xtal: HP_SLEEP_XPD_XTAL
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_SLEEP_LP_REGULATOR0 {
        /// need_des
        @ReadWrite(bits: 21..<22)
        public var hp_sleep_lp_regulator_slp_xpd: HP_SLEEP_LP_REGULATOR_SLP_XPD

        /// need_des
        @ReadWrite(bits: 22..<23)
        public var hp_sleep_lp_regulator_xpd: HP_SLEEP_LP_REGULATOR_XPD

        /// need_des
        @ReadWrite(bits: 23..<27)
        public var hp_sleep_lp_regulator_slp_dbias: HP_SLEEP_LP_REGULATOR_SLP_DBIAS

        /// need_des
        @ReadWrite(bits: 27..<32)
        public var hp_sleep_lp_regulator_dbias: HP_SLEEP_LP_REGULATOR_DBIAS
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_SLEEP_LP_REGULATOR1 {
        /// need_des
        @ReadWrite(bits: 28..<32)
        public var hp_sleep_lp_regulator_drv_b: HP_SLEEP_LP_REGULATOR_DRV_B
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_SLEEP_LP_DCDC_RESERVE {
        /// need_des
        @WriteOnly(bits: 0..<32)
        public var hp_sleep_lp_dcdc_reserve_field: HP_SLEEP_LP_DCDC_RESERVE_FIELD
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_SLEEP_LP_DIG_POWER {
        /// need_des
        @ReadWrite(bits: 30..<31)
        public var hp_sleep_lp_mem_dslp: HP_SLEEP_LP_MEM_DSLP

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var hp_sleep_pd_lp_peri_pd_en: HP_SLEEP_PD_LP_PERI_PD_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_SLEEP_LP_CK_POWER {
        /// need_des
        @ReadWrite(bits: 28..<29)
        public var hp_sleep_xpd_xtal32k: HP_SLEEP_XPD_XTAL32K

        /// need_des
        @ReadWrite(bits: 29..<30)
        public var hp_sleep_xpd_rc32k: HP_SLEEP_XPD_RC32K

        /// need_des
        @ReadWrite(bits: 30..<31)
        public var hp_sleep_xpd_fosc_clk: HP_SLEEP_XPD_FOSC_CLK

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var hp_sleep_pd_osc_clk: HP_SLEEP_PD_OSC_CLK
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct LP_SLEEP_LP_BIAS_RESERVE {
        /// need_des
        @WriteOnly(bits: 0..<32)
        public var lp_sleep_lp_bias_reserve_field: LP_SLEEP_LP_BIAS_RESERVE_FIELD
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct LP_SLEEP_LP_REGULATOR0 {
        /// need_des
        @ReadWrite(bits: 21..<22)
        public var lp_sleep_lp_regulator_slp_xpd: LP_SLEEP_LP_REGULATOR_SLP_XPD

        /// need_des
        @ReadWrite(bits: 22..<23)
        public var lp_sleep_lp_regulator_xpd: LP_SLEEP_LP_REGULATOR_XPD

        /// need_des
        @ReadWrite(bits: 23..<27)
        public var lp_sleep_lp_regulator_slp_dbias: LP_SLEEP_LP_REGULATOR_SLP_DBIAS

        /// need_des
        @ReadWrite(bits: 27..<32)
        public var lp_sleep_lp_regulator_dbias: LP_SLEEP_LP_REGULATOR_DBIAS
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct LP_SLEEP_LP_REGULATOR1 {
        /// need_des
        @ReadWrite(bits: 28..<32)
        public var lp_sleep_lp_regulator_drv_b: LP_SLEEP_LP_REGULATOR_DRV_B
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct LP_SLEEP_XTAL {
        /// need_des
        @ReadWrite(bits: 31..<32)
        public var lp_sleep_xpd_xtal: LP_SLEEP_XPD_XTAL
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct LP_SLEEP_LP_DIG_POWER {
        /// need_des
        @ReadWrite(bits: 30..<31)
        public var lp_sleep_lp_mem_dslp: LP_SLEEP_LP_MEM_DSLP

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var lp_sleep_pd_lp_peri_pd_en: LP_SLEEP_PD_LP_PERI_PD_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct LP_SLEEP_LP_CK_POWER {
        /// need_des
        @ReadWrite(bits: 28..<29)
        public var lp_sleep_xpd_xtal32k: LP_SLEEP_XPD_XTAL32K

        /// need_des
        @ReadWrite(bits: 29..<30)
        public var lp_sleep_xpd_rc32k: LP_SLEEP_XPD_RC32K

        /// need_des
        @ReadWrite(bits: 30..<31)
        public var lp_sleep_xpd_fosc_clk: LP_SLEEP_XPD_FOSC_CLK

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var lp_sleep_pd_osc_clk: LP_SLEEP_PD_OSC_CLK
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct LP_SLEEP_BIAS {
        /// need_des
        @ReadWrite(bits: 25..<26)
        public var lp_sleep_xpd_bias: LP_SLEEP_XPD_BIAS

        /// need_des
        @ReadWrite(bits: 26..<30)
        public var lp_sleep_dbg_atten: LP_SLEEP_DBG_ATTEN

        /// need_des
        @ReadWrite(bits: 30..<31)
        public var lp_sleep_pd_cur: LP_SLEEP_PD_CUR

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var sleep: SLEEP
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct IMM_HP_CK_POWER {
        /// need_des
        @WriteOnly(bits: 0..<1)
        public var tie_low_global_bbpll_icg: TIE_LOW_GLOBAL_BBPLL_ICG

        /// need_des
        @WriteOnly(bits: 1..<2)
        public var tie_low_global_xtal_icg: TIE_LOW_GLOBAL_XTAL_ICG

        /// need_des
        @WriteOnly(bits: 2..<3)
        public var tie_low_i2c_retention: TIE_LOW_I2C_RETENTION

        /// need_des
        @WriteOnly(bits: 3..<4)
        public var tie_low_xpd_bb_i2c: TIE_LOW_XPD_BB_I2C

        /// need_des
        @WriteOnly(bits: 4..<5)
        public var tie_low_xpd_bbpll_i2c: TIE_LOW_XPD_BBPLL_I2C

        /// need_des
        @WriteOnly(bits: 5..<6)
        public var tie_low_xpd_bbpll: TIE_LOW_XPD_BBPLL

        /// need_des
        @WriteOnly(bits: 6..<7)
        public var tie_low_xpd_xtal: TIE_LOW_XPD_XTAL

        /// need_des
        @WriteOnly(bits: 25..<26)
        public var tie_high_global_bbpll_icg: TIE_HIGH_GLOBAL_BBPLL_ICG

        /// need_des
        @WriteOnly(bits: 26..<27)
        public var tie_high_global_xtal_icg: TIE_HIGH_GLOBAL_XTAL_ICG

        /// need_des
        @WriteOnly(bits: 27..<28)
        public var tie_high_i2c_retention: TIE_HIGH_I2C_RETENTION

        /// need_des
        @WriteOnly(bits: 28..<29)
        public var tie_high_xpd_bb_i2c: TIE_HIGH_XPD_BB_I2C

        /// need_des
        @WriteOnly(bits: 29..<30)
        public var tie_high_xpd_bbpll_i2c: TIE_HIGH_XPD_BBPLL_I2C

        /// need_des
        @WriteOnly(bits: 30..<31)
        public var tie_high_xpd_bbpll: TIE_HIGH_XPD_BBPLL

        /// need_des
        @WriteOnly(bits: 31..<32)
        public var tie_high_xpd_xtal: TIE_HIGH_XPD_XTAL
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct IMM_SLEEP_SYSCLK {
        /// need_des
        @WriteOnly(bits: 28..<29)
        public var update_dig_icg_switch: UPDATE_DIG_ICG_SWITCH

        /// need_des
        @WriteOnly(bits: 29..<30)
        public var tie_low_icg_slp_sel: TIE_LOW_ICG_SLP_SEL

        /// need_des
        @WriteOnly(bits: 30..<31)
        public var tie_high_icg_slp_sel: TIE_HIGH_ICG_SLP_SEL

        /// need_des
        @WriteOnly(bits: 31..<32)
        public var update_dig_sys_clk_sel: UPDATE_DIG_SYS_CLK_SEL
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct IMM_HP_FUNC_ICG {
        /// need_des
        @WriteOnly(bits: 31..<32)
        public var update_dig_icg_func_en: UPDATE_DIG_ICG_FUNC_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct IMM_HP_APB_ICG {
        /// need_des
        @WriteOnly(bits: 31..<32)
        public var update_dig_icg_apb_en: UPDATE_DIG_ICG_APB_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct IMM_MODEM_ICG {
        /// need_des
        @WriteOnly(bits: 31..<32)
        public var update_dig_icg_modem_en: UPDATE_DIG_ICG_MODEM_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct IMM_LP_ICG {
        /// need_des
        @WriteOnly(bits: 30..<31)
        public var tie_low_lp_rootclk_sel: TIE_LOW_LP_ROOTCLK_SEL

        /// need_des
        @WriteOnly(bits: 31..<32)
        public var tie_high_lp_rootclk_sel: TIE_HIGH_LP_ROOTCLK_SEL
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct IMM_PAD_HOLD_ALL {
        /// need_des
        @WriteOnly(bits: 28..<29)
        public var tie_high_lp_pad_hold_all: TIE_HIGH_LP_PAD_HOLD_ALL

        /// need_des
        @WriteOnly(bits: 29..<30)
        public var tie_low_lp_pad_hold_all: TIE_LOW_LP_PAD_HOLD_ALL

        /// need_des
        @WriteOnly(bits: 30..<31)
        public var tie_high_hp_pad_hold_all: TIE_HIGH_HP_PAD_HOLD_ALL

        /// need_des
        @WriteOnly(bits: 31..<32)
        public var tie_low_hp_pad_hold_all: TIE_LOW_HP_PAD_HOLD_ALL
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct IMM_I2C_ISO {
        /// need_des
        @WriteOnly(bits: 30..<31)
        public var tie_high_i2c_iso_en: TIE_HIGH_I2C_ISO_EN

        /// need_des
        @WriteOnly(bits: 31..<32)
        public var tie_low_i2c_iso_en: TIE_LOW_I2C_ISO_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct POWER_WAIT_TIMER0 {
        /// need_des
        @ReadWrite(bits: 5..<14)
        public var dg_hp_powerdown_timer: DG_HP_POWERDOWN_TIMER

        /// need_des
        @ReadWrite(bits: 14..<23)
        public var dg_hp_powerup_timer: DG_HP_POWERUP_TIMER

        /// need_des
        @ReadWrite(bits: 23..<32)
        public var dg_hp_wait_timer: DG_HP_WAIT_TIMER
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct POWER_WAIT_TIMER1 {
        /// need_des
        @ReadWrite(bits: 9..<16)
        public var dg_lp_powerdown_timer: DG_LP_POWERDOWN_TIMER

        /// need_des
        @ReadWrite(bits: 16..<23)
        public var dg_lp_powerup_timer: DG_LP_POWERUP_TIMER

        /// need_des
        @ReadWrite(bits: 23..<32)
        public var dg_lp_wait_timer: DG_LP_WAIT_TIMER
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct POWER_PD_TOP_CNTL {
        /// need_des
        @ReadWrite(bits: 0..<1)
        public var force_top_reset: FORCE_TOP_RESET

        /// need_des
        @ReadWrite(bits: 1..<2)
        public var force_top_iso: FORCE_TOP_ISO

        /// need_des
        @ReadWrite(bits: 2..<3)
        public var force_top_pu: FORCE_TOP_PU

        /// need_des
        @ReadWrite(bits: 3..<4)
        public var force_top_no_reset: FORCE_TOP_NO_RESET

        /// need_des
        @ReadWrite(bits: 4..<5)
        public var force_top_no_iso: FORCE_TOP_NO_ISO

        /// need_des
        @ReadWrite(bits: 5..<6)
        public var force_top_pd: FORCE_TOP_PD

        /// need_des
        @ReadWrite(bits: 6..<11)
        public var pd_top_mask: PD_TOP_MASK

        /// need_des
        @ReadWrite(bits: 27..<32)
        public var pd_top_pd_mask: PD_TOP_PD_MASK
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct POWER_PD_HPAON_CNTL {
        /// need_des
        @ReadWrite(bits: 0..<1)
        public var force_hp_aon_reset: FORCE_HP_AON_RESET

        /// need_des
        @ReadWrite(bits: 1..<2)
        public var force_hp_aon_iso: FORCE_HP_AON_ISO

        /// need_des
        @ReadWrite(bits: 2..<3)
        public var force_hp_aon_pu: FORCE_HP_AON_PU

        /// need_des
        @ReadWrite(bits: 3..<4)
        public var force_hp_aon_no_reset: FORCE_HP_AON_NO_RESET

        /// need_des
        @ReadWrite(bits: 4..<5)
        public var force_hp_aon_no_iso: FORCE_HP_AON_NO_ISO

        /// need_des
        @ReadWrite(bits: 5..<6)
        public var force_hp_aon_pd: FORCE_HP_AON_PD

        /// need_des
        @ReadWrite(bits: 6..<11)
        public var pd_hp_aon_mask: PD_HP_AON_MASK

        /// need_des
        @ReadWrite(bits: 27..<32)
        public var pd_hp_aon_pd_mask: PD_HP_AON_PD_MASK
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct POWER_PD_HPCPU_CNTL {
        /// need_des
        @ReadWrite(bits: 0..<1)
        public var force_hp_cpu_reset: FORCE_HP_CPU_RESET

        /// need_des
        @ReadWrite(bits: 1..<2)
        public var force_hp_cpu_iso: FORCE_HP_CPU_ISO

        /// need_des
        @ReadWrite(bits: 2..<3)
        public var force_hp_cpu_pu: FORCE_HP_CPU_PU

        /// need_des
        @ReadWrite(bits: 3..<4)
        public var force_hp_cpu_no_reset: FORCE_HP_CPU_NO_RESET

        /// need_des
        @ReadWrite(bits: 4..<5)
        public var force_hp_cpu_no_iso: FORCE_HP_CPU_NO_ISO

        /// need_des
        @ReadWrite(bits: 5..<6)
        public var force_hp_cpu_pd: FORCE_HP_CPU_PD

        /// need_des
        @ReadWrite(bits: 6..<11)
        public var pd_hp_cpu_mask: PD_HP_CPU_MASK

        /// need_des
        @ReadWrite(bits: 27..<32)
        public var pd_hp_cpu_pd_mask: PD_HP_CPU_PD_MASK
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct POWER_PD_HPPERI_RESERVE {
        /// need_des
        @WriteOnly(bits: 0..<32)
        public var hp_peri_reserve: HP_PERI_RESERVE
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct POWER_PD_HPWIFI_CNTL {
        /// need_des
        @ReadWrite(bits: 0..<1)
        public var force_hp_wifi_reset: FORCE_HP_WIFI_RESET

        /// need_des
        @ReadWrite(bits: 1..<2)
        public var force_hp_wifi_iso: FORCE_HP_WIFI_ISO

        /// need_des
        @ReadWrite(bits: 2..<3)
        public var force_hp_wifi_pu: FORCE_HP_WIFI_PU

        /// need_des
        @ReadWrite(bits: 3..<4)
        public var force_hp_wifi_no_reset: FORCE_HP_WIFI_NO_RESET

        /// need_des
        @ReadWrite(bits: 4..<5)
        public var force_hp_wifi_no_iso: FORCE_HP_WIFI_NO_ISO

        /// need_des
        @ReadWrite(bits: 5..<6)
        public var force_hp_wifi_pd: FORCE_HP_WIFI_PD

        /// need_des
        @ReadWrite(bits: 6..<11)
        public var pd_hp_wifi_mask: PD_HP_WIFI_MASK

        /// need_des
        @ReadWrite(bits: 27..<32)
        public var pd_hp_wifi_pd_mask: PD_HP_WIFI_PD_MASK
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct POWER_PD_LPPERI_CNTL {
        /// need_des
        @ReadWrite(bits: 0..<1)
        public var force_lp_peri_reset: FORCE_LP_PERI_RESET

        /// need_des
        @ReadWrite(bits: 1..<2)
        public var force_lp_peri_iso: FORCE_LP_PERI_ISO

        /// need_des
        @ReadWrite(bits: 2..<3)
        public var force_lp_peri_pu: FORCE_LP_PERI_PU

        /// need_des
        @ReadWrite(bits: 3..<4)
        public var force_lp_peri_no_reset: FORCE_LP_PERI_NO_RESET

        /// need_des
        @ReadWrite(bits: 4..<5)
        public var force_lp_peri_no_iso: FORCE_LP_PERI_NO_ISO

        /// need_des
        @ReadWrite(bits: 5..<6)
        public var force_lp_peri_pd: FORCE_LP_PERI_PD
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct POWER_PD_MEM_CNTL {
        /// need_des
        @ReadWrite(bits: 0..<4)
        public var force_hp_mem_iso: FORCE_HP_MEM_ISO

        /// need_des
        @ReadWrite(bits: 4..<8)
        public var force_hp_mem_pd: FORCE_HP_MEM_PD

        /// need_des
        @ReadWrite(bits: 24..<28)
        public var force_hp_mem_no_iso: FORCE_HP_MEM_NO_ISO

        /// need_des
        @ReadWrite(bits: 28..<32)
        public var force_hp_mem_pu: FORCE_HP_MEM_PU
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct POWER_PD_MEM_MASK {
        /// need_des
        @ReadWrite(bits: 0..<5)
        public var pd_hp_mem2_pd_mask: PD_HP_MEM2_PD_MASK

        /// need_des
        @ReadWrite(bits: 5..<10)
        public var pd_hp_mem1_pd_mask: PD_HP_MEM1_PD_MASK

        /// need_des
        @ReadWrite(bits: 10..<15)
        public var pd_hp_mem0_pd_mask: PD_HP_MEM0_PD_MASK

        /// need_des
        @ReadWrite(bits: 17..<22)
        public var pd_hp_mem2_mask: PD_HP_MEM2_MASK

        /// need_des
        @ReadWrite(bits: 22..<27)
        public var pd_hp_mem1_mask: PD_HP_MEM1_MASK

        /// need_des
        @ReadWrite(bits: 27..<32)
        public var pd_hp_mem0_mask: PD_HP_MEM0_MASK
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct POWER_HP_PAD {
        /// need_des
        @ReadWrite(bits: 0..<1)
        public var force_hp_pad_no_iso_all: FORCE_HP_PAD_NO_ISO_ALL

        /// need_des
        @ReadWrite(bits: 1..<2)
        public var force_hp_pad_iso_all: FORCE_HP_PAD_ISO_ALL
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct POWER_VDD_SPI_CNTL {
        /// need_des
        @ReadWrite(bits: 18..<29)
        public var vdd_spi_pwr_wait: VDD_SPI_PWR_WAIT

        /// need_des
        @ReadWrite(bits: 29..<31)
        public var vdd_spi_pwr_sw: VDD_SPI_PWR_SW

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var vdd_spi_pwr_sel_sw: VDD_SPI_PWR_SEL_SW
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct POWER_CK_WAIT_CNTL {
        /// need_des
        @ReadWrite(bits: 0..<16)
        public var wait_xtl_stable: WAIT_XTL_STABLE

        /// need_des
        @ReadWrite(bits: 16..<32)
        public var wait_pll_stable: WAIT_PLL_STABLE
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct SLP_WAKEUP_CNTL0 {
        /// need_des
        @WriteOnly(bits: 31..<32)
        public var sleep_req: SLEEP_REQ
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct SLP_WAKEUP_CNTL1 {
        /// need_des
        @ReadWrite(bits: 0..<31)
        public var sleep_reject_ena: SLEEP_REJECT_ENA

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var slp_reject_en: SLP_REJECT_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct SLP_WAKEUP_CNTL2 {
        /// need_des
        @ReadWrite(bits: 0..<32)
        public var wakeup_ena: WAKEUP_ENA
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct SLP_WAKEUP_CNTL3 {
        /// need_des
        @ReadWrite(bits: 0..<8)
        public var lp_min_slp_val: LP_MIN_SLP_VAL

        /// need_des
        @ReadWrite(bits: 8..<16)
        public var hp_min_slp_val: HP_MIN_SLP_VAL

        /// need_des
        @ReadWrite(bits: 16..<18)
        public var sleep_prt_sel: SLEEP_PRT_SEL
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct SLP_WAKEUP_CNTL4 {
        /// need_des
        @WriteOnly(bits: 31..<32)
        public var slp_reject_cause_clr: SLP_REJECT_CAUSE_CLR
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct SLP_WAKEUP_CNTL5 {
        /// need_des
        @ReadWrite(bits: 0..<20)
        public var modem_wait_target: MODEM_WAIT_TARGET

        /// need_des
        @ReadWrite(bits: 24..<32)
        public var lp_ana_wait_target: LP_ANA_WAIT_TARGET
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct SLP_WAKEUP_CNTL6 {
        /// need_des
        @ReadWrite(bits: 0..<20)
        public var soc_wakeup_wait: SOC_WAKEUP_WAIT

        /// need_des
        @ReadWrite(bits: 30..<32)
        public var soc_wakeup_wait_cfg: SOC_WAKEUP_WAIT_CFG
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct SLP_WAKEUP_CNTL7 {
        /// need_des
        @ReadWrite(bits: 16..<32)
        public var ana_wait_target: ANA_WAIT_TARGET
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct SLP_WAKEUP_STATUS0 {
        /// need_des
        @ReadOnly(bits: 0..<32)
        public var wakeup_cause: WAKEUP_CAUSE
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct SLP_WAKEUP_STATUS1 {
        /// need_des
        @ReadOnly(bits: 0..<32)
        public var reject_cause: REJECT_CAUSE
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_CK_POWERON {
        /// need_des
        @ReadWrite(bits: 0..<8)
        public var i2c_por_wait_target: I2C_POR_WAIT_TARGET
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_CK_CNTL {
        /// need_des
        @ReadWrite(bits: 0..<8)
        public var modify_icg_cntl_wait: MODIFY_ICG_CNTL_WAIT

        /// need_des
        @ReadWrite(bits: 8..<16)
        public var switch_icg_cntl_wait: SWITCH_ICG_CNTL_WAIT
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct POR_STATUS {
        /// need_des
        @ReadOnly(bits: 31..<32)
        public var por_done: POR_DONE
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct RF_PWC {
        /// need_des
        @ReadWrite(bits: 26..<27)
        public var perif_i2c_rstb: PERIF_I2C_RSTB

        /// need_des
        @ReadWrite(bits: 27..<28)
        public var xpd_perif_i2c: XPD_PERIF_I2C

        /// need_des
        @ReadWrite(bits: 28..<29)
        public var xpd_txrf_i2c: XPD_TXRF_I2C

        /// need_des
        @ReadWrite(bits: 29..<30)
        public var xpd_rfrx_pbus: XPD_RFRX_PBUS

        /// need_des
        @ReadWrite(bits: 30..<31)
        public var xpd_ckgen_i2c: XPD_CKGEN_I2C

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var xpd_pll_i2c: XPD_PLL_I2C
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct BACKUP_CFG {
        /// need_des
        @ReadWrite(bits: 31..<32)
        public var backup_sys_clk_no_div: BACKUP_SYS_CLK_NO_DIV
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct INT_RAW {
        /// need_des
        @ReadWrite(bits: 27..<28)
        public var lp_cpu_exc_int_raw: LP_CPU_EXC_INT_RAW

        /// need_des
        @ReadWrite(bits: 28..<29)
        public var sdio_idle_int_raw: SDIO_IDLE_INT_RAW

        /// need_des
        @ReadWrite(bits: 29..<30)
        public var sw_int_raw: SW_INT_RAW

        /// need_des
        @ReadWrite(bits: 30..<31)
        public var soc_sleep_reject_int_raw: SOC_SLEEP_REJECT_INT_RAW

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var soc_wakeup_int_raw: SOC_WAKEUP_INT_RAW
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_INT_ST {
        /// need_des
        @ReadOnly(bits: 27..<28)
        public var lp_cpu_exc_int_st: LP_CPU_EXC_INT_ST

        /// need_des
        @ReadOnly(bits: 28..<29)
        public var sdio_idle_int_st: SDIO_IDLE_INT_ST

        /// need_des
        @ReadOnly(bits: 29..<30)
        public var sw_int_st: SW_INT_ST

        /// need_des
        @ReadOnly(bits: 30..<31)
        public var soc_sleep_reject_int_st: SOC_SLEEP_REJECT_INT_ST

        /// need_des
        @ReadOnly(bits: 31..<32)
        public var soc_wakeup_int_st: SOC_WAKEUP_INT_ST
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_INT_ENA {
        /// need_des
        @ReadWrite(bits: 27..<28)
        public var lp_cpu_exc_int_ena: LP_CPU_EXC_INT_ENA

        /// need_des
        @ReadWrite(bits: 28..<29)
        public var sdio_idle_int_ena: SDIO_IDLE_INT_ENA

        /// need_des
        @ReadWrite(bits: 29..<30)
        public var sw_int_ena: SW_INT_ENA

        /// need_des
        @ReadWrite(bits: 30..<31)
        public var soc_sleep_reject_int_ena: SOC_SLEEP_REJECT_INT_ENA

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var soc_wakeup_int_ena: SOC_WAKEUP_INT_ENA
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_INT_CLR {
        /// need_des
        @WriteOnly(bits: 27..<28)
        public var lp_cpu_exc_int_clr: LP_CPU_EXC_INT_CLR

        /// need_des
        @WriteOnly(bits: 28..<29)
        public var sdio_idle_int_clr: SDIO_IDLE_INT_CLR

        /// need_des
        @WriteOnly(bits: 29..<30)
        public var sw_int_clr: SW_INT_CLR

        /// need_des
        @WriteOnly(bits: 30..<31)
        public var soc_sleep_reject_int_clr: SOC_SLEEP_REJECT_INT_CLR

        /// need_des
        @WriteOnly(bits: 31..<32)
        public var soc_wakeup_int_clr: SOC_WAKEUP_INT_CLR
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct LP_INT_RAW {
        /// need_des
        @ReadWrite(bits: 20..<21)
        public var lp_cpu_wakeup_int_raw: LP_CPU_WAKEUP_INT_RAW

        /// need_des
        @ReadWrite(bits: 21..<22)
        public var modem_switch_active_end_int_raw: MODEM_SWITCH_ACTIVE_END_INT_RAW

        /// need_des
        @ReadWrite(bits: 22..<23)
        public var sleep_switch_active_end_int_raw: SLEEP_SWITCH_ACTIVE_END_INT_RAW

        /// need_des
        @ReadWrite(bits: 23..<24)
        public var sleep_switch_modem_end_int_raw: SLEEP_SWITCH_MODEM_END_INT_RAW

        /// need_des
        @ReadWrite(bits: 24..<25)
        public var modem_switch_sleep_end_int_raw: MODEM_SWITCH_SLEEP_END_INT_RAW

        /// need_des
        @ReadWrite(bits: 25..<26)
        public var active_switch_sleep_end_int_raw: ACTIVE_SWITCH_SLEEP_END_INT_RAW

        /// need_des
        @ReadWrite(bits: 26..<27)
        public var modem_switch_active_start_int_raw: MODEM_SWITCH_ACTIVE_START_INT_RAW

        /// need_des
        @ReadWrite(bits: 27..<28)
        public var sleep_switch_active_start_int_raw: SLEEP_SWITCH_ACTIVE_START_INT_RAW

        /// need_des
        @ReadWrite(bits: 28..<29)
        public var sleep_switch_modem_start_int_raw: SLEEP_SWITCH_MODEM_START_INT_RAW

        /// need_des
        @ReadWrite(bits: 29..<30)
        public var modem_switch_sleep_start_int_raw: MODEM_SWITCH_SLEEP_START_INT_RAW

        /// need_des
        @ReadWrite(bits: 30..<31)
        public var active_switch_sleep_start_int_raw: ACTIVE_SWITCH_SLEEP_START_INT_RAW

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var hp_sw_trigger_int_raw: HP_SW_TRIGGER_INT_RAW
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct LP_INT_ST {
        /// need_des
        @ReadOnly(bits: 20..<21)
        public var lp_cpu_wakeup_int_st: LP_CPU_WAKEUP_INT_ST

        /// need_des
        @ReadOnly(bits: 21..<22)
        public var modem_switch_active_end_int_st: MODEM_SWITCH_ACTIVE_END_INT_ST

        /// need_des
        @ReadOnly(bits: 22..<23)
        public var sleep_switch_active_end_int_st: SLEEP_SWITCH_ACTIVE_END_INT_ST

        /// need_des
        @ReadOnly(bits: 23..<24)
        public var sleep_switch_modem_end_int_st: SLEEP_SWITCH_MODEM_END_INT_ST

        /// need_des
        @ReadOnly(bits: 24..<25)
        public var modem_switch_sleep_end_int_st: MODEM_SWITCH_SLEEP_END_INT_ST

        /// need_des
        @ReadOnly(bits: 25..<26)
        public var active_switch_sleep_end_int_st: ACTIVE_SWITCH_SLEEP_END_INT_ST

        /// need_des
        @ReadOnly(bits: 26..<27)
        public var modem_switch_active_start_int_st: MODEM_SWITCH_ACTIVE_START_INT_ST

        /// need_des
        @ReadOnly(bits: 27..<28)
        public var sleep_switch_active_start_int_st: SLEEP_SWITCH_ACTIVE_START_INT_ST

        /// need_des
        @ReadOnly(bits: 28..<29)
        public var sleep_switch_modem_start_int_st: SLEEP_SWITCH_MODEM_START_INT_ST

        /// need_des
        @ReadOnly(bits: 29..<30)
        public var modem_switch_sleep_start_int_st: MODEM_SWITCH_SLEEP_START_INT_ST

        /// need_des
        @ReadOnly(bits: 30..<31)
        public var active_switch_sleep_start_int_st: ACTIVE_SWITCH_SLEEP_START_INT_ST

        /// need_des
        @ReadOnly(bits: 31..<32)
        public var hp_sw_trigger_int_st: HP_SW_TRIGGER_INT_ST
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct LP_INT_ENA {
        /// need_des
        @ReadWrite(bits: 20..<21)
        public var lp_cpu_wakeup_int_ena: LP_CPU_WAKEUP_INT_ENA

        /// need_des
        @ReadWrite(bits: 21..<22)
        public var modem_switch_active_end_int_ena: MODEM_SWITCH_ACTIVE_END_INT_ENA

        /// need_des
        @ReadWrite(bits: 22..<23)
        public var sleep_switch_active_end_int_ena: SLEEP_SWITCH_ACTIVE_END_INT_ENA

        /// need_des
        @ReadWrite(bits: 23..<24)
        public var sleep_switch_modem_end_int_ena: SLEEP_SWITCH_MODEM_END_INT_ENA

        /// need_des
        @ReadWrite(bits: 24..<25)
        public var modem_switch_sleep_end_int_ena: MODEM_SWITCH_SLEEP_END_INT_ENA

        /// need_des
        @ReadWrite(bits: 25..<26)
        public var active_switch_sleep_end_int_ena: ACTIVE_SWITCH_SLEEP_END_INT_ENA

        /// need_des
        @ReadWrite(bits: 26..<27)
        public var modem_switch_active_start_int_ena: MODEM_SWITCH_ACTIVE_START_INT_ENA

        /// need_des
        @ReadWrite(bits: 27..<28)
        public var sleep_switch_active_start_int_ena: SLEEP_SWITCH_ACTIVE_START_INT_ENA

        /// need_des
        @ReadWrite(bits: 28..<29)
        public var sleep_switch_modem_start_int_ena: SLEEP_SWITCH_MODEM_START_INT_ENA

        /// need_des
        @ReadWrite(bits: 29..<30)
        public var modem_switch_sleep_start_int_ena: MODEM_SWITCH_SLEEP_START_INT_ENA

        /// need_des
        @ReadWrite(bits: 30..<31)
        public var active_switch_sleep_start_int_ena: ACTIVE_SWITCH_SLEEP_START_INT_ENA

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var hp_sw_trigger_int_ena: HP_SW_TRIGGER_INT_ENA
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct LP_INT_CLR {
        /// need_des
        @WriteOnly(bits: 20..<21)
        public var lp_cpu_wakeup_int_clr: LP_CPU_WAKEUP_INT_CLR

        /// need_des
        @WriteOnly(bits: 21..<22)
        public var modem_switch_active_end_int_clr: MODEM_SWITCH_ACTIVE_END_INT_CLR

        /// need_des
        @WriteOnly(bits: 22..<23)
        public var sleep_switch_active_end_int_clr: SLEEP_SWITCH_ACTIVE_END_INT_CLR

        /// need_des
        @WriteOnly(bits: 23..<24)
        public var sleep_switch_modem_end_int_clr: SLEEP_SWITCH_MODEM_END_INT_CLR

        /// need_des
        @WriteOnly(bits: 24..<25)
        public var modem_switch_sleep_end_int_clr: MODEM_SWITCH_SLEEP_END_INT_CLR

        /// need_des
        @WriteOnly(bits: 25..<26)
        public var active_switch_sleep_end_int_clr: ACTIVE_SWITCH_SLEEP_END_INT_CLR

        /// need_des
        @WriteOnly(bits: 26..<27)
        public var modem_switch_active_start_int_clr: MODEM_SWITCH_ACTIVE_START_INT_CLR

        /// need_des
        @WriteOnly(bits: 27..<28)
        public var sleep_switch_active_start_int_clr: SLEEP_SWITCH_ACTIVE_START_INT_CLR

        /// need_des
        @WriteOnly(bits: 28..<29)
        public var sleep_switch_modem_start_int_clr: SLEEP_SWITCH_MODEM_START_INT_CLR

        /// need_des
        @WriteOnly(bits: 29..<30)
        public var modem_switch_sleep_start_int_clr: MODEM_SWITCH_SLEEP_START_INT_CLR

        /// need_des
        @WriteOnly(bits: 30..<31)
        public var active_switch_sleep_start_int_clr: ACTIVE_SWITCH_SLEEP_START_INT_CLR

        /// need_des
        @WriteOnly(bits: 31..<32)
        public var hp_sw_trigger_int_clr: HP_SW_TRIGGER_INT_CLR
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct LP_CPU_PWR0 {
        /// need_des
        @ReadOnly(bits: 0..<1)
        public var lp_cpu_waiti_rdy: LP_CPU_WAITI_RDY

        /// need_des
        @ReadOnly(bits: 1..<2)
        public var lp_cpu_stall_rdy: LP_CPU_STALL_RDY

        /// need_des
        @ReadWrite(bits: 18..<19)
        public var lp_cpu_force_stall: LP_CPU_FORCE_STALL

        /// need_des
        @ReadWrite(bits: 19..<20)
        public var lp_cpu_slp_waiti_flag_en: LP_CPU_SLP_WAITI_FLAG_EN

        /// need_des
        @ReadWrite(bits: 20..<21)
        public var lp_cpu_slp_stall_flag_en: LP_CPU_SLP_STALL_FLAG_EN

        /// need_des
        @ReadWrite(bits: 21..<29)
        public var lp_cpu_slp_stall_wait: LP_CPU_SLP_STALL_WAIT

        /// need_des
        @ReadWrite(bits: 29..<30)
        public var lp_cpu_slp_stall_en: LP_CPU_SLP_STALL_EN

        /// need_des
        @ReadWrite(bits: 30..<31)
        public var lp_cpu_slp_reset_en: LP_CPU_SLP_RESET_EN

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var lp_cpu_slp_bypass_intr_en: LP_CPU_SLP_BYPASS_INTR_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct LP_CPU_PWR1 {
        /// need_des
        @ReadWrite(bits: 0..<16)
        public var lp_cpu_wakeup_en: LP_CPU_WAKEUP_EN

        /// need_des
        @WriteOnly(bits: 31..<32)
        public var lp_cpu_sleep_req: LP_CPU_SLEEP_REQ
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_LP_CPU_COMM {
        /// need_des
        @WriteOnly(bits: 30..<31)
        public var lp_trigger_hp: LP_TRIGGER_HP

        /// need_des
        @WriteOnly(bits: 31..<32)
        public var hp_trigger_lp: HP_TRIGGER_LP
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct HP_REGULATOR_CFG {
        /// need_des
        @ReadWrite(bits: 31..<32)
        public var dig_regulator_en_cal: DIG_REGULATOR_EN_CAL
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct MAIN_STATE {
        /// need_des
        @ReadOnly(bits: 11..<18)
        public var main_last_st_state: MAIN_LAST_ST_STATE

        /// need_des
        @ReadOnly(bits: 18..<25)
        public var main_tar_st_state: MAIN_TAR_ST_STATE

        /// need_des
        @ReadOnly(bits: 25..<32)
        public var main_cur_st_state: MAIN_CUR_ST_STATE
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct PWR_STATE {
        /// need_des
        @ReadOnly(bits: 13..<18)
        public var backup_st_state: BACKUP_ST_STATE

        /// need_des
        @ReadOnly(bits: 18..<23)
        public var lp_pwr_st_state: LP_PWR_ST_STATE

        /// need_des
        @ReadOnly(bits: 23..<32)
        public var hp_pwr_st_state: HP_PWR_ST_STATE
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct CLK_STATE0 {
        /// need_des
        @ReadOnly(bits: 0..<1)
        public var stable_xpd_bbpll_state: STABLE_XPD_BBPLL_STATE

        /// need_des
        @ReadOnly(bits: 1..<2)
        public var stable_xpd_xtal_state: STABLE_XPD_XTAL_STATE

        /// need_des
        @ReadOnly(bits: 15..<16)
        public var sys_clk_slp_sel_state: SYS_CLK_SLP_SEL_STATE

        /// need_des
        @ReadOnly(bits: 16..<18)
        public var sys_clk_sel_state: SYS_CLK_SEL_STATE

        /// need_des
        @ReadOnly(bits: 18..<19)
        public var sys_clk_no_div_state: SYS_CLK_NO_DIV_STATE

        /// need_des
        @ReadOnly(bits: 19..<20)
        public var icg_sys_clk_en_state: ICG_SYS_CLK_EN_STATE

        /// need_des
        @ReadOnly(bits: 20..<21)
        public var icg_modem_switch_state: ICG_MODEM_SWITCH_STATE

        /// need_des
        @ReadOnly(bits: 21..<23)
        public var icg_modem_code_state: ICG_MODEM_CODE_STATE

        /// need_des
        @ReadOnly(bits: 23..<24)
        public var icg_slp_sel_state: ICG_SLP_SEL_STATE

        /// need_des
        @ReadOnly(bits: 24..<25)
        public var icg_global_xtal_state: ICG_GLOBAL_XTAL_STATE

        /// need_des
        @ReadOnly(bits: 25..<26)
        public var icg_global_pll_state: ICG_GLOBAL_PLL_STATE

        /// need_des
        @ReadOnly(bits: 26..<27)
        public var ana_i2c_iso_en_state: ANA_I2C_ISO_EN_STATE

        /// need_des
        @ReadOnly(bits: 27..<28)
        public var ana_i2c_retention_state: ANA_I2C_RETENTION_STATE

        /// need_des
        @ReadOnly(bits: 28..<29)
        public var ana_xpd_bb_i2c_state: ANA_XPD_BB_I2C_STATE

        /// need_des
        @ReadOnly(bits: 29..<30)
        public var ana_xpd_bbpll_i2c_state: ANA_XPD_BBPLL_I2C_STATE

        /// need_des
        @ReadOnly(bits: 30..<31)
        public var ana_xpd_bbpll_state: ANA_XPD_BBPLL_STATE

        /// need_des
        @ReadOnly(bits: 31..<32)
        public var ana_xpd_xtal_state: ANA_XPD_XTAL_STATE
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct CLK_STATE1 {
        /// need_des
        @ReadOnly(bits: 0..<32)
        public var icg_func_en_state: ICG_FUNC_EN_STATE
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct CLK_STATE2 {
        /// need_des
        @ReadOnly(bits: 0..<32)
        public var icg_apb_en_state: ICG_APB_EN_STATE
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct VDD_SPI_STATUS {
        /// need_des
        @ReadOnly(bits: 31..<32)
        public var stable_vdd_spi_pwr_drv: STABLE_VDD_SPI_PWR_DRV
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct DATE {
        /// need_des
        @ReadWrite(bits: 0..<31)
        public var pmu_date: PMU_DATE

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var clk_en: CLK_EN
    }
}
