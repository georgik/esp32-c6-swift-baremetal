// Generated by svd2swift.

import MMIO

/// Pulse Count Controller
@RegisterBlock
public struct PCNT {
    /// Configuration register 0 for unit %s
    @RegisterBlock(offset: 0x0, stride: 0xc, count: 4)
    public var u_conf0: RegisterArray<U_CONF0>

    /// Configuration register 1 for unit %s
    @RegisterBlock(offset: 0x4, stride: 0xc, count: 4)
    public var u_conf1: RegisterArray<U_CONF1>

    /// Configuration register 2 for unit %s
    @RegisterBlock(offset: 0x8, stride: 0xc, count: 4)
    public var u_conf2: RegisterArray<U_CONF2>

    /// Counter value for unit %s
    @RegisterBlock(offset: 0x30, stride: 0x4, count: 4)
    public var u_cnt: RegisterArray<U_CNT>

    /// Interrupt raw status register
    @RegisterBlock(offset: 0x40)
    public var int_raw: Register<INT_RAW>

    /// Interrupt status register
    @RegisterBlock(offset: 0x44)
    public var int_st: Register<INT_ST>

    /// Interrupt enable register
    @RegisterBlock(offset: 0x48)
    public var int_ena: Register<INT_ENA>

    /// Interrupt clear register
    @RegisterBlock(offset: 0x4c)
    public var int_clr: Register<INT_CLR>

    /// PNCT UNIT%s status register
    @RegisterBlock(offset: 0x50, stride: 0x4, count: 4)
    public var u_status: RegisterArray<U_STATUS>

    /// Control register for all counters
    @RegisterBlock(offset: 0x60)
    public var ctrl: Register<CTRL>

    /// PCNT version control register
    @RegisterBlock(offset: 0xfc)
    public var date: Register<DATE>
}

extension PCNT {
    /// Configuration register 0 for unit %s
    @Register(bitWidth: 32)
    public struct U_CONF0 {
        /// Any pulses with width less than this will be ignored when the filter is enabled.
        @ReadWrite(bits: 0..<10)
        public var filter_thres_u: FILTER_THRES_U

        /// This is the enable bit for unit %s's input filter.
        @ReadWrite(bits: 10..<11)
        public var filter_en_u: FILTER_EN_U

        /// This is the enable bit for unit %s's zero comparator.
        @ReadWrite(bits: 11..<12)
        public var thr_zero_en_u: THR_ZERO_EN_U

        /// This is the enable bit for unit %s's thr_h_lim comparator.
        @ReadWrite(bits: 12..<13)
        public var thr_h_lim_en_u: THR_H_LIM_EN_U

        /// This is the enable bit for unit %s's thr_l_lim comparator.
        @ReadWrite(bits: 13..<14)
        public var thr_l_lim_en_u: THR_L_LIM_EN_U

        /// This is the enable bit for unit %s's thres0 comparator.
        @ReadWrite(bits: 14..<15)
        public var thr_thres0_en_u: THR_THRES0_EN_U

        /// This is the enable bit for unit %s's thres1 comparator.
        @ReadWrite(bits: 15..<16)
        public var thr_thres1_en_u: THR_THRES1_EN_U

        /// 1: Increase the counter.2: Decrease the counter.0, 3: No effect on counter
        @ReadWrite(bits: 16..<18)
        public var ch0_neg_mode_u: CH0_NEG_MODE_U

        /// 1: Increase the counter.2: Decrease the counter.0, 3: No effect on counter
        @ReadWrite(bits: 18..<20)
        public var ch0_pos_mode_u: CH0_POS_MODE_U

        /// increase).2, 3: Inhibit counter modification
        @ReadWrite(bits: 20..<22)
        public var ch0_hctrl_mode_u: CH0_HCTRL_MODE_U

        /// increase).2, 3: Inhibit counter modification
        @ReadWrite(bits: 22..<24)
        public var ch0_lctrl_mode_u: CH0_LCTRL_MODE_U

        /// 1: Increment the counter.2: Decrement the counter.0, 3: No effect on counter
        @ReadWrite(bits: 24..<26)
        public var ch1_neg_mode_u: CH1_NEG_MODE_U

        /// 1: Increment the counter.2: Decrement the counter.0, 3: No effect on counter
        @ReadWrite(bits: 26..<28)
        public var ch1_pos_mode_u: CH1_POS_MODE_U

        /// increase).2, 3: Inhibit counter modification
        @ReadWrite(bits: 28..<30)
        public var ch1_hctrl_mode_u: CH1_HCTRL_MODE_U

        /// increase).2, 3: Inhibit counter modification
        @ReadWrite(bits: 30..<32)
        public var ch1_lctrl_mode_u: CH1_LCTRL_MODE_U
    }

    /// Configuration register 1 for unit %s
    @Register(bitWidth: 32)
    public struct U_CONF1 {
        /// This register is used to configure the thres0 value for unit %s.
        @ReadWrite(bits: 0..<16)
        public var cnt_thres0_u: CNT_THRES0_U

        /// This register is used to configure the thres1 value for unit %s.
        @ReadWrite(bits: 16..<32)
        public var cnt_thres1_u: CNT_THRES1_U
    }

    /// Configuration register 2 for unit %s
    @Register(bitWidth: 32)
    public struct U_CONF2 {
        /// This register is used to configure the thr_h_lim value for unit %s.
        @ReadWrite(bits: 0..<16)
        public var cnt_h_lim_u: CNT_H_LIM_U

        /// This register is used to configure the thr_l_lim value for unit %s.
        @ReadWrite(bits: 16..<32)
        public var cnt_l_lim_u: CNT_L_LIM_U
    }

    /// Counter value for unit %s
    @Register(bitWidth: 32)
    public struct U_CNT {
        /// This register stores the current pulse count value for unit %s.
        @ReadOnly(bits: 0..<16)
        public var pulse_cnt_u: PULSE_CNT_U
    }

    /// Interrupt raw status register
    @Register(bitWidth: 32)
    public struct INT_RAW {
        /// The raw interrupt status bit for the PCNT_CNT_THR_EVENT_U0_INT interrupt.
        @ReadOnly(bits: 0..<1)
        public var cnt_thr_event_u0_int_raw: CNT_THR_EVENT_U0_INT_RAW

        /// The raw interrupt status bit for the PCNT_CNT_THR_EVENT_U1_INT interrupt.
        @ReadOnly(bits: 1..<2)
        public var cnt_thr_event_u1_int_raw: CNT_THR_EVENT_U1_INT_RAW

        /// The raw interrupt status bit for the PCNT_CNT_THR_EVENT_U2_INT interrupt.
        @ReadOnly(bits: 2..<3)
        public var cnt_thr_event_u2_int_raw: CNT_THR_EVENT_U2_INT_RAW

        /// The raw interrupt status bit for the PCNT_CNT_THR_EVENT_U3_INT interrupt.
        @ReadOnly(bits: 3..<4)
        public var cnt_thr_event_u3_int_raw: CNT_THR_EVENT_U3_INT_RAW
    }

    /// Interrupt status register
    @Register(bitWidth: 32)
    public struct INT_ST {
        /// The masked interrupt status bit for the PCNT_CNT_THR_EVENT_U0_INT interrupt.
        @ReadOnly(bits: 0..<1)
        public var cnt_thr_event_u0_int_st: CNT_THR_EVENT_U0_INT_ST

        /// The masked interrupt status bit for the PCNT_CNT_THR_EVENT_U1_INT interrupt.
        @ReadOnly(bits: 1..<2)
        public var cnt_thr_event_u1_int_st: CNT_THR_EVENT_U1_INT_ST

        /// The masked interrupt status bit for the PCNT_CNT_THR_EVENT_U2_INT interrupt.
        @ReadOnly(bits: 2..<3)
        public var cnt_thr_event_u2_int_st: CNT_THR_EVENT_U2_INT_ST

        /// The masked interrupt status bit for the PCNT_CNT_THR_EVENT_U3_INT interrupt.
        @ReadOnly(bits: 3..<4)
        public var cnt_thr_event_u3_int_st: CNT_THR_EVENT_U3_INT_ST
    }

    /// Interrupt enable register
    @Register(bitWidth: 32)
    public struct INT_ENA {
        /// The interrupt enable bit for the PCNT_CNT_THR_EVENT_U0_INT interrupt.
        @ReadWrite(bits: 0..<1)
        public var cnt_thr_event_u0_int_ena: CNT_THR_EVENT_U0_INT_ENA

        /// The interrupt enable bit for the PCNT_CNT_THR_EVENT_U1_INT interrupt.
        @ReadWrite(bits: 1..<2)
        public var cnt_thr_event_u1_int_ena: CNT_THR_EVENT_U1_INT_ENA

        /// The interrupt enable bit for the PCNT_CNT_THR_EVENT_U2_INT interrupt.
        @ReadWrite(bits: 2..<3)
        public var cnt_thr_event_u2_int_ena: CNT_THR_EVENT_U2_INT_ENA

        /// The interrupt enable bit for the PCNT_CNT_THR_EVENT_U3_INT interrupt.
        @ReadWrite(bits: 3..<4)
        public var cnt_thr_event_u3_int_ena: CNT_THR_EVENT_U3_INT_ENA
    }

    /// Interrupt clear register
    @Register(bitWidth: 32)
    public struct INT_CLR {
        /// Set this bit to clear the PCNT_CNT_THR_EVENT_U0_INT interrupt.
        @WriteOnly(bits: 0..<1)
        public var cnt_thr_event_u0_int_clr: CNT_THR_EVENT_U0_INT_CLR

        /// Set this bit to clear the PCNT_CNT_THR_EVENT_U1_INT interrupt.
        @WriteOnly(bits: 1..<2)
        public var cnt_thr_event_u1_int_clr: CNT_THR_EVENT_U1_INT_CLR

        /// Set this bit to clear the PCNT_CNT_THR_EVENT_U2_INT interrupt.
        @WriteOnly(bits: 2..<3)
        public var cnt_thr_event_u2_int_clr: CNT_THR_EVENT_U2_INT_CLR

        /// Set this bit to clear the PCNT_CNT_THR_EVENT_U3_INT interrupt.
        @WriteOnly(bits: 3..<4)
        public var cnt_thr_event_u3_int_clr: CNT_THR_EVENT_U3_INT_CLR
    }

    /// PNCT UNIT%s status register
    @Register(bitWidth: 32)
    public struct U_STATUS {
        /// The pulse counter status of PCNT_U%s corresponding to 0. 0: pulse counter decreases from positive to 0. 1: pulse counter increases from negative to 0. 2: pulse counter is negative. 3: pulse counter is positive.
        @ReadOnly(bits: 0..<2)
        public var cnt_thr_zero_mode_u: CNT_THR_ZERO_MODE_U

        /// The latched value of thres1 event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to thres1 and thres1 event is valid. 0: others
        @ReadOnly(bits: 2..<3)
        public var cnt_thr_thres1_lat_u: CNT_THR_THRES1_LAT_U

        /// The latched value of thres0 event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to thres0 and thres0 event is valid. 0: others
        @ReadOnly(bits: 3..<4)
        public var cnt_thr_thres0_lat_u: CNT_THR_THRES0_LAT_U

        /// The latched value of low limit event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to thr_l_lim and low limit event is valid. 0: others
        @ReadOnly(bits: 4..<5)
        public var cnt_thr_l_lim_lat_u: CNT_THR_L_LIM_LAT_U

        /// The latched value of high limit event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to thr_h_lim and high limit event is valid. 0: others
        @ReadOnly(bits: 5..<6)
        public var cnt_thr_h_lim_lat_u: CNT_THR_H_LIM_LAT_U

        /// The latched value of zero threshold event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to 0 and zero threshold event is valid. 0: others
        @ReadOnly(bits: 6..<7)
        public var cnt_thr_zero_lat_u: CNT_THR_ZERO_LAT_U
    }

    /// Control register for all counters
    @Register(bitWidth: 32)
    public struct CTRL {
        /// Set this bit to clear unit 0's counter.
        @ReadWrite(bits: 0..<1)
        public var pulse_cnt_rst_u0: PULSE_CNT_RST_U0

        /// Set this bit to freeze unit 0's counter.
        @ReadWrite(bits: 1..<2)
        public var cnt_pause_u0: CNT_PAUSE_U0

        /// Set this bit to clear unit 1's counter.
        @ReadWrite(bits: 2..<3)
        public var pulse_cnt_rst_u1: PULSE_CNT_RST_U1

        /// Set this bit to freeze unit 1's counter.
        @ReadWrite(bits: 3..<4)
        public var cnt_pause_u1: CNT_PAUSE_U1

        /// Set this bit to clear unit 2's counter.
        @ReadWrite(bits: 4..<5)
        public var pulse_cnt_rst_u2: PULSE_CNT_RST_U2

        /// Set this bit to freeze unit 2's counter.
        @ReadWrite(bits: 5..<6)
        public var cnt_pause_u2: CNT_PAUSE_U2

        /// Set this bit to clear unit 3's counter.
        @ReadWrite(bits: 6..<7)
        public var pulse_cnt_rst_u3: PULSE_CNT_RST_U3

        /// Set this bit to freeze unit 3's counter.
        @ReadWrite(bits: 7..<8)
        public var cnt_pause_u3: CNT_PAUSE_U3

        /// The registers clock gate enable signal of PCNT module. 1: the registers can be read and written by application. 0: the registers can not be read or written by application
        @ReadWrite(bits: 16..<17)
        public var clk_en: CLK_EN
    }

    /// PCNT version control register
    @Register(bitWidth: 32)
    public struct DATE {
        /// This is the PCNT version control register.
        @ReadWrite(bits: 0..<32)
        public var date_field: DATE_FIELD
    }
}
