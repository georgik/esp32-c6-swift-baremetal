// Generated by svd2swift.

import MMIO

/// General Purpose Input/Output
@RegisterBlock
public struct GPIO {
    /// GPIO bit select register
    @RegisterBlock(offset: 0x0)
    public var bt_select: Register<BT_SELECT>

    /// GPIO output register for GPIO0-31
    @RegisterBlock(offset: 0x4)
    public var out: Register<OUT>

    /// GPIO output set register for GPIO0-31
    @RegisterBlock(offset: 0x8)
    public var out_w1ts: Register<OUT_W1TS>

    /// GPIO output clear register for GPIO0-31
    @RegisterBlock(offset: 0xc)
    public var out_w1tc: Register<OUT_W1TC>

    /// GPIO output register for GPIO32-34
    @RegisterBlock(offset: 0x10)
    public var out1: Register<OUT1>

    /// GPIO output set register for GPIO32-34
    @RegisterBlock(offset: 0x14)
    public var out1_w1ts: Register<OUT1_W1TS>

    /// GPIO output clear register for GPIO32-34
    @RegisterBlock(offset: 0x18)
    public var out1_w1tc: Register<OUT1_W1TC>

    /// GPIO sdio select register
    @RegisterBlock(offset: 0x1c)
    public var sdio_select: Register<SDIO_SELECT>

    /// GPIO output enable register for GPIO0-31
    @RegisterBlock(offset: 0x20)
    public var enable: Register<ENABLE>

    /// GPIO output enable set register for GPIO0-31
    @RegisterBlock(offset: 0x24)
    public var enable_w1ts: Register<ENABLE_W1TS>

    /// GPIO output enable clear register for GPIO0-31
    @RegisterBlock(offset: 0x28)
    public var enable_w1tc: Register<ENABLE_W1TC>

    /// GPIO output enable register for GPIO32-34
    @RegisterBlock(offset: 0x2c)
    public var enable1: Register<ENABLE1>

    /// GPIO output enable set register for GPIO32-34
    @RegisterBlock(offset: 0x30)
    public var enable1_w1ts: Register<ENABLE1_W1TS>

    /// GPIO output enable clear register for GPIO32-34
    @RegisterBlock(offset: 0x34)
    public var enable1_w1tc: Register<ENABLE1_W1TC>

    /// pad strapping register
    @RegisterBlock(offset: 0x38)
    public var strap: Register<STRAP>

    /// GPIO input register for GPIO0-31
    @RegisterBlock(offset: 0x3c)
    public var `in`: Register<IN>

    /// GPIO input register for GPIO32-34
    @RegisterBlock(offset: 0x40)
    public var in1: Register<IN1>

    /// GPIO interrupt status register for GPIO0-31
    @RegisterBlock(offset: 0x44)
    public var status: Register<STATUS>

    /// GPIO interrupt status set register for GPIO0-31
    @RegisterBlock(offset: 0x48)
    public var status_w1ts: Register<STATUS_W1TS>

    /// GPIO interrupt status clear register for GPIO0-31
    @RegisterBlock(offset: 0x4c)
    public var status_w1tc: Register<STATUS_W1TC>

    /// GPIO interrupt status register for GPIO32-34
    @RegisterBlock(offset: 0x50)
    public var status1: Register<STATUS1>

    /// GPIO interrupt status set register for GPIO32-34
    @RegisterBlock(offset: 0x54)
    public var status1_w1ts: Register<STATUS1_W1TS>

    /// GPIO interrupt status clear register for GPIO32-34
    @RegisterBlock(offset: 0x58)
    public var status1_w1tc: Register<STATUS1_W1TC>

    /// GPIO PRO_CPU interrupt status register for GPIO0-31
    @RegisterBlock(offset: 0x5c)
    public var pcpu_int: Register<PCPU_INT>

    /// GPIO PRO_CPU(not shielded) interrupt status register for GPIO0-31
    @RegisterBlock(offset: 0x60)
    public var pcpu_nmi_int: Register<PCPU_NMI_INT>

    /// GPIO CPUSDIO interrupt status register for GPIO0-31
    @RegisterBlock(offset: 0x64)
    public var cpusdio_int: Register<CPUSDIO_INT>

    /// GPIO PRO_CPU interrupt status register for GPIO32-34
    @RegisterBlock(offset: 0x68)
    public var pcpu_int1: Register<PCPU_INT1>

    /// GPIO PRO_CPU(not shielded) interrupt status register for GPIO32-34
    @RegisterBlock(offset: 0x6c)
    public var pcpu_nmi_int1: Register<PCPU_NMI_INT1>

    /// GPIO CPUSDIO interrupt status register for GPIO32-34
    @RegisterBlock(offset: 0x70)
    public var cpusdio_int1: Register<CPUSDIO_INT1>

    /// GPIO pin configuration register
    @RegisterBlock(offset: 0x74, stride: 0x4, count: 35)
    public var pin: RegisterArray<PIN>

    /// GPIO interrupt source register for GPIO0-31
    @RegisterBlock(offset: 0x14c)
    public var status_next: Register<STATUS_NEXT>

    /// GPIO interrupt source register for GPIO32-34
    @RegisterBlock(offset: 0x150)
    public var status_next1: Register<STATUS_NEXT1>

    /// GPIO input function configuration register
    @RegisterBlock(offset: 0x154, stride: 0x4, count: 128)
    public var func_in_sel_cfg: RegisterArray<FUNC_IN_SEL_CFG>

    /// GPIO output function select register
    @RegisterBlock(offset: 0x554, stride: 0x4, count: 31)
    public var func_out_sel_cfg: RegisterArray<FUNC_OUT_SEL_CFG>

    /// GPIO clock gate register
    @RegisterBlock(offset: 0x62c)
    public var clock_gate: Register<CLOCK_GATE>

    /// GPIO version register
    @RegisterBlock(offset: 0x6fc)
    public var date: Register<DATE>
}

extension GPIO {
    /// GPIO bit select register
    @Register(bitWidth: 32)
    public struct BT_SELECT {
        /// GPIO bit select register
        @ReadWrite(bits: 0..<32)
        public var bt_sel: BT_SEL
    }

    /// GPIO output register for GPIO0-31
    @Register(bitWidth: 32)
    public struct OUT {
        /// GPIO output register for GPIO0-31
        @ReadWrite(bits: 0..<32)
        public var data_orig: DATA_ORIG
    }

    /// GPIO output set register for GPIO0-31
    @Register(bitWidth: 32)
    public struct OUT_W1TS {
        /// GPIO output set register for GPIO0-31
        @WriteOnly(bits: 0..<32)
        public var out_w1ts_field: OUT_W1TS_FIELD
    }

    /// GPIO output clear register for GPIO0-31
    @Register(bitWidth: 32)
    public struct OUT_W1TC {
        /// GPIO output clear register for GPIO0-31
        @WriteOnly(bits: 0..<32)
        public var out_w1tc_field: OUT_W1TC_FIELD
    }

    /// GPIO output register for GPIO32-34
    @Register(bitWidth: 32)
    public struct OUT1 {
        /// GPIO output register for GPIO32-34
        @ReadWrite(bits: 0..<3)
        public var data_orig: DATA_ORIG
    }

    /// GPIO output set register for GPIO32-34
    @Register(bitWidth: 32)
    public struct OUT1_W1TS {
        /// GPIO output set register for GPIO32-34
        @WriteOnly(bits: 0..<3)
        public var out1_w1ts_field: OUT1_W1TS_FIELD
    }

    /// GPIO output clear register for GPIO32-34
    @Register(bitWidth: 32)
    public struct OUT1_W1TC {
        /// GPIO output clear register for GPIO32-34
        @WriteOnly(bits: 0..<3)
        public var out1_w1tc_field: OUT1_W1TC_FIELD
    }

    /// GPIO sdio select register
    @Register(bitWidth: 32)
    public struct SDIO_SELECT {
        /// GPIO sdio select register
        @ReadWrite(bits: 0..<8)
        public var sdio_sel: SDIO_SEL
    }

    /// GPIO output enable register for GPIO0-31
    @Register(bitWidth: 32)
    public struct ENABLE {
        /// GPIO output enable register for GPIO0-31
        @ReadWrite(bits: 0..<32)
        public var data: DATA
    }

    /// GPIO output enable set register for GPIO0-31
    @Register(bitWidth: 32)
    public struct ENABLE_W1TS {
        /// GPIO output enable set register for GPIO0-31
        @WriteOnly(bits: 0..<32)
        public var enable_w1ts_field: ENABLE_W1TS_FIELD
    }

    /// GPIO output enable clear register for GPIO0-31
    @Register(bitWidth: 32)
    public struct ENABLE_W1TC {
        /// GPIO output enable clear register for GPIO0-31
        @WriteOnly(bits: 0..<32)
        public var enable_w1tc_field: ENABLE_W1TC_FIELD
    }

    /// GPIO output enable register for GPIO32-34
    @Register(bitWidth: 32)
    public struct ENABLE1 {
        /// GPIO output enable register for GPIO32-34
        @ReadWrite(bits: 0..<3)
        public var data: DATA
    }

    /// GPIO output enable set register for GPIO32-34
    @Register(bitWidth: 32)
    public struct ENABLE1_W1TS {
        /// GPIO output enable set register for GPIO32-34
        @WriteOnly(bits: 0..<3)
        public var enable1_w1ts_field: ENABLE1_W1TS_FIELD
    }

    /// GPIO output enable clear register for GPIO32-34
    @Register(bitWidth: 32)
    public struct ENABLE1_W1TC {
        /// GPIO output enable clear register for GPIO32-34
        @WriteOnly(bits: 0..<3)
        public var enable1_w1tc_field: ENABLE1_W1TC_FIELD
    }

    /// pad strapping register
    @Register(bitWidth: 32)
    public struct STRAP {
        /// pad strapping register
        @ReadOnly(bits: 0..<16)
        public var strapping: STRAPPING
    }

    /// GPIO input register for GPIO0-31
    @Register(bitWidth: 32)
    public struct IN {
        /// GPIO input register for GPIO0-31
        @ReadOnly(bits: 0..<32)
        public var data_next: DATA_NEXT
    }

    /// GPIO input register for GPIO32-34
    @Register(bitWidth: 32)
    public struct IN1 {
        /// GPIO input register for GPIO32-34
        @ReadOnly(bits: 0..<3)
        public var data_next: DATA_NEXT
    }

    /// GPIO interrupt status register for GPIO0-31
    @Register(bitWidth: 32)
    public struct STATUS {
        /// GPIO interrupt status register for GPIO0-31
        @ReadWrite(bits: 0..<32)
        public var interrupt: INTERRUPT
    }

    /// GPIO interrupt status set register for GPIO0-31
    @Register(bitWidth: 32)
    public struct STATUS_W1TS {
        /// GPIO interrupt status set register for GPIO0-31
        @WriteOnly(bits: 0..<32)
        public var status_w1ts_field: STATUS_W1TS_FIELD
    }

    /// GPIO interrupt status clear register for GPIO0-31
    @Register(bitWidth: 32)
    public struct STATUS_W1TC {
        /// GPIO interrupt status clear register for GPIO0-31
        @WriteOnly(bits: 0..<32)
        public var status_w1tc_field: STATUS_W1TC_FIELD
    }

    /// GPIO interrupt status register for GPIO32-34
    @Register(bitWidth: 32)
    public struct STATUS1 {
        /// GPIO interrupt status register for GPIO32-34
        @ReadWrite(bits: 0..<3)
        public var interrupt: INTERRUPT
    }

    /// GPIO interrupt status set register for GPIO32-34
    @Register(bitWidth: 32)
    public struct STATUS1_W1TS {
        /// GPIO interrupt status set register for GPIO32-34
        @WriteOnly(bits: 0..<3)
        public var status1_w1ts_field: STATUS1_W1TS_FIELD
    }

    /// GPIO interrupt status clear register for GPIO32-34
    @Register(bitWidth: 32)
    public struct STATUS1_W1TC {
        /// GPIO interrupt status clear register for GPIO32-34
        @WriteOnly(bits: 0..<3)
        public var status1_w1tc_field: STATUS1_W1TC_FIELD
    }

    /// GPIO PRO_CPU interrupt status register for GPIO0-31
    @Register(bitWidth: 32)
    public struct PCPU_INT {
        /// GPIO PRO_CPU interrupt status register for GPIO0-31
        @ReadOnly(bits: 0..<32)
        public var procpu_int: PROCPU_INT
    }

    /// GPIO PRO_CPU(not shielded) interrupt status register for GPIO0-31
    @Register(bitWidth: 32)
    public struct PCPU_NMI_INT {
        /// GPIO PRO_CPU(not shielded) interrupt status register for GPIO0-31
        @ReadOnly(bits: 0..<32)
        public var procpu_nmi_int: PROCPU_NMI_INT
    }

    /// GPIO CPUSDIO interrupt status register for GPIO0-31
    @Register(bitWidth: 32)
    public struct CPUSDIO_INT {
        /// GPIO CPUSDIO interrupt status register for GPIO0-31
        @ReadOnly(bits: 0..<32)
        public var sdio_int: SDIO_INT
    }

    /// GPIO PRO_CPU interrupt status register for GPIO32-34
    @Register(bitWidth: 32)
    public struct PCPU_INT1 {
        /// GPIO PRO_CPU interrupt status register for GPIO32-34
        @ReadOnly(bits: 0..<3)
        public var procpu_int1: PROCPU_INT1
    }

    /// GPIO PRO_CPU(not shielded) interrupt status register for GPIO32-34
    @Register(bitWidth: 32)
    public struct PCPU_NMI_INT1 {
        /// GPIO PRO_CPU(not shielded) interrupt status register for GPIO32-34
        @ReadOnly(bits: 0..<3)
        public var procpu_nmi_int1: PROCPU_NMI_INT1
    }

    /// GPIO CPUSDIO interrupt status register for GPIO32-34
    @Register(bitWidth: 32)
    public struct CPUSDIO_INT1 {
        /// GPIO CPUSDIO interrupt status register for GPIO32-34
        @ReadOnly(bits: 0..<3)
        public var sdio_int1: SDIO_INT1
    }

    /// GPIO pin configuration register
    @Register(bitWidth: 32)
    public struct PIN {
        /// set GPIO input_sync2 signal mode. 0:disable. 1:trigger at negedge. 2or3:trigger at posedge.
        @ReadWrite(bits: 0..<2)
        public var sync2_bypass: SYNC2_BYPASS

        /// set this bit to select pad driver. 1:open-drain. 0:normal.
        @ReadWrite(bits: 2..<3)
        public var pad_driver: PAD_DRIVER

        /// set GPIO input_sync1 signal mode. 0:disable. 1:trigger at negedge. 2or3:trigger at posedge.
        @ReadWrite(bits: 3..<5)
        public var sync1_bypass: SYNC1_BYPASS

        /// set this value to choose interrupt mode. 0:disable GPIO interrupt. 1:trigger at posedge. 2:trigger at negedge. 3:trigger at any edge. 4:valid at low level. 5:valid at high level
        @ReadWrite(bits: 7..<10)
        public var int_type: INT_TYPE

        /// set this bit to enable GPIO wakeup.(can only wakeup CPU from Light-sleep Mode)
        @ReadWrite(bits: 10..<11)
        public var wakeup_enable: WAKEUP_ENABLE

        /// reserved
        @ReadWrite(bits: 11..<13)
        public var config: CONFIG

        /// set bit 13 to enable CPU interrupt. set bit 14 to enable CPU(not shielded) interrupt.
        @ReadWrite(bits: 13..<18)
        public var int_ena: INT_ENA
    }

    /// GPIO interrupt source register for GPIO0-31
    @Register(bitWidth: 32)
    public struct STATUS_NEXT {
        /// GPIO interrupt source register for GPIO0-31
        @ReadOnly(bits: 0..<32)
        public var status_interrupt_next: STATUS_INTERRUPT_NEXT
    }

    /// GPIO interrupt source register for GPIO32-34
    @Register(bitWidth: 32)
    public struct STATUS_NEXT1 {
        /// GPIO interrupt source register for GPIO32-34
        @ReadOnly(bits: 0..<3)
        public var status_interrupt_next1: STATUS_INTERRUPT_NEXT1
    }

    /// GPIO input function configuration register
    @Register(bitWidth: 32)
    public struct FUNC_IN_SEL_CFG {
        /// set this value: s=0-34: connect GPIO[s] to this port. s=0x38: set this port always high level. s=0x3C: set this port always low level.
        @ReadWrite(bits: 0..<6)
        public var in_sel: IN_SEL

        /// set this bit to invert input signal. 1:invert. 0:not invert.
        @ReadWrite(bits: 6..<7)
        public var in_inv_sel: IN_INV_SEL

        /// set this bit to bypass GPIO. 1:do not bypass GPIO. 0:bypass GPIO.
        @ReadWrite(bits: 7..<8)
        public var sel: SEL
    }

    /// GPIO output function select register
    @Register(bitWidth: 32)
    public struct FUNC_OUT_SEL_CFG {
        /// =256. Set the value to select output signal. s=0-127: output of GPIO[n] equals input of peripheral[s]. s=128: output of GPIO[n] equals GPIO_OUT_REG[n].
        @ReadWrite(bits: 0..<8)
        public var out_sel: OUT_SEL

        /// set this bit to invert output signal.1:invert.0:not invert.
        @ReadWrite(bits: 8..<9)
        public var inv_sel: INV_SEL

        /// set this bit to select output enable signal.1:use GPIO_ENABLE_REG[n] as output enable signal.0:use peripheral output enable signal.
        @ReadWrite(bits: 9..<10)
        public var oen_sel: OEN_SEL

        /// set this bit to invert output enable signal.1:invert.0:not invert.
        @ReadWrite(bits: 10..<11)
        public var oen_inv_sel: OEN_INV_SEL
    }

    /// GPIO clock gate register
    @Register(bitWidth: 32)
    public struct CLOCK_GATE {
        /// set this bit to enable GPIO clock gate
        @ReadWrite(bits: 0..<1)
        public var clk_en: CLK_EN
    }

    /// GPIO version register
    @Register(bitWidth: 32)
    public struct DATE {
        /// version register
        @ReadWrite(bits: 0..<28)
        public var date_field: DATE_FIELD
    }
}
