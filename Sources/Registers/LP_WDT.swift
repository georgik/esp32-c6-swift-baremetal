// Generated by svd2swift.

import MMIO

/// Low-power Watchdog Timer
@RegisterBlock
public struct LP_WDT {
    /// need_des
    @RegisterBlock(offset: 0x0)
    public var wdtconfig0: Register<WDTCONFIG0>

    /// need_des
    @RegisterBlock(offset: 0x4)
    public var config1: Register<CONFIG1>

    /// need_des
    @RegisterBlock(offset: 0x8)
    public var config2: Register<CONFIG2>

    /// need_des
    @RegisterBlock(offset: 0xc)
    public var config3: Register<CONFIG3>

    /// need_des
    @RegisterBlock(offset: 0x10)
    public var config4: Register<CONFIG4>

    /// need_des
    @RegisterBlock(offset: 0x14)
    public var wdtfeed: Register<WDTFEED>

    /// need_des
    @RegisterBlock(offset: 0x18)
    public var wdtwprotect: Register<WDTWPROTECT>

    /// need_des
    @RegisterBlock(offset: 0x1c)
    public var swd_conf: Register<SWD_CONF>

    /// need_des
    @RegisterBlock(offset: 0x20)
    public var swd_wprotect: Register<SWD_WPROTECT>

    /// need_des
    @RegisterBlock(offset: 0x24)
    public var int_raw: Register<INT_RAW>

    /// need_des
    @RegisterBlock(offset: 0x28)
    public var int_st: Register<INT_ST>

    /// need_des
    @RegisterBlock(offset: 0x2c)
    public var int_ena: Register<INT_ENA>

    /// need_des
    @RegisterBlock(offset: 0x30)
    public var int_clr: Register<INT_CLR>

    /// need_des
    @RegisterBlock(offset: 0x3fc)
    public var date: Register<DATE>
}

extension LP_WDT {
    /// need_des
    @Register(bitWidth: 32)
    public struct WDTCONFIG0 {
        /// need_des
        @ReadWrite(bits: 0..<8)
        public var wdt_chip_reset_width: WDT_CHIP_RESET_WIDTH

        /// need_des
        @ReadWrite(bits: 8..<9)
        public var wdt_chip_reset_en: WDT_CHIP_RESET_EN

        /// need_des
        @ReadWrite(bits: 9..<10)
        public var wdt_pause_in_slp: WDT_PAUSE_IN_SLP

        /// need_des
        @ReadWrite(bits: 10..<11)
        public var wdt_appcpu_reset_en: WDT_APPCPU_RESET_EN

        /// need_des
        @ReadWrite(bits: 11..<12)
        public var wdt_procpu_reset_en: WDT_PROCPU_RESET_EN

        /// need_des
        @ReadWrite(bits: 12..<13)
        public var wdt_flashboot_mod_en: WDT_FLASHBOOT_MOD_EN

        /// need_des
        @ReadWrite(bits: 13..<16)
        public var wdt_sys_reset_length: WDT_SYS_RESET_LENGTH

        /// need_des
        @ReadWrite(bits: 16..<19)
        public var wdt_cpu_reset_length: WDT_CPU_RESET_LENGTH

        /// need_des
        @ReadWrite(bits: 19..<22)
        public var wdt_stg3: WDT_STG3

        /// need_des
        @ReadWrite(bits: 22..<25)
        public var wdt_stg2: WDT_STG2

        /// need_des
        @ReadWrite(bits: 25..<28)
        public var wdt_stg1: WDT_STG1

        /// need_des
        @ReadWrite(bits: 28..<31)
        public var wdt_stg0: WDT_STG0

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var wdt_en: WDT_EN
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct CONFIG1 {
        /// need_des
        @ReadWrite(bits: 0..<32)
        public var wdt_stg0_hold: WDT_STG0_HOLD
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct CONFIG2 {
        /// need_des
        @ReadWrite(bits: 0..<32)
        public var wdt_stg1_hold: WDT_STG1_HOLD
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct CONFIG3 {
        /// need_des
        @ReadWrite(bits: 0..<32)
        public var wdt_stg2_hold: WDT_STG2_HOLD
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct CONFIG4 {
        /// need_des
        @ReadWrite(bits: 0..<32)
        public var wdt_stg3_hold: WDT_STG3_HOLD
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct WDTFEED {
        /// need_des
        @WriteOnly(bits: 31..<32)
        public var wdt_feed: WDT_FEED
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct WDTWPROTECT {
        /// need_des
        @ReadWrite(bits: 0..<32)
        public var wdt_wkey: WDT_WKEY
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct SWD_CONF {
        /// need_des
        @ReadOnly(bits: 0..<1)
        public var swd_reset_flag: SWD_RESET_FLAG

        /// need_des
        @ReadWrite(bits: 18..<19)
        public var swd_auto_feed_en: SWD_AUTO_FEED_EN

        /// need_des
        @WriteOnly(bits: 19..<20)
        public var swd_rst_flag_clr: SWD_RST_FLAG_CLR

        /// need_des
        @ReadWrite(bits: 20..<30)
        public var swd_signal_width: SWD_SIGNAL_WIDTH

        /// need_des
        @ReadWrite(bits: 30..<31)
        public var swd_disable: SWD_DISABLE

        /// need_des
        @WriteOnly(bits: 31..<32)
        public var swd_feed: SWD_FEED
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct SWD_WPROTECT {
        /// need_des
        @ReadWrite(bits: 0..<32)
        public var swd_wkey: SWD_WKEY
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct INT_RAW {
        /// need_des
        @ReadWrite(bits: 30..<31)
        public var super_wdt: SUPER_WDT

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var lp_wdt: LP_WDT
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct INT_ST {
        /// need_des
        @ReadOnly(bits: 30..<31)
        public var super_wdt: SUPER_WDT

        /// need_des
        @ReadOnly(bits: 31..<32)
        public var wdt: WDT
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct INT_ENA {
        /// need_des
        @ReadWrite(bits: 30..<31)
        public var super_wdt: SUPER_WDT

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var wdt: WDT
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct INT_CLR {
        /// need_des
        @WriteOnly(bits: 30..<31)
        public var super_wdt: SUPER_WDT

        /// need_des
        @WriteOnly(bits: 31..<32)
        public var wdt: WDT
    }

    /// need_des
    @Register(bitWidth: 32)
    public struct DATE {
        /// need_des
        @ReadWrite(bits: 0..<31)
        public var lp_wdt_date: LP_WDT_DATE

        /// need_des
        @ReadWrite(bits: 31..<32)
        public var clk_en: CLK_EN
    }
}
