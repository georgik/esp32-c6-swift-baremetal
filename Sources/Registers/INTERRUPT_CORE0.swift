// Generated by svd2swift.

import MMIO

/// Interrupt Controller (Core 0)
@RegisterBlock
public struct INTERRUPT_CORE0 {
    /// register description
    @RegisterBlock(offset: 0x0)
    public var wifi_mac_intr_map: Register<WIFI_MAC_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x4)
    public var wifi_mac_nmi_map: Register<WIFI_MAC_NMI_MAP>

    /// register description
    @RegisterBlock(offset: 0x8)
    public var wifi_pwr_intr_map: Register<WIFI_PWR_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xc)
    public var wifi_bb_intr_map: Register<WIFI_BB_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x10)
    public var bt_mac_intr_map: Register<BT_MAC_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x14)
    public var bt_bb_intr_map: Register<BT_BB_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x18)
    public var bt_bb_nmi_map: Register<BT_BB_NMI_MAP>

    /// register description
    @RegisterBlock(offset: 0x1c)
    public var lp_timer_intr_map: Register<LP_TIMER_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x20)
    public var coex_intr_map: Register<COEX_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x24)
    public var ble_timer_intr_map: Register<BLE_TIMER_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x28)
    public var ble_sec_intr_map: Register<BLE_SEC_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x2c)
    public var i2c_mst_intr_map: Register<I2C_MST_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x30)
    public var zb_mac_intr_map: Register<ZB_MAC_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x34)
    public var pmu_intr_map: Register<PMU_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x38)
    public var efuse_intr_map: Register<EFUSE_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x3c)
    public var lp_rtc_timer_intr_map: Register<LP_RTC_TIMER_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x40)
    public var lp_uart_intr_map: Register<LP_UART_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x44)
    public var lp_i2c_intr_map: Register<LP_I2C_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x48)
    public var lp_wdt_intr_map: Register<LP_WDT_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x4c)
    public var lp_peri_timeout_intr_map: Register<LP_PERI_TIMEOUT_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x50)
    public var lp_apm_m0_intr_map: Register<LP_APM_M0_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x54)
    public var lp_apm_m1_intr_map: Register<LP_APM_M1_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x58)
    public var cpu_intr_from_cpu_0_map: Register<CPU_INTR_FROM_CPU_0_MAP>

    /// register description
    @RegisterBlock(offset: 0x5c)
    public var cpu_intr_from_cpu_1_map: Register<CPU_INTR_FROM_CPU_1_MAP>

    /// register description
    @RegisterBlock(offset: 0x60)
    public var cpu_intr_from_cpu_2_map: Register<CPU_INTR_FROM_CPU_2_MAP>

    /// register description
    @RegisterBlock(offset: 0x64)
    public var cpu_intr_from_cpu_3_map: Register<CPU_INTR_FROM_CPU_3_MAP>

    /// register description
    @RegisterBlock(offset: 0x68)
    public var assist_debug_intr_map: Register<ASSIST_DEBUG_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x6c)
    public var trace_intr_map: Register<TRACE_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x70)
    public var cache_intr_map: Register<CACHE_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x74)
    public var cpu_peri_timeout_intr_map: Register<CPU_PERI_TIMEOUT_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x78)
    public var gpio_interrupt_pro_map: Register<GPIO_INTERRUPT_PRO_MAP>

    /// register description
    @RegisterBlock(offset: 0x7c)
    public var gpio_interrupt_pro_nmi_map: Register<GPIO_INTERRUPT_PRO_NMI_MAP>

    /// register description
    @RegisterBlock(offset: 0x80)
    public var pau_intr_map: Register<PAU_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x84)
    public var hp_peri_timeout_intr_map: Register<HP_PERI_TIMEOUT_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x88)
    public var modem_peri_timeout_intr_map: Register<MODEM_PERI_TIMEOUT_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x8c)
    public var hp_apm_m0_intr_map: Register<HP_APM_M0_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x90)
    public var hp_apm_m1_intr_map: Register<HP_APM_M1_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x94)
    public var hp_apm_m2_intr_map: Register<HP_APM_M2_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x98)
    public var hp_apm_m3_intr_map: Register<HP_APM_M3_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x9c)
    public var lp_apm0_intr_map: Register<LP_APM0_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xa0)
    public var mspi_intr_map: Register<MSPI_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xa4)
    public var i2s1_intr_map: Register<I2S1_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xa8)
    public var uhci0_intr_map: Register<UHCI0_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xac)
    public var uart0_intr_map: Register<UART0_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xb0)
    public var uart1_intr_map: Register<UART1_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xb4)
    public var ledc_intr_map: Register<LEDC_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xb8)
    public var can0_intr_map: Register<CAN0_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xbc)
    public var can1_intr_map: Register<CAN1_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xc0)
    public var usb_intr_map: Register<USB_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xc4)
    public var rmt_intr_map: Register<RMT_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xc8)
    public var i2c_ext0_intr_map: Register<I2C_EXT0_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xcc)
    public var tg0_t0_intr_map: Register<TG0_T0_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xd0)
    public var tg0_t1_intr_map: Register<TG0_T1_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xd4)
    public var tg0_wdt_intr_map: Register<TG0_WDT_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xd8)
    public var tg1_t0_intr_map: Register<TG1_T0_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xdc)
    public var tg1_t1_intr_map: Register<TG1_T1_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xe0)
    public var tg1_wdt_intr_map: Register<TG1_WDT_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xe4)
    public var systimer_target0_intr_map: Register<SYSTIMER_TARGET0_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xe8)
    public var systimer_target1_intr_map: Register<SYSTIMER_TARGET1_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xec)
    public var systimer_target2_intr_map: Register<SYSTIMER_TARGET2_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xf0)
    public var apb_adc_intr_map: Register<APB_ADC_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xf4)
    public var pwm_intr_map: Register<PWM_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xf8)
    public var pcnt_intr_map: Register<PCNT_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0xfc)
    public var parl_io_intr_map: Register<PARL_IO_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x100)
    public var slc0_intr_map: Register<SLC0_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x104)
    public var slc1_intr_map: Register<SLC1_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x108)
    public var dma_in_ch0_intr_map: Register<DMA_IN_CH0_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x10c)
    public var dma_in_ch1_intr_map: Register<DMA_IN_CH1_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x110)
    public var dma_in_ch2_intr_map: Register<DMA_IN_CH2_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x114)
    public var dma_out_ch0_intr_map: Register<DMA_OUT_CH0_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x118)
    public var dma_out_ch1_intr_map: Register<DMA_OUT_CH1_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x11c)
    public var dma_out_ch2_intr_map: Register<DMA_OUT_CH2_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x120)
    public var gpspi2_intr_map: Register<GPSPI2_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x124)
    public var aes_intr_map: Register<AES_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x128)
    public var sha_intr_map: Register<SHA_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x12c)
    public var rsa_intr_map: Register<RSA_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x130)
    public var ecc_intr_map: Register<ECC_INTR_MAP>

    /// register description
    @RegisterBlock(offset: 0x134)
    public var int_status_reg_0: Register<INT_STATUS_REG_0>

    /// register description
    @RegisterBlock(offset: 0x138)
    public var int_status_reg_1: Register<INT_STATUS_REG_1>

    /// register description
    @RegisterBlock(offset: 0x13c)
    public var int_status_reg_2: Register<INT_STATUS_REG_2>

    /// register description
    @RegisterBlock(offset: 0x140)
    public var clock_gate: Register<CLOCK_GATE>

    /// register description
    @RegisterBlock(offset: 0x7fc)
    public var interrupt_reg_date: Register<INTERRUPT_REG_DATE>
}

extension INTERRUPT_CORE0 {
    /// register description
    @Register(bitWidth: 32)
    public struct WIFI_MAC_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var wifi_mac_intr_map_field: WIFI_MAC_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct WIFI_MAC_NMI_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var wifi_mac_nmi_map_field: WIFI_MAC_NMI_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct WIFI_PWR_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var wifi_pwr_intr_map_field: WIFI_PWR_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct WIFI_BB_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var wifi_bb_intr_map_field: WIFI_BB_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct BT_MAC_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var bt_mac_intr_map_field: BT_MAC_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct BT_BB_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var bt_bb_intr_map_field: BT_BB_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct BT_BB_NMI_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var bt_bb_nmi_map_field: BT_BB_NMI_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct LP_TIMER_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var lp_timer_intr_map_field: LP_TIMER_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct COEX_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var coex_intr_map_field: COEX_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct BLE_TIMER_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var ble_timer_intr_map_field: BLE_TIMER_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct BLE_SEC_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var ble_sec_intr_map_field: BLE_SEC_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct I2C_MST_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var i2c_mst_intr_map_field: I2C_MST_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct ZB_MAC_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var zb_mac_intr_map_field: ZB_MAC_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct PMU_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var pmu_intr_map_field: PMU_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct EFUSE_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var efuse_intr_map_field: EFUSE_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct LP_RTC_TIMER_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var lp_rtc_timer_intr_map_field: LP_RTC_TIMER_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct LP_UART_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var lp_uart_intr_map_field: LP_UART_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct LP_I2C_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var lp_i2c_intr_map_field: LP_I2C_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct LP_WDT_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var lp_wdt_intr_map_field: LP_WDT_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct LP_PERI_TIMEOUT_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var lp_peri_timeout_intr_map_field: LP_PERI_TIMEOUT_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct LP_APM_M0_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var lp_apm_m0_intr_map_field: LP_APM_M0_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct LP_APM_M1_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var lp_apm_m1_intr_map_field: LP_APM_M1_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct CPU_INTR_FROM_CPU_0_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var cpu_intr_from_cpu_0_map_field: CPU_INTR_FROM_CPU_0_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct CPU_INTR_FROM_CPU_1_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var cpu_intr_from_cpu_1_map_field: CPU_INTR_FROM_CPU_1_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct CPU_INTR_FROM_CPU_2_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var cpu_intr_from_cpu_2_map_field: CPU_INTR_FROM_CPU_2_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct CPU_INTR_FROM_CPU_3_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var cpu_intr_from_cpu_3_map_field: CPU_INTR_FROM_CPU_3_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct ASSIST_DEBUG_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var assist_debug_intr_map_field: ASSIST_DEBUG_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct TRACE_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var trace_intr_map_field: TRACE_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct CACHE_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var cache_intr_map_field: CACHE_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct CPU_PERI_TIMEOUT_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var cpu_peri_timeout_intr_map_field: CPU_PERI_TIMEOUT_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct GPIO_INTERRUPT_PRO_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var gpio_interrupt_pro_map_field: GPIO_INTERRUPT_PRO_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct GPIO_INTERRUPT_PRO_NMI_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var gpio_interrupt_pro_nmi_map_field: GPIO_INTERRUPT_PRO_NMI_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct PAU_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var pau_intr_map_field: PAU_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct HP_PERI_TIMEOUT_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var hp_peri_timeout_intr_map_field: HP_PERI_TIMEOUT_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct MODEM_PERI_TIMEOUT_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var modem_peri_timeout_intr_map_field: MODEM_PERI_TIMEOUT_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct HP_APM_M0_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var hp_apm_m0_intr_map_field: HP_APM_M0_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct HP_APM_M1_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var hp_apm_m1_intr_map_field: HP_APM_M1_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct HP_APM_M2_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var hp_apm_m2_intr_map_field: HP_APM_M2_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct HP_APM_M3_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var hp_apm_m3_intr_map_field: HP_APM_M3_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct LP_APM0_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var lp_apm0_intr_map_field: LP_APM0_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct MSPI_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var mspi_intr_map_field: MSPI_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct I2S1_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var i2s1_intr_map_field: I2S1_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct UHCI0_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var uhci0_intr_map_field: UHCI0_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct UART0_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var uart0_intr_map_field: UART0_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct UART1_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var uart1_intr_map_field: UART1_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct LEDC_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var ledc_intr_map_field: LEDC_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct CAN0_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var can0_intr_map_field: CAN0_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct CAN1_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var can1_intr_map_field: CAN1_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct USB_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var usb_intr_map_field: USB_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct RMT_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var rmt_intr_map_field: RMT_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct I2C_EXT0_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var i2c_ext0_intr_map_field: I2C_EXT0_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct TG0_T0_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var tg0_t0_intr_map_field: TG0_T0_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct TG0_T1_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var tg0_t1_intr_map_field: TG0_T1_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct TG0_WDT_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var tg0_wdt_intr_map_field: TG0_WDT_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct TG1_T0_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var tg1_t0_intr_map_field: TG1_T0_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct TG1_T1_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var tg1_t1_intr_map_field: TG1_T1_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct TG1_WDT_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var tg1_wdt_intr_map_field: TG1_WDT_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct SYSTIMER_TARGET0_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var systimer_target0_intr_map_field: SYSTIMER_TARGET0_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct SYSTIMER_TARGET1_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var systimer_target1_intr_map_field: SYSTIMER_TARGET1_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct SYSTIMER_TARGET2_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var systimer_target2_intr_map_field: SYSTIMER_TARGET2_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct APB_ADC_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var apb_adc_intr_map_field: APB_ADC_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct PWM_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var pwm_intr_map_field: PWM_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct PCNT_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var pcnt_intr_map_field: PCNT_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct PARL_IO_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var parl_io_intr_map_field: PARL_IO_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct SLC0_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var slc0_intr_map_field: SLC0_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct SLC1_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var slc1_intr_map_field: SLC1_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct DMA_IN_CH0_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var dma_in_ch0_intr_map_field: DMA_IN_CH0_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct DMA_IN_CH1_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var dma_in_ch1_intr_map_field: DMA_IN_CH1_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct DMA_IN_CH2_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var dma_in_ch2_intr_map_field: DMA_IN_CH2_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct DMA_OUT_CH0_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var dma_out_ch0_intr_map_field: DMA_OUT_CH0_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct DMA_OUT_CH1_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var dma_out_ch1_intr_map_field: DMA_OUT_CH1_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct DMA_OUT_CH2_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var dma_out_ch2_intr_map_field: DMA_OUT_CH2_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct GPSPI2_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var gpspi2_intr_map_field: GPSPI2_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct AES_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var aes_intr_map_field: AES_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct SHA_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var sha_intr_map_field: SHA_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct RSA_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var rsa_intr_map_field: RSA_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct ECC_INTR_MAP {
        /// Need add description
        @ReadWrite(bits: 0..<5)
        public var ecc_intr_map_field: ECC_INTR_MAP_FIELD
    }

    /// register description
    @Register(bitWidth: 32)
    public struct INT_STATUS_REG_0 {
        /// Need add description
        @ReadOnly(bits: 0..<32)
        public var int_status_0: INT_STATUS_0
    }

    /// register description
    @Register(bitWidth: 32)
    public struct INT_STATUS_REG_1 {
        /// Need add description
        @ReadOnly(bits: 0..<32)
        public var int_status_1: INT_STATUS_1
    }

    /// register description
    @Register(bitWidth: 32)
    public struct INT_STATUS_REG_2 {
        /// Need add description
        @ReadOnly(bits: 0..<32)
        public var int_status_2: INT_STATUS_2
    }

    /// register description
    @Register(bitWidth: 32)
    public struct CLOCK_GATE {
        /// Need add description
        @ReadWrite(bits: 0..<1)
        public var reg_clk_en: REG_CLK_EN
    }

    /// register description
    @Register(bitWidth: 32)
    public struct INTERRUPT_REG_DATE {
        /// Need add description
        @ReadWrite(bits: 0..<28)
        public var interrupt_reg_date_field: INTERRUPT_REG_DATE_FIELD
    }
}
