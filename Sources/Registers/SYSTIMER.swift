// Generated by svd2swift.

import MMIO

/// System Timer
@RegisterBlock
public struct SYSTIMER {
    /// Configure system timer clock
    @RegisterBlock(offset: 0x0)
    public var conf: Register<CONF>

    /// system timer unit%s value update register
    @RegisterBlock(offset: 0x4, stride: 0x4, count: 2)
    public var unit_op: RegisterArray<UNIT_OP>

    /// system timer comp%s target mode register
    @RegisterBlock(offset: 0x34, stride: 0x4, count: 3)
    public var target_conf: RegisterArray<TARGET_CONF>

    /// system timer comp%s conf sync register
    @RegisterBlock(offset: 0x50, stride: 0x4, count: 3)
    public var comp_load: RegisterArray<COMP_LOAD>

    /// system timer unit%s conf sync register
    @RegisterBlock(offset: 0x5c, stride: 0x4, count: 2)
    public var unit_load: RegisterArray<UNIT_LOAD>

    /// systimer interrupt enable register
    @RegisterBlock(offset: 0x64)
    public var int_ena: Register<INT_ENA>

    /// systimer interrupt raw register
    @RegisterBlock(offset: 0x68)
    public var int_raw: Register<INT_RAW>

    /// systimer interrupt clear register
    @RegisterBlock(offset: 0x6c)
    public var int_clr: Register<INT_CLR>

    /// systimer interrupt status register
    @RegisterBlock(offset: 0x70)
    public var int_st: Register<INT_ST>

    /// system timer version control register
    @RegisterBlock(offset: 0xfc)
    public var date: Register<DATE>

    /// Cluster UNIT%sLOAD, containing UNIT?_LOAD_HI, UNIT?_LOAD_LO
    @RegisterBlock(offset: 0xc, stride: 0x8, count: 2)
    public var unitload: RegisterArray<UNITLOAD>

    /// Cluster TRGT%s, containing TARGET?_HI, TARGET?_LO
    @RegisterBlock(offset: 0x1c, stride: 0x8, count: 3)
    public var trgt: RegisterArray<TRGT>

    /// Cluster UNIT%s_VALUE, containing UNIT?_VALUE_HI, UNIT?_VALUE_LO
    @RegisterBlock(offset: 0x40, stride: 0x8, count: 2)
    public var unit_value: RegisterArray<UNIT_VALUE>

    /// Cluster REAL_TARGET%s, containing REAL_TARGET?_LO, REAL_TARGET?_HI
    @RegisterBlock(offset: 0x74, stride: 0x8, count: 3)
    public var real_target: RegisterArray<REAL_TARGET>
}

extension SYSTIMER {
    /// Configure system timer clock
    @Register(bitWidth: 32)
    public struct CONF {
        /// systimer clock force on
        @ReadWrite(bits: 0..<1)
        public var systimer_clk_fo: SYSTIMER_CLK_FO

        /// enable systimer's etm task and event
        @ReadWrite(bits: 1..<2)
        public var etm_en: ETM_EN

        /// target2 work enable
        @ReadWrite(bits: 22..<23)
        public var target2_work_en: TARGET2_WORK_EN

        /// target1 work enable
        @ReadWrite(bits: 23..<24)
        public var target1_work_en: TARGET1_WORK_EN

        /// target0 work enable
        @ReadWrite(bits: 24..<25)
        public var target0_work_en: TARGET0_WORK_EN

        /// If timer unit1 is stalled when core1 stalled
        @ReadWrite(bits: 25..<26)
        public var timer_unit1_core1_stall_en: TIMER_UNIT1_CORE1_STALL_EN

        /// If timer unit1 is stalled when core0 stalled
        @ReadWrite(bits: 26..<27)
        public var timer_unit1_core0_stall_en: TIMER_UNIT1_CORE0_STALL_EN

        /// If timer unit0 is stalled when core1 stalled
        @ReadWrite(bits: 27..<28)
        public var timer_unit0_core1_stall_en: TIMER_UNIT0_CORE1_STALL_EN

        /// If timer unit0 is stalled when core0 stalled
        @ReadWrite(bits: 28..<29)
        public var timer_unit0_core0_stall_en: TIMER_UNIT0_CORE0_STALL_EN

        /// timer unit1 work enable
        @ReadWrite(bits: 29..<30)
        public var timer_unit1_work_en: TIMER_UNIT1_WORK_EN

        /// timer unit0 work enable
        @ReadWrite(bits: 30..<31)
        public var timer_unit0_work_en: TIMER_UNIT0_WORK_EN

        /// register file clk gating
        @ReadWrite(bits: 31..<32)
        public var clk_en: CLK_EN
    }

    /// system timer unit%s value update register
    @Register(bitWidth: 32)
    public struct UNIT_OP {
        /// timer value is sync and valid
        @ReadOnly(bits: 29..<30)
        public var value_valid: VALUE_VALID

        /// update timer_unit0
        @WriteOnly(bits: 30..<31)
        public var update: UPDATE
    }

    /// system timer comp%s target mode register
    @Register(bitWidth: 32)
    public struct TARGET_CONF {
        /// target0 period
        @ReadWrite(bits: 0..<26)
        public var period: PERIOD

        /// Set target0 to period mode
        @ReadWrite(bits: 30..<31)
        public var period_mode: PERIOD_MODE

        /// select which unit to compare
        @ReadWrite(bits: 31..<32)
        public var timer_unit_sel: TIMER_UNIT_SEL
    }

    /// system timer comp%s conf sync register
    @Register(bitWidth: 32)
    public struct COMP_LOAD {
        /// timer comp0 sync enable signal
        @WriteOnly(bits: 0..<1)
        public var load: LOAD
    }

    /// system timer unit%s conf sync register
    @Register(bitWidth: 32)
    public struct UNIT_LOAD {
        /// timer unit0 sync enable signal
        @WriteOnly(bits: 0..<1)
        public var load: LOAD
    }

    /// systimer interrupt enable register
    @Register(bitWidth: 32)
    public struct INT_ENA {
        /// interupt%s enable
        @ReadWrite(bits: 0..<1)
        public var target0: TARGET0

        /// interupt%s enable
        @ReadWrite(bits: 1..<2)
        public var target1: TARGET1

        /// interupt%s enable
        @ReadWrite(bits: 2..<3)
        public var target2: TARGET2
    }

    /// systimer interrupt raw register
    @Register(bitWidth: 32)
    public struct INT_RAW {
        /// interupt%s raw
        @ReadWrite(bits: 0..<1)
        public var target0: TARGET0

        /// interupt%s raw
        @ReadWrite(bits: 1..<2)
        public var target1: TARGET1

        /// interupt%s raw
        @ReadWrite(bits: 2..<3)
        public var target2: TARGET2
    }

    /// systimer interrupt clear register
    @Register(bitWidth: 32)
    public struct INT_CLR {
        /// interupt%s clear
        @WriteOnly(bits: 0..<1)
        public var target0: TARGET0

        /// interupt%s clear
        @WriteOnly(bits: 1..<2)
        public var target1: TARGET1

        /// interupt%s clear
        @WriteOnly(bits: 2..<3)
        public var target2: TARGET2
    }

    /// systimer interrupt status register
    @Register(bitWidth: 32)
    public struct INT_ST {
        /// interupt%s status
        @ReadOnly(bits: 0..<1)
        public var target0: TARGET0

        /// interupt%s status
        @ReadOnly(bits: 1..<2)
        public var target1: TARGET1

        /// interupt%s status
        @ReadOnly(bits: 2..<3)
        public var target2: TARGET2
    }

    /// system timer version control register
    @Register(bitWidth: 32)
    public struct DATE {
        /// systimer register version
        @ReadWrite(bits: 0..<32)
        public var date_field: DATE_FIELD
    }

    /// Cluster UNIT%sLOAD, containing UNIT?_LOAD_HI, UNIT?_LOAD_LO
    @RegisterBlock
    public struct UNITLOAD {
        /// system timer unit0 value high load register
        @RegisterBlock(offset: 0x0)
        public var hi: Register<HI>

        /// system timer unit0 value low load register
        @RegisterBlock(offset: 0x4)
        public var lo: Register<LO>
    }

    /// Cluster TRGT%s, containing TARGET?_HI, TARGET?_LO
    @RegisterBlock
    public struct TRGT {
        /// system timer comp0 value high register
        @RegisterBlock(offset: 0x0)
        public var hi: Register<HI>

        /// system timer comp0 value low register
        @RegisterBlock(offset: 0x4)
        public var lo: Register<LO>
    }

    /// Cluster UNIT%s_VALUE, containing UNIT?_VALUE_HI, UNIT?_VALUE_LO
    @RegisterBlock
    public struct UNIT_VALUE {
        /// system timer unit0 value high register
        @RegisterBlock(offset: 0x0)
        public var hi: Register<HI>

        /// system timer unit0 value low register
        @RegisterBlock(offset: 0x4)
        public var lo: Register<LO>
    }

    /// Cluster REAL_TARGET%s, containing REAL_TARGET?_LO, REAL_TARGET?_HI
    @RegisterBlock
    public struct REAL_TARGET {
        /// system timer comp0 actual target value low register
        @RegisterBlock(offset: 0x0)
        public var lo: Register<LO>

        /// system timer comp0 actual target value high register
        @RegisterBlock(offset: 0x4)
        public var hi: Register<HI>
    }
}

extension SYSTIMER.UNITLOAD {
    /// system timer unit0 value high load register
    @Register(bitWidth: 32)
    public struct HI {
        /// timer unit0 load high 20 bits
        @ReadWrite(bits: 0..<20)
        public var load_hi: LOAD_HI
    }

    /// system timer unit0 value low load register
    @Register(bitWidth: 32)
    public struct LO {
        /// timer unit0 load low 32 bits
        @ReadWrite(bits: 0..<32)
        public var load_lo: LOAD_LO
    }
}

extension SYSTIMER.TRGT {
    /// system timer comp0 value high register
    @Register(bitWidth: 32)
    public struct HI {
        /// timer taget0 high 20 bits
        @ReadWrite(bits: 0..<20)
        public var hi_field: HI_FIELD
    }

    /// system timer comp0 value low register
    @Register(bitWidth: 32)
    public struct LO {
        /// timer taget0 low 32 bits
        @ReadWrite(bits: 0..<32)
        public var lo_field: LO_FIELD
    }
}

extension SYSTIMER.UNIT_VALUE {
    /// system timer unit0 value high register
    @Register(bitWidth: 32)
    public struct HI {
        /// timer read value high 20bits
        @ReadOnly(bits: 0..<20)
        public var value_hi: VALUE_HI
    }

    /// system timer unit0 value low register
    @Register(bitWidth: 32)
    public struct LO {
        /// timer read value low 32bits
        @ReadOnly(bits: 0..<32)
        public var value_lo: VALUE_LO
    }
}

extension SYSTIMER.REAL_TARGET {
    /// system timer comp0 actual target value low register
    @Register(bitWidth: 32)
    public struct LO {
        /// actual target value value low 32bits
        @ReadOnly(bits: 0..<32)
        public var lo_ro: LO_RO
    }

    /// system timer comp0 actual target value high register
    @Register(bitWidth: 32)
    public struct HI {
        /// actual target value value high 20bits
        @ReadOnly(bits: 0..<20)
        public var hi_ro: HI_RO
    }
}
