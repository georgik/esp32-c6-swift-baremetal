// Generated by svd2swift.

import MMIO

/// Core Local Interrupts
@RegisterBlock
public struct CLINT {
    /// MSIP
    @RegisterBlock(offset: 0x1800)
    public var msip: Register<MSIP>

    /// MTIMECTL
    @RegisterBlock(offset: 0x1804)
    public var mtimectl: Register<MTIMECTL>

    /// MTIME
    @RegisterBlock(offset: 0x1808)
    public var mtime: Register<MTIME>

    /// MTIMECMP
    @RegisterBlock(offset: 0x1810)
    public var mtimecmp: Register<MTIMECMP>

    /// USIP
    @RegisterBlock(offset: 0x1c00)
    public var usip: Register<USIP>

    /// UTIMECTL
    @RegisterBlock(offset: 0x1c04)
    public var utimectl: Register<UTIMECTL>

    /// UTIME
    @RegisterBlock(offset: 0x1c08)
    public var utime: Register<UTIME>

    /// UTIMECMP
    @RegisterBlock(offset: 0x1c10)
    public var utimecmp: Register<UTIMECMP>
}

extension CLINT {
    /// MSIP
    @Register(bitWidth: 32)
    public struct MSIP {
        /// Configures the pending status of the machine software interrupt.
        @ReadWrite(bits: 0..<1)
        public var msip_field: MSIP_FIELD
    }

    /// MTIMECTL
    @Register(bitWidth: 32)
    public struct MTIMECTL {
        /// Configures whether to enable the CLINT timer counter.
        @ReadWrite(bits: 0..<1)
        public var mtce: MTCE

        /// Write 1 to enable the machine timer interrupt.
        @ReadWrite(bits: 1..<2)
        public var mtie: MTIE

        /// Represents the pending status of the machine timer interrupt.
        @ReadOnly(bits: 2..<3)
        public var mtip: MTIP

        /// Configures whether the machine timer overflows.
        @ReadWrite(bits: 3..<4)
        public var mtof: MTOF
    }

    /// MTIME (lower 32 bits)
    @Register(bitWidth: 32)
    public struct MTIME {
        /// Configures the lower 32-bit CLINT timer counter value.
        @ReadWrite(bits: 0..<32)
        public var mtime_field: MTIME_FIELD
    }

    /// MTIMECMP (lower 32 bits)
    @Register(bitWidth: 32)
    public struct MTIMECMP {
        /// Configures the lower 32-bit machine timer compare value.
        @ReadWrite(bits: 0..<32)
        public var mtimecmp_field: MTIMECMP_FIELD
    }

    /// USIP
    @Register(bitWidth: 32)
    public struct USIP {
        /// Configures the pending status of the user software interrupt.
        @ReadWrite(bits: 0..<1)
        public var usip_field: USIP_FIELD
    }

    /// UTIMECTL
    @Register(bitWidth: 32)
    public struct UTIMECTL {
        /// Write 1 to enable the user timer interrupt.
        @ReadWrite(bits: 1..<2)
        public var utie: UTIE

        /// Represents the pending status of the user timer interrupt.
        @ReadOnly(bits: 2..<3)
        public var utip: UTIP

        /// Configures whether the user timer overflows.
        @ReadWrite(bits: 3..<4)
        public var utof: UTOF
    }

    /// UTIME (lower 32 bits)
    @Register(bitWidth: 32)
    public struct UTIME {
        /// Represents the read-only lower 32-bit CLINT timer counter value.
        @ReadOnly(bits: 0..<32)
        public var utime_field: UTIME_FIELD
    }

    /// UTIMECMP (lower 32 bits)
    @Register(bitWidth: 32)
    public struct UTIMECMP {
        /// Configures the lower 32-bit user timer compare value.
        @ReadWrite(bits: 0..<32)
        public var utimecmp_field: UTIMECMP_FIELD
    }
}
