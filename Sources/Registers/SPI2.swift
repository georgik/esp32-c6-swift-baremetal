// Generated by svd2swift.

import MMIO

/// SPI (Serial Peripheral Interface) Controller 2
@RegisterBlock
public struct SPI2 {
    /// Command control register
    @RegisterBlock(offset: 0x0)
    public var cmd: Register<CMD>

    /// Address value register
    @RegisterBlock(offset: 0x4)
    public var addr: Register<ADDR>

    /// SPI control register
    @RegisterBlock(offset: 0x8)
    public var ctrl: Register<CTRL>

    /// SPI clock control register
    @RegisterBlock(offset: 0xc)
    public var clock: Register<CLOCK>

    /// SPI USER control register
    @RegisterBlock(offset: 0x10)
    public var user: Register<USER>

    /// SPI USER control register 1
    @RegisterBlock(offset: 0x14)
    public var user1: Register<USER1>

    /// SPI USER control register 2
    @RegisterBlock(offset: 0x18)
    public var user2: Register<USER2>

    /// SPI data bit length control register
    @RegisterBlock(offset: 0x1c)
    public var ms_dlen: Register<MS_DLEN>

    /// SPI misc register
    @RegisterBlock(offset: 0x20)
    public var misc: Register<MISC>

    /// SPI input delay mode configuration
    @RegisterBlock(offset: 0x24)
    public var din_mode: Register<DIN_MODE>

    /// SPI input delay number configuration
    @RegisterBlock(offset: 0x28)
    public var din_num: Register<DIN_NUM>

    /// SPI output delay mode configuration
    @RegisterBlock(offset: 0x2c)
    public var dout_mode: Register<DOUT_MODE>

    /// SPI DMA control register
    @RegisterBlock(offset: 0x30)
    public var dma_conf: Register<DMA_CONF>

    /// SPI interrupt enable register
    @RegisterBlock(offset: 0x34)
    public var dma_int_ena: Register<DMA_INT_ENA>

    /// SPI interrupt clear register
    @RegisterBlock(offset: 0x38)
    public var dma_int_clr: Register<DMA_INT_CLR>

    /// SPI interrupt raw register
    @RegisterBlock(offset: 0x3c)
    public var dma_int_raw: Register<DMA_INT_RAW>

    /// SPI interrupt status register
    @RegisterBlock(offset: 0x40)
    public var dma_int_st: Register<DMA_INT_ST>

    /// SPI interrupt software set register
    @RegisterBlock(offset: 0x44)
    public var dma_int_set: Register<DMA_INT_SET>

    /// SPI CPU-controlled buffer%s
    @RegisterBlock(offset: 0x98, stride: 0x4, count: 16)
    public var w: RegisterArray<W>

    /// SPI slave control register
    @RegisterBlock(offset: 0xe0)
    public var slave: Register<SLAVE>

    /// SPI slave control register 1
    @RegisterBlock(offset: 0xe4)
    public var slave1: Register<SLAVE1>

    /// SPI module clock and register clock control
    @RegisterBlock(offset: 0xe8)
    public var clk_gate: Register<CLK_GATE>

    /// Version control
    @RegisterBlock(offset: 0xf0)
    public var date: Register<DATE>
}

extension SPI2 {
    /// Command control register
    @Register(bitWidth: 32)
    public struct CMD {
        /// Define the APB cycles of SPI_CONF state. Can be configured in CONF state.
        @ReadWrite(bits: 0..<18)
        public var conf_bitlen: CONF_BITLEN

        /// Set this bit to synchronize SPI registers from APB clock domain into SPI module clock domain, which is only used in SPI master mode.
        @ReadWrite(bits: 23..<24)
        public var update: UPDATE

        /// User define command enable. An operation will be triggered when the bit is set. The bit will be cleared once the operation done.1: enable 0: disable. Can not be changed by CONF_buf.
        @ReadWrite(bits: 24..<25)
        public var usr: USR
    }

    /// Address value register
    @Register(bitWidth: 32)
    public struct ADDR {
        /// Address to slave. Can be configured in CONF state.
        @ReadWrite(bits: 0..<32)
        public var usr_addr_value: USR_ADDR_VALUE
    }

    /// SPI control register
    @Register(bitWidth: 32)
    public struct CTRL {
        /// 0: In the dummy phase, the FSPI bus signals are not output. 1: In the dummy phase, the FSPI bus signals are output. Can be configured in CONF state.
        @ReadWrite(bits: 3..<4)
        public var dummy_out: DUMMY_OUT

        /// Apply 2 signals during addr phase 1:enable 0: disable. Can be configured in CONF state.
        @ReadWrite(bits: 5..<6)
        public var faddr_dual: FADDR_DUAL

        /// Apply 4 signals during addr phase 1:enable 0: disable. Can be configured in CONF state.
        @ReadWrite(bits: 6..<7)
        public var faddr_quad: FADDR_QUAD

        /// Apply 8 signals during addr phase 1:enable 0: disable. Can be configured in CONF state.
        @ReadOnly(bits: 7..<8)
        public var faddr_oct: FADDR_OCT

        /// Apply 2 signals during command phase 1:enable 0: disable. Can be configured in CONF state.
        @ReadWrite(bits: 8..<9)
        public var fcmd_dual: FCMD_DUAL

        /// Apply 4 signals during command phase 1:enable 0: disable. Can be configured in CONF state.
        @ReadWrite(bits: 9..<10)
        public var fcmd_quad: FCMD_QUAD

        /// Apply 8 signals during command phase 1:enable 0: disable. Can be configured in CONF state.
        @ReadOnly(bits: 10..<11)
        public var fcmd_oct: FCMD_OCT

        /// In the read operations, read-data phase apply 2 signals. 1: enable 0: disable. Can be configured in CONF state.
        @ReadWrite(bits: 14..<15)
        public var fread_dual: FREAD_DUAL

        /// In the read operations read-data phase apply 4 signals. 1: enable 0: disable. Can be configured in CONF state.
        @ReadWrite(bits: 15..<16)
        public var fread_quad: FREAD_QUAD

        /// In the read operations read-data phase apply 8 signals. 1: enable 0: disable. Can be configured in CONF state.
        @ReadOnly(bits: 16..<17)
        public var fread_oct: FREAD_OCT

        /// The bit is used to set MISO line polarity, 1: high 0, low. Can be configured in CONF state.
        @ReadWrite(bits: 18..<19)
        public var q_pol: Q_POL

        /// The bit is used to set MOSI line polarity, 1: high 0, low. Can be configured in CONF state.
        @ReadWrite(bits: 19..<20)
        public var d_pol: D_POL

        /// SPI_HOLD output value when SPI is idle. 1: output high, 0: output low. Can be configured in CONF state.
        @ReadWrite(bits: 20..<21)
        public var hold_pol: HOLD_POL

        /// Write protect signal output when SPI is idle. 1: output high, 0: output low. Can be configured in CONF state.
        @ReadWrite(bits: 21..<22)
        public var wp_pol: WP_POL

        /// In read-data (MISO) phase 1: LSB first 0: MSB first. Can be configured in CONF state.
        @ReadWrite(bits: 23..<25)
        public var rd_bit_order: RD_BIT_ORDER

        /// In command address write-data (MOSI) phases 1: LSB firs 0: MSB first. Can be configured in CONF state.
        @ReadWrite(bits: 25..<27)
        public var wr_bit_order: WR_BIT_ORDER
    }

    /// SPI clock control register
    @Register(bitWidth: 32)
    public struct CLOCK {
        /// In the master mode it must be equal to spi_clkcnt_N. In the slave mode it must be 0. Can be configured in CONF state.
        @ReadWrite(bits: 0..<6)
        public var clkcnt_l: CLKCNT_L

        /// In the master mode it must be floor((spi_clkcnt_N+1)/2-1). In the slave mode it must be 0. Can be configured in CONF state.
        @ReadWrite(bits: 6..<12)
        public var clkcnt_h: CLKCNT_H

        /// In the master mode it is the divider of spi_clk. So spi_clk frequency is system/(spi_clkdiv_pre+1)/(spi_clkcnt_N+1). Can be configured in CONF state.
        @ReadWrite(bits: 12..<18)
        public var clkcnt_n: CLKCNT_N

        /// In the master mode it is pre-divider of spi_clk. Can be configured in CONF state.
        @ReadWrite(bits: 18..<22)
        public var clkdiv_pre: CLKDIV_PRE

        /// In the master mode 1: spi_clk is eqaul to system 0: spi_clk is divided from system clock. Can be configured in CONF state.
        @ReadWrite(bits: 31..<32)
        public var clk_equ_sysclk: CLK_EQU_SYSCLK
    }

    /// SPI USER control register
    @Register(bitWidth: 32)
    public struct USER {
        /// Set the bit to enable full duplex communication. 1: enable 0: disable. Can be configured in CONF state.
        @ReadWrite(bits: 0..<1)
        public var doutdin: DOUTDIN

        /// Both for master mode and slave mode. 1: spi controller is in QPI mode. 0: others. Can be configured in CONF state.
        @ReadWrite(bits: 3..<4)
        public var qpi_mode: QPI_MODE

        /// Just for master mode. 1: spi controller is in OPI mode (all in 8-b-m). 0: others. Can be configured in CONF state.
        @ReadOnly(bits: 4..<5)
        public var opi_mode: OPI_MODE

        /// In the slave mode, this bit can be used to change the polarity of tsck. 0: tsck = spi_ck_i. 1:tsck = !spi_ck_i.
        @ReadWrite(bits: 5..<6)
        public var tsck_i_edge: TSCK_I_EDGE

        /// spi cs keep low when spi is in done phase. 1: enable 0: disable. Can be configured in CONF state.
        @ReadWrite(bits: 6..<7)
        public var cs_hold: CS_HOLD

        /// spi cs is enable when spi is in prepare phase. 1: enable 0: disable. Can be configured in CONF state.
        @ReadWrite(bits: 7..<8)
        public var cs_setup: CS_SETUP

        /// In the slave mode, this bit can be used to change the polarity of rsck. 0: rsck = !spi_ck_i. 1:rsck = spi_ck_i.
        @ReadWrite(bits: 8..<9)
        public var rsck_i_edge: RSCK_I_EDGE

        /// the bit combined with spi_mosi_delay_mode bits to set mosi signal delay mode. Can be configured in CONF state.
        @ReadWrite(bits: 9..<10)
        public var ck_out_edge: CK_OUT_EDGE

        /// In the write operations read-data phase apply 2 signals. Can be configured in CONF state.
        @ReadWrite(bits: 12..<13)
        public var fwrite_dual: FWRITE_DUAL

        /// In the write operations read-data phase apply 4 signals. Can be configured in CONF state.
        @ReadWrite(bits: 13..<14)
        public var fwrite_quad: FWRITE_QUAD

        /// In the write operations read-data phase apply 8 signals. Can be configured in CONF state.
        @ReadOnly(bits: 14..<15)
        public var fwrite_oct: FWRITE_OCT

        /// 1: Enable the DMA CONF phase of next seg-trans operation, which means seg-trans will continue. 0: The seg-trans will end after the current SPI seg-trans or this is not seg-trans mode. Can be configured in CONF state.
        @ReadWrite(bits: 15..<16)
        public var usr_conf_nxt: USR_CONF_NXT

        /// Set the bit to enable 3-line half duplex communication mosi and miso signals share the same pin. 1: enable 0: disable. Can be configured in CONF state.
        @ReadWrite(bits: 17..<18)
        public var sio: SIO

        /// read-data phase only access to high-part of the buffer spi_w8~spi_w15. 1: enable 0: disable. Can be configured in CONF state.
        @ReadWrite(bits: 24..<25)
        public var usr_miso_highpart: USR_MISO_HIGHPART

        /// write-data phase only access to high-part of the buffer spi_w8~spi_w15. 1: enable 0: disable. Can be configured in CONF state.
        @ReadWrite(bits: 25..<26)
        public var usr_mosi_highpart: USR_MOSI_HIGHPART

        /// spi clock is disable in dummy phase when the bit is enable. Can be configured in CONF state.
        @ReadWrite(bits: 26..<27)
        public var usr_dummy_idle: USR_DUMMY_IDLE

        /// This bit enable the write-data phase of an operation. Can be configured in CONF state.
        @ReadWrite(bits: 27..<28)
        public var usr_mosi: USR_MOSI

        /// This bit enable the read-data phase of an operation. Can be configured in CONF state.
        @ReadWrite(bits: 28..<29)
        public var usr_miso: USR_MISO

        /// This bit enable the dummy phase of an operation. Can be configured in CONF state.
        @ReadWrite(bits: 29..<30)
        public var usr_dummy: USR_DUMMY

        /// This bit enable the address phase of an operation. Can be configured in CONF state.
        @ReadWrite(bits: 30..<31)
        public var usr_addr: USR_ADDR

        /// This bit enable the command phase of an operation. Can be configured in CONF state.
        @ReadWrite(bits: 31..<32)
        public var usr_command: USR_COMMAND
    }

    /// SPI USER control register 1
    @Register(bitWidth: 32)
    public struct USER1 {
        /// The length in spi_clk cycles of dummy phase. The register value shall be (cycle_num-1). Can be configured in CONF state.
        @ReadWrite(bits: 0..<8)
        public var usr_dummy_cyclelen: USR_DUMMY_CYCLELEN

        /// 1: SPI transfer is ended when SPI RX AFIFO wfull error is valid in GP-SPI master FD/HD-mode. 0: SPI transfer is not ended when SPI RX AFIFO wfull error is valid in GP-SPI master FD/HD-mode.
        @ReadWrite(bits: 16..<17)
        public var mst_wfull_err_end_en: MST_WFULL_ERR_END_EN

        /// (cycles+1) of prepare phase by spi clock this bits are combined with spi_cs_setup bit. Can be configured in CONF state.
        @ReadWrite(bits: 17..<22)
        public var cs_setup_time: CS_SETUP_TIME

        /// delay cycles of cs pin by spi clock this bits are combined with spi_cs_hold bit. Can be configured in CONF state.
        @ReadWrite(bits: 22..<27)
        public var cs_hold_time: CS_HOLD_TIME

        /// The length in bits of address phase. The register value shall be (bit_num-1). Can be configured in CONF state.
        @ReadWrite(bits: 27..<32)
        public var usr_addr_bitlen: USR_ADDR_BITLEN
    }

    /// SPI USER control register 2
    @Register(bitWidth: 32)
    public struct USER2 {
        /// The value of command. Can be configured in CONF state.
        @ReadWrite(bits: 0..<16)
        public var usr_command_value: USR_COMMAND_VALUE

        /// 1: SPI transfer is ended when SPI TX AFIFO read empty error is valid in GP-SPI master FD/HD-mode. 0: SPI transfer is not ended when SPI TX AFIFO read empty error is valid in GP-SPI master FD/HD-mode.
        @ReadWrite(bits: 27..<28)
        public var mst_rempty_err_end_en: MST_REMPTY_ERR_END_EN

        /// The length in bits of command phase. The register value shall be (bit_num-1). Can be configured in CONF state.
        @ReadWrite(bits: 28..<32)
        public var usr_command_bitlen: USR_COMMAND_BITLEN
    }

    /// SPI data bit length control register
    @Register(bitWidth: 32)
    public struct MS_DLEN {
        /// The value of these bits is the configured SPI transmission data bit length in master mode DMA controlled transfer or CPU controlled transfer. The value is also the configured bit length in slave mode DMA RX controlled transfer. The register value shall be (bit_num-1). Can be configured in CONF state.
        @ReadWrite(bits: 0..<18)
        public var ms_data_bitlen: MS_DATA_BITLEN
    }

    /// SPI misc register
    @Register(bitWidth: 32)
    public struct MISC {
        /// SPI CS0 pin enable, 1: disable CS0, 0: spi_cs0 signal is from/to CS0 pin. Can be configured in CONF state.
        @ReadWrite(bits: 0..<1)
        public var cs0_dis: CS0_DIS

        /// SPI CS1 pin enable, 1: disable CS1, 0: spi_cs1 signal is from/to CS1 pin. Can be configured in CONF state.
        @ReadWrite(bits: 1..<2)
        public var cs1_dis: CS1_DIS

        /// SPI CS2 pin enable, 1: disable CS2, 0: spi_cs2 signal is from/to CS2 pin. Can be configured in CONF state.
        @ReadWrite(bits: 2..<3)
        public var cs2_dis: CS2_DIS

        /// SPI CS3 pin enable, 1: disable CS3, 0: spi_cs3 signal is from/to CS3 pin. Can be configured in CONF state.
        @ReadWrite(bits: 3..<4)
        public var cs3_dis: CS3_DIS

        /// SPI CS4 pin enable, 1: disable CS4, 0: spi_cs4 signal is from/to CS4 pin. Can be configured in CONF state.
        @ReadWrite(bits: 4..<5)
        public var cs4_dis: CS4_DIS

        /// SPI CS5 pin enable, 1: disable CS5, 0: spi_cs5 signal is from/to CS5 pin. Can be configured in CONF state.
        @ReadWrite(bits: 5..<6)
        public var cs5_dis: CS5_DIS

        /// 1: spi clk out disable, 0: spi clk out enable. Can be configured in CONF state.
        @ReadWrite(bits: 6..<7)
        public var ck_dis: CK_DIS

        /// In the master mode the bits are the polarity of spi cs line, the value is equivalent to spi_cs ^ spi_master_cs_pol. Can be configured in CONF state.
        @ReadWrite(bits: 7..<13)
        public var master_cs_pol: MASTER_CS_POL

        /// 1: SPI master DTR mode is applied to SPI clk, data and spi_dqs. 0: SPI master DTR mode is only applied to spi_dqs. This bit should be used with bit 17/18/19.
        @ReadOnly(bits: 16..<17)
        public var clk_data_dtr_en: CLK_DATA_DTR_EN

        /// 1: SPI clk and data of SPI_DOUT and SPI_DIN state are in DTR mode, including master 1/2/4/8-bm. 0: SPI clk and data of SPI_DOUT and SPI_DIN state are in STR mode. Can be configured in CONF state.
        @ReadOnly(bits: 17..<18)
        public var data_dtr_en: DATA_DTR_EN

        /// 1: SPI clk and data of SPI_SEND_ADDR state are in DTR mode, including master 1/2/4/8-bm. 0: SPI clk and data of SPI_SEND_ADDR state are in STR mode. Can be configured in CONF state.
        @ReadOnly(bits: 18..<19)
        public var addr_dtr_en: ADDR_DTR_EN

        /// 1: SPI clk and data of SPI_SEND_CMD state are in DTR mode, including master 1/2/4/8-bm. 0: SPI clk and data of SPI_SEND_CMD state are in STR mode. Can be configured in CONF state.
        @ReadOnly(bits: 19..<20)
        public var cmd_dtr_en: CMD_DTR_EN

        /// spi slave input cs polarity select. 1: inv 0: not change. Can be configured in CONF state.
        @ReadWrite(bits: 23..<24)
        public var slave_cs_pol: SLAVE_CS_POL

        /// The default value of spi_dqs. Can be configured in CONF state.
        @ReadOnly(bits: 24..<25)
        public var dqs_idle_edge: DQS_IDLE_EDGE

        /// 1: spi clk line is high when idle 0: spi clk line is low when idle. Can be configured in CONF state.
        @ReadWrite(bits: 29..<30)
        public var ck_idle_edge: CK_IDLE_EDGE

        /// spi cs line keep low when the bit is set. Can be configured in CONF state.
        @ReadWrite(bits: 30..<31)
        public var cs_keep_active: CS_KEEP_ACTIVE

        /// 1: SPI quad input swap enable, swap FSPID with FSPIQ, swap FSPIWP with FSPIHD. 0: spi quad input swap disable. Can be configured in CONF state.
        @ReadWrite(bits: 31..<32)
        public var quad_din_pin_swap: QUAD_DIN_PIN_SWAP
    }

    /// SPI input delay mode configuration
    @Register(bitWidth: 32)
    public struct DIN_MODE {
        /// the input signals are delayed by SPI module clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.
        @ReadWrite(bits: 0..<2)
        public var din0_mode: DIN0_MODE

        /// the input signals are delayed by SPI module clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.
        @ReadWrite(bits: 2..<4)
        public var din1_mode: DIN1_MODE

        /// the input signals are delayed by SPI module clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.
        @ReadWrite(bits: 4..<6)
        public var din2_mode: DIN2_MODE

        /// the input signals are delayed by SPI module clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.
        @ReadWrite(bits: 6..<8)
        public var din3_mode: DIN3_MODE

        /// the input signals are delayed by SPI module clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.
        @ReadOnly(bits: 8..<10)
        public var din4_mode: DIN4_MODE

        /// the input signals are delayed by SPI module clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.
        @ReadOnly(bits: 10..<12)
        public var din5_mode: DIN5_MODE

        /// the input signals are delayed by SPI module clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.
        @ReadOnly(bits: 12..<14)
        public var din6_mode: DIN6_MODE

        /// the input signals are delayed by SPI module clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.
        @ReadOnly(bits: 14..<16)
        public var din7_mode: DIN7_MODE

        /// 1:enable hclk in SPI input timing module. 0: disable it. Can be configured in CONF state.
        @ReadWrite(bits: 16..<17)
        public var timing_hclk_active: TIMING_HCLK_ACTIVE
    }

    /// SPI input delay number configuration
    @Register(bitWidth: 32)
    public struct DIN_NUM {
        /// the input signals are delayed by SPI module clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.
        @ReadWrite(bits: 0..<2)
        public var din0_num: DIN0_NUM

        /// the input signals are delayed by SPI module clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.
        @ReadWrite(bits: 2..<4)
        public var din1_num: DIN1_NUM

        /// the input signals are delayed by SPI module clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.
        @ReadWrite(bits: 4..<6)
        public var din2_num: DIN2_NUM

        /// the input signals are delayed by SPI module clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.
        @ReadWrite(bits: 6..<8)
        public var din3_num: DIN3_NUM

        /// the input signals are delayed by SPI module clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.
        @ReadOnly(bits: 8..<10)
        public var din4_num: DIN4_NUM

        /// the input signals are delayed by SPI module clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.
        @ReadOnly(bits: 10..<12)
        public var din5_num: DIN5_NUM

        /// the input signals are delayed by SPI module clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.
        @ReadOnly(bits: 12..<14)
        public var din6_num: DIN6_NUM

        /// the input signals are delayed by SPI module clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.
        @ReadOnly(bits: 14..<16)
        public var din7_num: DIN7_NUM
    }

    /// SPI output delay mode configuration
    @Register(bitWidth: 32)
    public struct DOUT_MODE {
        /// The output signal 0 is delayed by the SPI module clock, 0: output without delayed, 1: output delay for a SPI module clock cycle at its negative edge. Can be configured in CONF state.
        @ReadWrite(bits: 0..<1)
        public var dout0_mode: DOUT0_MODE

        /// The output signal 1 is delayed by the SPI module clock, 0: output without delayed, 1: output delay for a SPI module clock cycle at its negative edge. Can be configured in CONF state.
        @ReadWrite(bits: 1..<2)
        public var dout1_mode: DOUT1_MODE

        /// The output signal 2 is delayed by the SPI module clock, 0: output without delayed, 1: output delay for a SPI module clock cycle at its negative edge. Can be configured in CONF state.
        @ReadWrite(bits: 2..<3)
        public var dout2_mode: DOUT2_MODE

        /// The output signal 3 is delayed by the SPI module clock, 0: output without delayed, 1: output delay for a SPI module clock cycle at its negative edge. Can be configured in CONF state.
        @ReadWrite(bits: 3..<4)
        public var dout3_mode: DOUT3_MODE

        /// The output signal 4 is delayed by the SPI module clock, 0: output without delayed, 1: output delay for a SPI module clock cycle at its negative edge. Can be configured in CONF state.
        @ReadOnly(bits: 4..<5)
        public var dout4_mode: DOUT4_MODE

        /// The output signal 5 is delayed by the SPI module clock, 0: output without delayed, 1: output delay for a SPI module clock cycle at its negative edge. Can be configured in CONF state.
        @ReadOnly(bits: 5..<6)
        public var dout5_mode: DOUT5_MODE

        /// The output signal 6 is delayed by the SPI module clock, 0: output without delayed, 1: output delay for a SPI module clock cycle at its negative edge. Can be configured in CONF state.
        @ReadOnly(bits: 6..<7)
        public var dout6_mode: DOUT6_MODE

        /// The output signal 7 is delayed by the SPI module clock, 0: output without delayed, 1: output delay for a SPI module clock cycle at its negative edge. Can be configured in CONF state.
        @ReadOnly(bits: 7..<8)
        public var dout7_mode: DOUT7_MODE

        /// The output signal SPI_DQS is delayed by the SPI module clock, 0: output without delayed, 1: output delay for a SPI module clock cycle at its negative edge. Can be configured in CONF state.
        @ReadOnly(bits: 8..<9)
        public var d_dqs_mode: D_DQS_MODE
    }

    /// SPI DMA control register
    @Register(bitWidth: 32)
    public struct DMA_CONF {
        /// Records the status of DMA TX FIFO. 1: DMA TX FIFO is not ready for sending data. 0: DMA TX FIFO is ready for sending data.
        @ReadOnly(bits: 0..<1)
        public var dma_outfifo_empty: DMA_OUTFIFO_EMPTY

        /// Records the status of DMA RX FIFO. 1: DMA RX FIFO is not ready for receiving data. 0: DMA RX FIFO is ready for receiving data.
        @ReadOnly(bits: 1..<2)
        public var dma_infifo_full: DMA_INFIFO_FULL

        /// Enable dma segment transfer in spi dma half slave mode. 1: enable. 0: disable.
        @ReadWrite(bits: 18..<19)
        public var dma_slv_seg_trans_en: DMA_SLV_SEG_TRANS_EN

        /// 1: spi_dma_infifo_full_vld is cleared by spi slave cmd 5. 0: spi_dma_infifo_full_vld is cleared by spi_trans_done.
        @ReadWrite(bits: 19..<20)
        public var slv_rx_seg_trans_clr_en: SLV_RX_SEG_TRANS_CLR_EN

        /// 1: spi_dma_outfifo_empty_vld is cleared by spi slave cmd 6. 0: spi_dma_outfifo_empty_vld is cleared by spi_trans_done.
        @ReadWrite(bits: 20..<21)
        public var slv_tx_seg_trans_clr_en: SLV_TX_SEG_TRANS_CLR_EN

        /// 1: spi_dma_inlink_eof is set when the number of dma pushed data bytes is equal to the value of spi_slv/mst_dma_rd_bytelen[19:0] in spi dma transition. 0: spi_dma_inlink_eof is set by spi_trans_done in non-seg-trans or spi_dma_seg_trans_done in seg-trans.
        @ReadWrite(bits: 21..<22)
        public var rx_eof_en: RX_EOF_EN

        /// Set this bit to enable SPI DMA controlled receive data mode.
        @ReadWrite(bits: 27..<28)
        public var dma_rx_ena: DMA_RX_ENA

        /// Set this bit to enable SPI DMA controlled send data mode.
        @ReadWrite(bits: 28..<29)
        public var dma_tx_ena: DMA_TX_ENA

        /// Set this bit to reset RX AFIFO, which is used to receive data in SPI master and slave mode transfer.
        @WriteOnly(bits: 29..<30)
        public var rx_afifo_rst: RX_AFIFO_RST

        /// Set this bit to reset BUF TX AFIFO, which is used send data out in SPI slave CPU controlled mode transfer and master mode transfer.
        @WriteOnly(bits: 30..<31)
        public var buf_afifo_rst: BUF_AFIFO_RST

        /// Set this bit to reset DMA TX AFIFO, which is used to send data out in SPI slave DMA controlled mode transfer.
        @WriteOnly(bits: 31..<32)
        public var dma_afifo_rst: DMA_AFIFO_RST
    }

    /// SPI interrupt enable register
    @Register(bitWidth: 32)
    public struct DMA_INT_ENA {
        /// The enable bit for SPI_DMA_INFIFO_FULL_ERR_INT interrupt.
        @ReadWrite(bits: 0..<1)
        public var dma_infifo_full_err: DMA_INFIFO_FULL_ERR

        /// The enable bit for SPI_DMA_OUTFIFO_EMPTY_ERR_INT interrupt.
        @ReadWrite(bits: 1..<2)
        public var dma_outfifo_empty_err: DMA_OUTFIFO_EMPTY_ERR

        /// The enable bit for SPI slave Ex_QPI interrupt.
        @ReadWrite(bits: 2..<3)
        public var slv_ex_qpi: SLV_EX_QPI

        /// The enable bit for SPI slave En_QPI interrupt.
        @ReadWrite(bits: 3..<4)
        public var slv_en_qpi: SLV_EN_QPI

        /// The enable bit for SPI slave CMD7 interrupt.
        @ReadWrite(bits: 4..<5)
        public var slv_cmd7: SLV_CMD7

        /// The enable bit for SPI slave CMD8 interrupt.
        @ReadWrite(bits: 5..<6)
        public var slv_cmd8: SLV_CMD8

        /// The enable bit for SPI slave CMD9 interrupt.
        @ReadWrite(bits: 6..<7)
        public var slv_cmd9: SLV_CMD9

        /// The enable bit for SPI slave CMDA interrupt.
        @ReadWrite(bits: 7..<8)
        public var slv_cmda: SLV_CMDA

        /// The enable bit for SPI_SLV_RD_DMA_DONE_INT interrupt.
        @ReadWrite(bits: 8..<9)
        public var slv_rd_dma_done: SLV_RD_DMA_DONE

        /// The enable bit for SPI_SLV_WR_DMA_DONE_INT interrupt.
        @ReadWrite(bits: 9..<10)
        public var slv_wr_dma_done: SLV_WR_DMA_DONE

        /// The enable bit for SPI_SLV_RD_BUF_DONE_INT interrupt.
        @ReadWrite(bits: 10..<11)
        public var slv_rd_buf_done: SLV_RD_BUF_DONE

        /// The enable bit for SPI_SLV_WR_BUF_DONE_INT interrupt.
        @ReadWrite(bits: 11..<12)
        public var slv_wr_buf_done: SLV_WR_BUF_DONE

        /// The enable bit for SPI_TRANS_DONE_INT interrupt.
        @ReadWrite(bits: 12..<13)
        public var trans_done: TRANS_DONE

        /// The enable bit for SPI_DMA_SEG_TRANS_DONE_INT interrupt.
        @ReadWrite(bits: 13..<14)
        public var dma_seg_trans_done: DMA_SEG_TRANS_DONE

        /// The enable bit for SPI_SEG_MAGIC_ERR_INT interrupt.
        @ReadWrite(bits: 14..<15)
        public var seg_magic_err: SEG_MAGIC_ERR

        /// The enable bit for SPI_SLV_BUF_ADDR_ERR_INT interrupt.
        @ReadWrite(bits: 15..<16)
        public var slv_buf_addr_err: SLV_BUF_ADDR_ERR

        /// The enable bit for SPI_SLV_CMD_ERR_INT interrupt.
        @ReadWrite(bits: 16..<17)
        public var slv_cmd_err: SLV_CMD_ERR

        /// The enable bit for SPI_MST_RX_AFIFO_WFULL_ERR_INT interrupt.
        @ReadWrite(bits: 17..<18)
        public var mst_rx_afifo_wfull_err: MST_RX_AFIFO_WFULL_ERR

        /// The enable bit for SPI_MST_TX_AFIFO_REMPTY_ERR_INT interrupt.
        @ReadWrite(bits: 18..<19)
        public var mst_tx_afifo_rempty_err: MST_TX_AFIFO_REMPTY_ERR

        /// The enable bit for SPI_APP2_INT interrupt.
        @ReadWrite(bits: 19..<20)
        public var app2: APP2

        /// The enable bit for SPI_APP1_INT interrupt.
        @ReadWrite(bits: 20..<21)
        public var app1: APP1
    }

    /// SPI interrupt clear register
    @Register(bitWidth: 32)
    public struct DMA_INT_CLR {
        /// The clear bit for SPI_DMA_INFIFO_FULL_ERR_INT interrupt.
        @WriteOnly(bits: 0..<1)
        public var dma_infifo_full_err: DMA_INFIFO_FULL_ERR

        /// The clear bit for SPI_DMA_OUTFIFO_EMPTY_ERR_INT interrupt.
        @WriteOnly(bits: 1..<2)
        public var dma_outfifo_empty_err: DMA_OUTFIFO_EMPTY_ERR

        /// The clear bit for SPI slave Ex_QPI interrupt.
        @WriteOnly(bits: 2..<3)
        public var slv_ex_qpi: SLV_EX_QPI

        /// The clear bit for SPI slave En_QPI interrupt.
        @WriteOnly(bits: 3..<4)
        public var slv_en_qpi: SLV_EN_QPI

        /// The clear bit for SPI slave CMD7 interrupt.
        @WriteOnly(bits: 4..<5)
        public var slv_cmd7: SLV_CMD7

        /// The clear bit for SPI slave CMD8 interrupt.
        @WriteOnly(bits: 5..<6)
        public var slv_cmd8: SLV_CMD8

        /// The clear bit for SPI slave CMD9 interrupt.
        @WriteOnly(bits: 6..<7)
        public var slv_cmd9: SLV_CMD9

        /// The clear bit for SPI slave CMDA interrupt.
        @WriteOnly(bits: 7..<8)
        public var slv_cmda: SLV_CMDA

        /// The clear bit for SPI_SLV_RD_DMA_DONE_INT interrupt.
        @WriteOnly(bits: 8..<9)
        public var slv_rd_dma_done: SLV_RD_DMA_DONE

        /// The clear bit for SPI_SLV_WR_DMA_DONE_INT interrupt.
        @WriteOnly(bits: 9..<10)
        public var slv_wr_dma_done: SLV_WR_DMA_DONE

        /// The clear bit for SPI_SLV_RD_BUF_DONE_INT interrupt.
        @WriteOnly(bits: 10..<11)
        public var slv_rd_buf_done: SLV_RD_BUF_DONE

        /// The clear bit for SPI_SLV_WR_BUF_DONE_INT interrupt.
        @WriteOnly(bits: 11..<12)
        public var slv_wr_buf_done: SLV_WR_BUF_DONE

        /// The clear bit for SPI_TRANS_DONE_INT interrupt.
        @WriteOnly(bits: 12..<13)
        public var trans_done: TRANS_DONE

        /// The clear bit for SPI_DMA_SEG_TRANS_DONE_INT interrupt.
        @WriteOnly(bits: 13..<14)
        public var dma_seg_trans_done: DMA_SEG_TRANS_DONE

        /// The clear bit for SPI_SEG_MAGIC_ERR_INT interrupt.
        @WriteOnly(bits: 14..<15)
        public var seg_magic_err: SEG_MAGIC_ERR

        /// The clear bit for SPI_SLV_BUF_ADDR_ERR_INT interrupt.
        @WriteOnly(bits: 15..<16)
        public var slv_buf_addr_err: SLV_BUF_ADDR_ERR

        /// The clear bit for SPI_SLV_CMD_ERR_INT interrupt.
        @WriteOnly(bits: 16..<17)
        public var slv_cmd_err: SLV_CMD_ERR

        /// The clear bit for SPI_MST_RX_AFIFO_WFULL_ERR_INT interrupt.
        @WriteOnly(bits: 17..<18)
        public var mst_rx_afifo_wfull_err: MST_RX_AFIFO_WFULL_ERR

        /// The clear bit for SPI_MST_TX_AFIFO_REMPTY_ERR_INT interrupt.
        @WriteOnly(bits: 18..<19)
        public var mst_tx_afifo_rempty_err: MST_TX_AFIFO_REMPTY_ERR

        /// The clear bit for SPI_APP2_INT interrupt.
        @WriteOnly(bits: 19..<20)
        public var app2: APP2

        /// The clear bit for SPI_APP1_INT interrupt.
        @WriteOnly(bits: 20..<21)
        public var app1: APP1
    }

    /// SPI interrupt raw register
    @Register(bitWidth: 32)
    public struct DMA_INT_RAW {
        /// 1: The current data rate of DMA Rx is smaller than that of SPI, which will lose the receive data. 0: Others.
        @ReadWrite(bits: 0..<1)
        public var dma_infifo_full_err: DMA_INFIFO_FULL_ERR

        /// 1: The current data rate of DMA TX is smaller than that of SPI. SPI will stop in master mode and send out all 0 in slave mode. 0: Others.
        @ReadWrite(bits: 1..<2)
        public var dma_outfifo_empty_err: DMA_OUTFIFO_EMPTY_ERR

        /// The raw bit for SPI slave Ex_QPI interrupt. 1: SPI slave mode Ex_QPI transmission is ended. 0: Others.
        @ReadWrite(bits: 2..<3)
        public var slv_ex_qpi: SLV_EX_QPI

        /// The raw bit for SPI slave En_QPI interrupt. 1: SPI slave mode En_QPI transmission is ended. 0: Others.
        @ReadWrite(bits: 3..<4)
        public var slv_en_qpi: SLV_EN_QPI

        /// The raw bit for SPI slave CMD7 interrupt. 1: SPI slave mode CMD7 transmission is ended. 0: Others.
        @ReadWrite(bits: 4..<5)
        public var slv_cmd7: SLV_CMD7

        /// The raw bit for SPI slave CMD8 interrupt. 1: SPI slave mode CMD8 transmission is ended. 0: Others.
        @ReadWrite(bits: 5..<6)
        public var slv_cmd8: SLV_CMD8

        /// The raw bit for SPI slave CMD9 interrupt. 1: SPI slave mode CMD9 transmission is ended. 0: Others.
        @ReadWrite(bits: 6..<7)
        public var slv_cmd9: SLV_CMD9

        /// The raw bit for SPI slave CMDA interrupt. 1: SPI slave mode CMDA transmission is ended. 0: Others.
        @ReadWrite(bits: 7..<8)
        public var slv_cmda: SLV_CMDA

        /// The raw bit for SPI_SLV_RD_DMA_DONE_INT interrupt. 1: SPI slave mode Rd_DMA transmission is ended. 0: Others.
        @ReadWrite(bits: 8..<9)
        public var slv_rd_dma_done: SLV_RD_DMA_DONE

        /// The raw bit for SPI_SLV_WR_DMA_DONE_INT interrupt. 1: SPI slave mode Wr_DMA transmission is ended. 0: Others.
        @ReadWrite(bits: 9..<10)
        public var slv_wr_dma_done: SLV_WR_DMA_DONE

        /// The raw bit for SPI_SLV_RD_BUF_DONE_INT interrupt. 1: SPI slave mode Rd_BUF transmission is ended. 0: Others.
        @ReadWrite(bits: 10..<11)
        public var slv_rd_buf_done: SLV_RD_BUF_DONE

        /// The raw bit for SPI_SLV_WR_BUF_DONE_INT interrupt. 1: SPI slave mode Wr_BUF transmission is ended. 0: Others.
        @ReadWrite(bits: 11..<12)
        public var slv_wr_buf_done: SLV_WR_BUF_DONE

        /// The raw bit for SPI_TRANS_DONE_INT interrupt. 1: SPI master mode transmission is ended. 0: others.
        @ReadWrite(bits: 12..<13)
        public var trans_done: TRANS_DONE

        /// The raw bit for SPI_DMA_SEG_TRANS_DONE_INT interrupt. 1: spi master DMA full-duplex/half-duplex seg-conf-trans ends or slave half-duplex seg-trans ends. And data has been pushed to corresponding memory. 0: seg-conf-trans or seg-trans is not ended or not occurred.
        @ReadWrite(bits: 13..<14)
        public var dma_seg_trans_done: DMA_SEG_TRANS_DONE

        /// The raw bit for SPI_SEG_MAGIC_ERR_INT interrupt. 1: The magic value in CONF buffer is error in the DMA seg-conf-trans. 0: others.
        @ReadWrite(bits: 14..<15)
        public var seg_magic_err: SEG_MAGIC_ERR

        /// The raw bit for SPI_SLV_BUF_ADDR_ERR_INT interrupt. 1: The accessing data address of the current SPI slave mode CPU controlled FD, Wr_BUF or Rd_BUF transmission is bigger than 63. 0: Others.
        @ReadWrite(bits: 15..<16)
        public var slv_buf_addr_err: SLV_BUF_ADDR_ERR

        /// The raw bit for SPI_SLV_CMD_ERR_INT interrupt. 1: The slave command value in the current SPI slave HD mode transmission is not supported. 0: Others.
        @ReadWrite(bits: 16..<17)
        public var slv_cmd_err: SLV_CMD_ERR

        /// The raw bit for SPI_MST_RX_AFIFO_WFULL_ERR_INT interrupt. 1: There is a RX AFIFO write-full error when SPI inputs data in master mode. 0: Others.
        @ReadWrite(bits: 17..<18)
        public var mst_rx_afifo_wfull_err: MST_RX_AFIFO_WFULL_ERR

        /// The raw bit for SPI_MST_TX_AFIFO_REMPTY_ERR_INT interrupt. 1: There is a TX BUF AFIFO read-empty error when SPI outputs data in master mode. 0: Others.
        @ReadWrite(bits: 18..<19)
        public var mst_tx_afifo_rempty_err: MST_TX_AFIFO_REMPTY_ERR

        /// The raw bit for SPI_APP2_INT interrupt. The value is only controlled by software.
        @ReadWrite(bits: 19..<20)
        public var app2: APP2

        /// The raw bit for SPI_APP1_INT interrupt. The value is only controlled by software.
        @ReadWrite(bits: 20..<21)
        public var app1: APP1
    }

    /// SPI interrupt status register
    @Register(bitWidth: 32)
    public struct DMA_INT_ST {
        /// The status bit for SPI_DMA_INFIFO_FULL_ERR_INT interrupt.
        @ReadOnly(bits: 0..<1)
        public var dma_infifo_full_err: DMA_INFIFO_FULL_ERR

        /// The status bit for SPI_DMA_OUTFIFO_EMPTY_ERR_INT interrupt.
        @ReadOnly(bits: 1..<2)
        public var dma_outfifo_empty_err: DMA_OUTFIFO_EMPTY_ERR

        /// The status bit for SPI slave Ex_QPI interrupt.
        @ReadOnly(bits: 2..<3)
        public var slv_ex_qpi: SLV_EX_QPI

        /// The status bit for SPI slave En_QPI interrupt.
        @ReadOnly(bits: 3..<4)
        public var slv_en_qpi: SLV_EN_QPI

        /// The status bit for SPI slave CMD7 interrupt.
        @ReadOnly(bits: 4..<5)
        public var slv_cmd7: SLV_CMD7

        /// The status bit for SPI slave CMD8 interrupt.
        @ReadOnly(bits: 5..<6)
        public var slv_cmd8: SLV_CMD8

        /// The status bit for SPI slave CMD9 interrupt.
        @ReadOnly(bits: 6..<7)
        public var slv_cmd9: SLV_CMD9

        /// The status bit for SPI slave CMDA interrupt.
        @ReadOnly(bits: 7..<8)
        public var slv_cmda: SLV_CMDA

        /// The status bit for SPI_SLV_RD_DMA_DONE_INT interrupt.
        @ReadOnly(bits: 8..<9)
        public var slv_rd_dma_done: SLV_RD_DMA_DONE

        /// The status bit for SPI_SLV_WR_DMA_DONE_INT interrupt.
        @ReadOnly(bits: 9..<10)
        public var slv_wr_dma_done: SLV_WR_DMA_DONE

        /// The status bit for SPI_SLV_RD_BUF_DONE_INT interrupt.
        @ReadOnly(bits: 10..<11)
        public var slv_rd_buf_done: SLV_RD_BUF_DONE

        /// The status bit for SPI_SLV_WR_BUF_DONE_INT interrupt.
        @ReadOnly(bits: 11..<12)
        public var slv_wr_buf_done: SLV_WR_BUF_DONE

        /// The status bit for SPI_TRANS_DONE_INT interrupt.
        @ReadOnly(bits: 12..<13)
        public var trans_done: TRANS_DONE

        /// The status bit for SPI_DMA_SEG_TRANS_DONE_INT interrupt.
        @ReadOnly(bits: 13..<14)
        public var dma_seg_trans_done: DMA_SEG_TRANS_DONE

        /// The status bit for SPI_SEG_MAGIC_ERR_INT interrupt.
        @ReadOnly(bits: 14..<15)
        public var seg_magic_err: SEG_MAGIC_ERR

        /// The status bit for SPI_SLV_BUF_ADDR_ERR_INT interrupt.
        @ReadOnly(bits: 15..<16)
        public var slv_buf_addr_err: SLV_BUF_ADDR_ERR

        /// The status bit for SPI_SLV_CMD_ERR_INT interrupt.
        @ReadOnly(bits: 16..<17)
        public var slv_cmd_err: SLV_CMD_ERR

        /// The status bit for SPI_MST_RX_AFIFO_WFULL_ERR_INT interrupt.
        @ReadOnly(bits: 17..<18)
        public var mst_rx_afifo_wfull_err: MST_RX_AFIFO_WFULL_ERR

        /// The status bit for SPI_MST_TX_AFIFO_REMPTY_ERR_INT interrupt.
        @ReadOnly(bits: 18..<19)
        public var mst_tx_afifo_rempty_err: MST_TX_AFIFO_REMPTY_ERR

        /// The status bit for SPI_APP2_INT interrupt.
        @ReadOnly(bits: 19..<20)
        public var app2: APP2

        /// The status bit for SPI_APP1_INT interrupt.
        @ReadOnly(bits: 20..<21)
        public var app1: APP1
    }

    /// SPI interrupt software set register
    @Register(bitWidth: 32)
    public struct DMA_INT_SET {
        /// The software set bit for SPI_DMA_INFIFO_FULL_ERR_INT interrupt.
        @WriteOnly(bits: 0..<1)
        public var dma_infifo_full_err_int_set: DMA_INFIFO_FULL_ERR_INT_SET

        /// The software set bit for SPI_DMA_OUTFIFO_EMPTY_ERR_INT interrupt.
        @WriteOnly(bits: 1..<2)
        public var dma_outfifo_empty_err_int_set: DMA_OUTFIFO_EMPTY_ERR_INT_SET

        /// The software set bit for SPI slave Ex_QPI interrupt.
        @WriteOnly(bits: 2..<3)
        public var slv_ex_qpi_int_set: SLV_EX_QPI_INT_SET

        /// The software set bit for SPI slave En_QPI interrupt.
        @WriteOnly(bits: 3..<4)
        public var slv_en_qpi_int_set: SLV_EN_QPI_INT_SET

        /// The software set bit for SPI slave CMD7 interrupt.
        @WriteOnly(bits: 4..<5)
        public var slv_cmd7_int_set: SLV_CMD7_INT_SET

        /// The software set bit for SPI slave CMD8 interrupt.
        @WriteOnly(bits: 5..<6)
        public var slv_cmd8_int_set: SLV_CMD8_INT_SET

        /// The software set bit for SPI slave CMD9 interrupt.
        @WriteOnly(bits: 6..<7)
        public var slv_cmd9_int_set: SLV_CMD9_INT_SET

        /// The software set bit for SPI slave CMDA interrupt.
        @WriteOnly(bits: 7..<8)
        public var slv_cmda_int_set: SLV_CMDA_INT_SET

        /// The software set bit for SPI_SLV_RD_DMA_DONE_INT interrupt.
        @WriteOnly(bits: 8..<9)
        public var slv_rd_dma_done_int_set: SLV_RD_DMA_DONE_INT_SET

        /// The software set bit for SPI_SLV_WR_DMA_DONE_INT interrupt.
        @WriteOnly(bits: 9..<10)
        public var slv_wr_dma_done_int_set: SLV_WR_DMA_DONE_INT_SET

        /// The software set bit for SPI_SLV_RD_BUF_DONE_INT interrupt.
        @WriteOnly(bits: 10..<11)
        public var slv_rd_buf_done_int_set: SLV_RD_BUF_DONE_INT_SET

        /// The software set bit for SPI_SLV_WR_BUF_DONE_INT interrupt.
        @WriteOnly(bits: 11..<12)
        public var slv_wr_buf_done_int_set: SLV_WR_BUF_DONE_INT_SET

        /// The software set bit for SPI_TRANS_DONE_INT interrupt.
        @WriteOnly(bits: 12..<13)
        public var trans_done_int_set: TRANS_DONE_INT_SET

        /// The software set bit for SPI_DMA_SEG_TRANS_DONE_INT interrupt.
        @WriteOnly(bits: 13..<14)
        public var dma_seg_trans_done_int_set: DMA_SEG_TRANS_DONE_INT_SET

        /// The software set bit for SPI_SEG_MAGIC_ERR_INT interrupt.
        @WriteOnly(bits: 14..<15)
        public var seg_magic_err_int_set: SEG_MAGIC_ERR_INT_SET

        /// The software set bit for SPI_SLV_BUF_ADDR_ERR_INT interrupt.
        @WriteOnly(bits: 15..<16)
        public var slv_buf_addr_err_int_set: SLV_BUF_ADDR_ERR_INT_SET

        /// The software set bit for SPI_SLV_CMD_ERR_INT interrupt.
        @WriteOnly(bits: 16..<17)
        public var slv_cmd_err_int_set: SLV_CMD_ERR_INT_SET

        /// The software set bit for SPI_MST_RX_AFIFO_WFULL_ERR_INT interrupt.
        @WriteOnly(bits: 17..<18)
        public var mst_rx_afifo_wfull_err_int_set: MST_RX_AFIFO_WFULL_ERR_INT_SET

        /// The software set bit for SPI_MST_TX_AFIFO_REMPTY_ERR_INT interrupt.
        @WriteOnly(bits: 18..<19)
        public var mst_tx_afifo_rempty_err_int_set: MST_TX_AFIFO_REMPTY_ERR_INT_SET

        /// The software set bit for SPI_APP2_INT interrupt.
        @WriteOnly(bits: 19..<20)
        public var app2_int_set: APP2_INT_SET

        /// The software set bit for SPI_APP1_INT interrupt.
        @WriteOnly(bits: 20..<21)
        public var app1_int_set: APP1_INT_SET
    }

    /// SPI CPU-controlled buffer%s
    @Register(bitWidth: 32)
    public struct W {
        /// data buffer
        @ReadWrite(bits: 0..<32)
        public var buf: BUF
    }

    /// SPI slave control register
    @Register(bitWidth: 32)
    public struct SLAVE {
        /// SPI clock mode bits. 0: SPI clock is off when CS inactive 1: SPI clock is delayed one cycle after CS inactive 2: SPI clock is delayed two cycles after CS inactive 3: SPI clock is alwasy on. Can be configured in CONF state.
        @ReadWrite(bits: 0..<2)
        public var clk_mode: CLK_MODE

        /// {CPOL, CPHA},1: support spi clk mode 1 and 3, first edge output data B[0]/B[7]. 0: support spi clk mode 0 and 2, first edge output data B[1]/B[6].
        @ReadWrite(bits: 2..<3)
        public var clk_mode_13: CLK_MODE_13

        /// It saves half a cycle when tsck is the same as rsck. 1: output data at rsck posedge 0: output data at tsck posedge
        @ReadWrite(bits: 3..<4)
        public var rsck_data_out: RSCK_DATA_OUT

        /// 1: SPI_SLV_DATA_BITLEN stores data bit length of master-read-slave data length in DMA controlled mode(Rd_DMA). 0: others
        @ReadWrite(bits: 8..<9)
        public var slv_rddma_bitlen_en: SLV_RDDMA_BITLEN_EN

        /// 1: SPI_SLV_DATA_BITLEN stores data bit length of master-write-to-slave data length in DMA controlled mode(Wr_DMA). 0: others
        @ReadWrite(bits: 9..<10)
        public var slv_wrdma_bitlen_en: SLV_WRDMA_BITLEN_EN

        /// 1: SPI_SLV_DATA_BITLEN stores data bit length of master-read-slave data length in CPU controlled mode(Rd_BUF). 0: others
        @ReadWrite(bits: 10..<11)
        public var slv_rdbuf_bitlen_en: SLV_RDBUF_BITLEN_EN

        /// 1: SPI_SLV_DATA_BITLEN stores data bit length of master-write-to-slave data length in CPU controlled mode(Wr_BUF). 0: others
        @ReadWrite(bits: 11..<12)
        public var slv_wrbuf_bitlen_en: SLV_WRBUF_BITLEN_EN

        /// The magic value of BM table in master DMA seg-trans.
        @ReadWrite(bits: 22..<26)
        public var dma_seg_magic_value: DMA_SEG_MAGIC_VALUE

        /// Set SPI work mode. 1: slave mode 0: master mode.
        @ReadWrite(bits: 26..<27)
        public var mode: MODE

        /// Software reset enable, reset the spi clock line cs line and data lines. Can be configured in CONF state.
        @WriteOnly(bits: 27..<28)
        public var soft_reset: SOFT_RESET

        /// 1: Enable the DMA CONF phase of current seg-trans operation, which means seg-trans will start. 0: This is not seg-trans mode.
        @ReadWrite(bits: 28..<29)
        public var usr_conf: USR_CONF

        /// In master full-duplex mode, 1: GP-SPI will wait DMA TX data is ready before starting SPI transfer. 0: GP-SPI does not wait DMA TX data before starting SPI transfer.
        @ReadWrite(bits: 29..<30)
        public var mst_fd_wait_dma_tx_data: MST_FD_WAIT_DMA_TX_DATA
    }

    /// SPI slave control register 1
    @Register(bitWidth: 32)
    public struct SLAVE1 {
        /// The transferred data bit length in SPI slave FD and HD mode.
        @ReadWrite(bits: 0..<18)
        public var slv_data_bitlen: SLV_DATA_BITLEN

        /// In the slave mode it is the value of command.
        @ReadWrite(bits: 18..<26)
        public var slv_last_command: SLV_LAST_COMMAND

        /// In the slave mode it is the value of address.
        @ReadWrite(bits: 26..<32)
        public var slv_last_addr: SLV_LAST_ADDR
    }

    /// SPI module clock and register clock control
    @Register(bitWidth: 32)
    public struct CLK_GATE {
        /// Set this bit to enable clk gate
        @ReadWrite(bits: 0..<1)
        public var clk_en: CLK_EN

        /// Set this bit to power on the SPI module clock.
        @ReadWrite(bits: 1..<2)
        public var mst_clk_active: MST_CLK_ACTIVE

        /// This bit is used to select SPI module clock source in master mode. 1: PLL_CLK_80M. 0: XTAL CLK.
        @ReadWrite(bits: 2..<3)
        public var mst_clk_sel: MST_CLK_SEL
    }

    /// Version control
    @Register(bitWidth: 32)
    public struct DATE {
        /// SPI register version.
        @ReadWrite(bits: 0..<28)
        public var date_field: DATE_FIELD
    }
}
