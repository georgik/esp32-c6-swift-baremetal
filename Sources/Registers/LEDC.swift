// Generated by svd2swift.

import MMIO

/// LED Control PWM (Pulse Width Modulation)
@RegisterBlock
public struct LEDC {
    /// Configuration register 0 for channel %s
    @RegisterBlock(offset: 0x0, stride: 0x14, count: 6)
    public var ch_conf0: RegisterArray<CH_CONF0>

    /// High point register for channel %s
    @RegisterBlock(offset: 0x4, stride: 0x14, count: 6)
    public var ch_hpoint: RegisterArray<CH_HPOINT>

    /// Initial duty cycle for channel %s
    @RegisterBlock(offset: 0x8, stride: 0x14, count: 6)
    public var ch_duty: RegisterArray<CH_DUTY>

    /// Configuration register 1 for channel %s
    @RegisterBlock(offset: 0xc, stride: 0x14, count: 6)
    public var ch_conf1: RegisterArray<CH_CONF1>

    /// Current duty cycle for channel %s
    @RegisterBlock(offset: 0x10, stride: 0x14, count: 6)
    public var ch_duty_r: RegisterArray<CH_DUTY_R>

    /// Timer %s configuration
    @RegisterBlock(offset: 0xa0, stride: 0x8, count: 4)
    public var timer_conf: RegisterArray<TIMER_CONF>

    /// Timer %s current counter value
    @RegisterBlock(offset: 0xa4, stride: 0x8, count: 4)
    public var timer_value: RegisterArray<TIMER_VALUE>

    /// Raw interrupt status
    @RegisterBlock(offset: 0xc0)
    public var int_raw: Register<INT_RAW>

    /// Masked interrupt status
    @RegisterBlock(offset: 0xc4)
    public var int_st: Register<INT_ST>

    /// Interrupt enable bits
    @RegisterBlock(offset: 0xc8)
    public var int_ena: Register<INT_ENA>

    /// Interrupt clear bits
    @RegisterBlock(offset: 0xcc)
    public var int_clr: Register<INT_CLR>

    /// Ledc ch%s gamma ram write register.
    @RegisterBlock(offset: 0x100, stride: 0x10, count: 6)
    public var ch_gamma_wr: RegisterArray<CH_GAMMA_WR>

    /// Ledc ch%s gamma ram write address register.
    @RegisterBlock(offset: 0x104, stride: 0x10, count: 6)
    public var ch_gamma_wr_addr: RegisterArray<CH_GAMMA_WR_ADDR>

    /// Ledc ch%s gamma ram read address register.
    @RegisterBlock(offset: 0x108, stride: 0x10, count: 6)
    public var ch_gamma_rd_addr: RegisterArray<CH_GAMMA_RD_ADDR>

    /// Ledc ch%s gamma ram read data register.
    @RegisterBlock(offset: 0x10c, stride: 0x10, count: 6)
    public var ch_gamma_rd_data: RegisterArray<CH_GAMMA_RD_DATA>

    /// Ledc ch%s gamma config register.
    @RegisterBlock(offset: 0x180, stride: 0x4, count: 6)
    public var ch_gamma_conf: RegisterArray<CH_GAMMA_CONF>

    /// Ledc event task enable bit register0.
    @RegisterBlock(offset: 0x1a0)
    public var evt_task_en0: Register<EVT_TASK_EN0>

    /// Ledc event task enable bit register1.
    @RegisterBlock(offset: 0x1a4)
    public var evt_task_en1: Register<EVT_TASK_EN1>

    /// Ledc event task enable bit register2.
    @RegisterBlock(offset: 0x1a8)
    public var evt_task_en2: Register<EVT_TASK_EN2>

    /// Ledc timer%s compare value register.
    @RegisterBlock(offset: 0x1b0, stride: 0x4, count: 4)
    public var timer_cmp: RegisterArray<TIMER_CMP>

    /// Ledc timer%s count value capture register.
    @RegisterBlock(offset: 0x1c0, stride: 0x4, count: 4)
    public var timer_cnt_cap: RegisterArray<TIMER_CNT_CAP>

    /// Global ledc configuration register
    @RegisterBlock(offset: 0x1f0)
    public var conf: Register<CONF>

    /// Version control register
    @RegisterBlock(offset: 0x1fc)
    public var date: Register<DATE>
}

extension LEDC {
    /// Configuration register 0 for channel %s
    @Register(bitWidth: 32)
    public struct CH_CONF0 {
        /// 0: select timer0, 1: select timer1, 2: select timer2, 3: select timer3
        @ReadWrite(bits: 0..<2)
        public var timer_sel_ch: TIMER_SEL_CH

        /// Set this bit to enable signal output on channel %s.
        @ReadWrite(bits: 2..<3)
        public var sig_out_en_ch: SIG_OUT_EN_CH

        /// This bit is used to control the output value when channel %s is inactive (when LEDC_SIG_OUT_EN_CH%s is 0).
        @ReadWrite(bits: 3..<4)
        public var idle_lv_ch: IDLE_LV_CH

        /// This bit is used to update LEDC_HPOINT_CH%s, LEDC_DUTY_START_CH%s, LEDC_SIG_OUT_EN_CH%s, LEDC_TIMER_SEL_CH%s, LEDC_DUTY_NUM_CH%s, LEDC_DUTY_CYCLE_CH%s, LEDC_DUTY_SCALE_CH%s, LEDC_DUTY_INC_CH%s, and LEDC_OVF_CNT_EN_CH%s fields for channel %s, and will be automatically cleared by hardware.
        @WriteOnly(bits: 4..<5)
        public var para_up_ch: PARA_UP_CH

        /// The LEDC_OVF_CNT_CH%s_INT interrupt will be triggered when channel %s overflows for (LEDC_OVF_NUM_CH%s + 1) times.
        @ReadWrite(bits: 5..<15)
        public var ovf_num_ch: OVF_NUM_CH

        /// This bit is used to enable the ovf_cnt of channel %s.
        @ReadWrite(bits: 15..<16)
        public var ovf_cnt_en_ch: OVF_CNT_EN_CH

        /// Set this bit to reset the ovf_cnt of channel %s.
        @WriteOnly(bits: 16..<17)
        public var ovf_cnt_reset_ch: OVF_CNT_RESET_CH
    }

    /// High point register for channel %s
    @Register(bitWidth: 32)
    public struct CH_HPOINT {
        /// The output value changes to high when the selected timers has reached the value specified by this register.
        @ReadWrite(bits: 0..<20)
        public var hpoint_ch: HPOINT_CH
    }

    /// Initial duty cycle for channel %s
    @Register(bitWidth: 32)
    public struct CH_DUTY {
        /// The output value turns to low when the selected timers has reached the Lpoint.
        @ReadWrite(bits: 0..<25)
        public var duty_ch: DUTY_CH
    }

    /// Configuration register 1 for channel %s
    @Register(bitWidth: 32)
    public struct CH_CONF1 {
        /// Other configured fields in LEDC_CH%s_CONF1_REG will start to take effect when this bit is set to 1.
        @ReadWrite(bits: 31..<32)
        public var duty_start_ch: DUTY_START_CH
    }

    /// Current duty cycle for channel %s
    @Register(bitWidth: 32)
    public struct CH_DUTY_R {
        /// This register stores the current duty of output signal on channel %s.
        @ReadOnly(bits: 0..<25)
        public var duty_ch_r: DUTY_CH_R
    }

    /// Timer %s configuration
    @Register(bitWidth: 32)
    public struct TIMER_CONF {
        /// This register is used to control the range of the counter in timer %s.
        @ReadWrite(bits: 0..<5)
        public var timer_duty_res: TIMER_DUTY_RES

        /// The least significant eight bits represent the fractional part.
        @ReadWrite(bits: 5..<23)
        public var clk_div_timer: CLK_DIV_TIMER

        /// This bit is used to suspend the counter in timer %s.
        @ReadWrite(bits: 23..<24)
        public var timer_pause: TIMER_PAUSE

        /// This bit is used to reset timer %s. The counter will show 0 after reset.
        @ReadWrite(bits: 24..<25)
        public var timer_rst: TIMER_RST

        /// 1'h0: SLOW_CLK 1'h1: REF_TICK
        @ReadWrite(bits: 25..<26)
        public var tick_sel_timer: TICK_SEL_TIMER

        /// Set this bit to update LEDC_CLK_DIV_TIMER%s and LEDC_TIMER%s_DUTY_RES.
        @WriteOnly(bits: 26..<27)
        public var timer_para_up: TIMER_PARA_UP
    }

    /// Timer %s current counter value
    @Register(bitWidth: 32)
    public struct TIMER_VALUE {
        /// This register stores the current counter value of timer %s.
        @ReadOnly(bits: 0..<20)
        public var timer_cnt: TIMER_CNT
    }

    /// Raw interrupt status
    @Register(bitWidth: 32)
    public struct INT_RAW {
        /// Triggered when the timer0 has reached its maximum counter value.
        @ReadWrite(bits: 0..<1)
        public var timer0_ovf_int_raw: TIMER0_OVF_INT_RAW

        /// Triggered when the timer1 has reached its maximum counter value.
        @ReadWrite(bits: 1..<2)
        public var timer1_ovf_int_raw: TIMER1_OVF_INT_RAW

        /// Triggered when the timer2 has reached its maximum counter value.
        @ReadWrite(bits: 2..<3)
        public var timer2_ovf_int_raw: TIMER2_OVF_INT_RAW

        /// Triggered when the timer3 has reached its maximum counter value.
        @ReadWrite(bits: 3..<4)
        public var timer3_ovf_int_raw: TIMER3_OVF_INT_RAW

        /// Interrupt raw bit for channel 0. Triggered when the gradual change of duty has finished.
        @ReadWrite(bits: 4..<5)
        public var duty_chng_end_ch0_int_raw: DUTY_CHNG_END_CH0_INT_RAW

        /// Interrupt raw bit for channel 1. Triggered when the gradual change of duty has finished.
        @ReadWrite(bits: 5..<6)
        public var duty_chng_end_ch1_int_raw: DUTY_CHNG_END_CH1_INT_RAW

        /// Interrupt raw bit for channel 2. Triggered when the gradual change of duty has finished.
        @ReadWrite(bits: 6..<7)
        public var duty_chng_end_ch2_int_raw: DUTY_CHNG_END_CH2_INT_RAW

        /// Interrupt raw bit for channel 3. Triggered when the gradual change of duty has finished.
        @ReadWrite(bits: 7..<8)
        public var duty_chng_end_ch3_int_raw: DUTY_CHNG_END_CH3_INT_RAW

        /// Interrupt raw bit for channel 4. Triggered when the gradual change of duty has finished.
        @ReadWrite(bits: 8..<9)
        public var duty_chng_end_ch4_int_raw: DUTY_CHNG_END_CH4_INT_RAW

        /// Interrupt raw bit for channel 5. Triggered when the gradual change of duty has finished.
        @ReadWrite(bits: 9..<10)
        public var duty_chng_end_ch5_int_raw: DUTY_CHNG_END_CH5_INT_RAW

        /// Interrupt raw bit for channel 0. Triggered when the ovf_cnt has reached the value specified by LEDC_OVF_NUM_CH0.
        @ReadWrite(bits: 12..<13)
        public var ovf_cnt_ch0_int_raw: OVF_CNT_CH0_INT_RAW

        /// Interrupt raw bit for channel 1. Triggered when the ovf_cnt has reached the value specified by LEDC_OVF_NUM_CH1.
        @ReadWrite(bits: 13..<14)
        public var ovf_cnt_ch1_int_raw: OVF_CNT_CH1_INT_RAW

        /// Interrupt raw bit for channel 2. Triggered when the ovf_cnt has reached the value specified by LEDC_OVF_NUM_CH2.
        @ReadWrite(bits: 14..<15)
        public var ovf_cnt_ch2_int_raw: OVF_CNT_CH2_INT_RAW

        /// Interrupt raw bit for channel 3. Triggered when the ovf_cnt has reached the value specified by LEDC_OVF_NUM_CH3.
        @ReadWrite(bits: 15..<16)
        public var ovf_cnt_ch3_int_raw: OVF_CNT_CH3_INT_RAW

        /// Interrupt raw bit for channel 4. Triggered when the ovf_cnt has reached the value specified by LEDC_OVF_NUM_CH4.
        @ReadWrite(bits: 16..<17)
        public var ovf_cnt_ch4_int_raw: OVF_CNT_CH4_INT_RAW

        /// Interrupt raw bit for channel 5. Triggered when the ovf_cnt has reached the value specified by LEDC_OVF_NUM_CH5.
        @ReadWrite(bits: 17..<18)
        public var ovf_cnt_ch5_int_raw: OVF_CNT_CH5_INT_RAW
    }

    /// Masked interrupt status
    @Register(bitWidth: 32)
    public struct INT_ST {
        /// This is the masked interrupt status bit for the LEDC_TIMER0_OVF_INT interrupt when LEDC_TIMER0_OVF_INT_ENA is set to 1.
        @ReadOnly(bits: 0..<1)
        public var timer0_ovf_int_st: TIMER0_OVF_INT_ST

        /// This is the masked interrupt status bit for the LEDC_TIMER1_OVF_INT interrupt when LEDC_TIMER1_OVF_INT_ENA is set to 1.
        @ReadOnly(bits: 1..<2)
        public var timer1_ovf_int_st: TIMER1_OVF_INT_ST

        /// This is the masked interrupt status bit for the LEDC_TIMER2_OVF_INT interrupt when LEDC_TIMER2_OVF_INT_ENA is set to 1.
        @ReadOnly(bits: 2..<3)
        public var timer2_ovf_int_st: TIMER2_OVF_INT_ST

        /// This is the masked interrupt status bit for the LEDC_TIMER3_OVF_INT interrupt when LEDC_TIMER3_OVF_INT_ENA is set to 1.
        @ReadOnly(bits: 3..<4)
        public var timer3_ovf_int_st: TIMER3_OVF_INT_ST

        /// This is the masked interrupt status bit for the LEDC_DUTY_CHNG_END_CH0_INT interrupt when LEDC_DUTY_CHNG_END_CH0_INT_ENA is set to 1.
        @ReadOnly(bits: 4..<5)
        public var duty_chng_end_ch0_int_st: DUTY_CHNG_END_CH0_INT_ST

        /// This is the masked interrupt status bit for the LEDC_DUTY_CHNG_END_CH1_INT interrupt when LEDC_DUTY_CHNG_END_CH1_INT_ENA is set to 1.
        @ReadOnly(bits: 5..<6)
        public var duty_chng_end_ch1_int_st: DUTY_CHNG_END_CH1_INT_ST

        /// This is the masked interrupt status bit for the LEDC_DUTY_CHNG_END_CH2_INT interrupt when LEDC_DUTY_CHNG_END_CH2_INT_ENA is set to 1.
        @ReadOnly(bits: 6..<7)
        public var duty_chng_end_ch2_int_st: DUTY_CHNG_END_CH2_INT_ST

        /// This is the masked interrupt status bit for the LEDC_DUTY_CHNG_END_CH3_INT interrupt when LEDC_DUTY_CHNG_END_CH3_INT_ENA is set to 1.
        @ReadOnly(bits: 7..<8)
        public var duty_chng_end_ch3_int_st: DUTY_CHNG_END_CH3_INT_ST

        /// This is the masked interrupt status bit for the LEDC_DUTY_CHNG_END_CH4_INT interrupt when LEDC_DUTY_CHNG_END_CH4_INT_ENA is set to 1.
        @ReadOnly(bits: 8..<9)
        public var duty_chng_end_ch4_int_st: DUTY_CHNG_END_CH4_INT_ST

        /// This is the masked interrupt status bit for the LEDC_DUTY_CHNG_END_CH5_INT interrupt when LEDC_DUTY_CHNG_END_CH5_INT_ENA is set to 1.
        @ReadOnly(bits: 9..<10)
        public var duty_chng_end_ch5_int_st: DUTY_CHNG_END_CH5_INT_ST

        /// This is the masked interrupt status bit for the LEDC_OVF_CNT_CH0_INT interrupt when LEDC_OVF_CNT_CH0_INT_ENA is set to 1.
        @ReadOnly(bits: 12..<13)
        public var ovf_cnt_ch0_int_st: OVF_CNT_CH0_INT_ST

        /// This is the masked interrupt status bit for the LEDC_OVF_CNT_CH1_INT interrupt when LEDC_OVF_CNT_CH1_INT_ENA is set to 1.
        @ReadOnly(bits: 13..<14)
        public var ovf_cnt_ch1_int_st: OVF_CNT_CH1_INT_ST

        /// This is the masked interrupt status bit for the LEDC_OVF_CNT_CH2_INT interrupt when LEDC_OVF_CNT_CH2_INT_ENA is set to 1.
        @ReadOnly(bits: 14..<15)
        public var ovf_cnt_ch2_int_st: OVF_CNT_CH2_INT_ST

        /// This is the masked interrupt status bit for the LEDC_OVF_CNT_CH3_INT interrupt when LEDC_OVF_CNT_CH3_INT_ENA is set to 1.
        @ReadOnly(bits: 15..<16)
        public var ovf_cnt_ch3_int_st: OVF_CNT_CH3_INT_ST

        /// This is the masked interrupt status bit for the LEDC_OVF_CNT_CH4_INT interrupt when LEDC_OVF_CNT_CH4_INT_ENA is set to 1.
        @ReadOnly(bits: 16..<17)
        public var ovf_cnt_ch4_int_st: OVF_CNT_CH4_INT_ST

        /// This is the masked interrupt status bit for the LEDC_OVF_CNT_CH5_INT interrupt when LEDC_OVF_CNT_CH5_INT_ENA is set to 1.
        @ReadOnly(bits: 17..<18)
        public var ovf_cnt_ch5_int_st: OVF_CNT_CH5_INT_ST
    }

    /// Interrupt enable bits
    @Register(bitWidth: 32)
    public struct INT_ENA {
        /// The interrupt enable bit for the LEDC_TIMER0_OVF_INT interrupt.
        @ReadWrite(bits: 0..<1)
        public var timer0_ovf_int_ena: TIMER0_OVF_INT_ENA

        /// The interrupt enable bit for the LEDC_TIMER1_OVF_INT interrupt.
        @ReadWrite(bits: 1..<2)
        public var timer1_ovf_int_ena: TIMER1_OVF_INT_ENA

        /// The interrupt enable bit for the LEDC_TIMER2_OVF_INT interrupt.
        @ReadWrite(bits: 2..<3)
        public var timer2_ovf_int_ena: TIMER2_OVF_INT_ENA

        /// The interrupt enable bit for the LEDC_TIMER3_OVF_INT interrupt.
        @ReadWrite(bits: 3..<4)
        public var timer3_ovf_int_ena: TIMER3_OVF_INT_ENA

        /// The interrupt enable bit for the LEDC_DUTY_CHNG_END_CH0_INT interrupt.
        @ReadWrite(bits: 4..<5)
        public var duty_chng_end_ch0_int_ena: DUTY_CHNG_END_CH0_INT_ENA

        /// The interrupt enable bit for the LEDC_DUTY_CHNG_END_CH1_INT interrupt.
        @ReadWrite(bits: 5..<6)
        public var duty_chng_end_ch1_int_ena: DUTY_CHNG_END_CH1_INT_ENA

        /// The interrupt enable bit for the LEDC_DUTY_CHNG_END_CH2_INT interrupt.
        @ReadWrite(bits: 6..<7)
        public var duty_chng_end_ch2_int_ena: DUTY_CHNG_END_CH2_INT_ENA

        /// The interrupt enable bit for the LEDC_DUTY_CHNG_END_CH3_INT interrupt.
        @ReadWrite(bits: 7..<8)
        public var duty_chng_end_ch3_int_ena: DUTY_CHNG_END_CH3_INT_ENA

        /// The interrupt enable bit for the LEDC_DUTY_CHNG_END_CH4_INT interrupt.
        @ReadWrite(bits: 8..<9)
        public var duty_chng_end_ch4_int_ena: DUTY_CHNG_END_CH4_INT_ENA

        /// The interrupt enable bit for the LEDC_DUTY_CHNG_END_CH5_INT interrupt.
        @ReadWrite(bits: 9..<10)
        public var duty_chng_end_ch5_int_ena: DUTY_CHNG_END_CH5_INT_ENA

        /// The interrupt enable bit for the LEDC_OVF_CNT_CH0_INT interrupt.
        @ReadWrite(bits: 12..<13)
        public var ovf_cnt_ch0_int_ena: OVF_CNT_CH0_INT_ENA

        /// The interrupt enable bit for the LEDC_OVF_CNT_CH1_INT interrupt.
        @ReadWrite(bits: 13..<14)
        public var ovf_cnt_ch1_int_ena: OVF_CNT_CH1_INT_ENA

        /// The interrupt enable bit for the LEDC_OVF_CNT_CH2_INT interrupt.
        @ReadWrite(bits: 14..<15)
        public var ovf_cnt_ch2_int_ena: OVF_CNT_CH2_INT_ENA

        /// The interrupt enable bit for the LEDC_OVF_CNT_CH3_INT interrupt.
        @ReadWrite(bits: 15..<16)
        public var ovf_cnt_ch3_int_ena: OVF_CNT_CH3_INT_ENA

        /// The interrupt enable bit for the LEDC_OVF_CNT_CH4_INT interrupt.
        @ReadWrite(bits: 16..<17)
        public var ovf_cnt_ch4_int_ena: OVF_CNT_CH4_INT_ENA

        /// The interrupt enable bit for the LEDC_OVF_CNT_CH5_INT interrupt.
        @ReadWrite(bits: 17..<18)
        public var ovf_cnt_ch5_int_ena: OVF_CNT_CH5_INT_ENA
    }

    /// Interrupt clear bits
    @Register(bitWidth: 32)
    public struct INT_CLR {
        /// Set this bit to clear the LEDC_TIMER0_OVF_INT interrupt.
        @WriteOnly(bits: 0..<1)
        public var timer0_ovf_int_clr: TIMER0_OVF_INT_CLR

        /// Set this bit to clear the LEDC_TIMER1_OVF_INT interrupt.
        @WriteOnly(bits: 1..<2)
        public var timer1_ovf_int_clr: TIMER1_OVF_INT_CLR

        /// Set this bit to clear the LEDC_TIMER2_OVF_INT interrupt.
        @WriteOnly(bits: 2..<3)
        public var timer2_ovf_int_clr: TIMER2_OVF_INT_CLR

        /// Set this bit to clear the LEDC_TIMER3_OVF_INT interrupt.
        @WriteOnly(bits: 3..<4)
        public var timer3_ovf_int_clr: TIMER3_OVF_INT_CLR

        /// Set this bit to clear the LEDC_DUTY_CHNG_END_CH0_INT interrupt.
        @WriteOnly(bits: 4..<5)
        public var duty_chng_end_ch0_int_clr: DUTY_CHNG_END_CH0_INT_CLR

        /// Set this bit to clear the LEDC_DUTY_CHNG_END_CH1_INT interrupt.
        @WriteOnly(bits: 5..<6)
        public var duty_chng_end_ch1_int_clr: DUTY_CHNG_END_CH1_INT_CLR

        /// Set this bit to clear the LEDC_DUTY_CHNG_END_CH2_INT interrupt.
        @WriteOnly(bits: 6..<7)
        public var duty_chng_end_ch2_int_clr: DUTY_CHNG_END_CH2_INT_CLR

        /// Set this bit to clear the LEDC_DUTY_CHNG_END_CH3_INT interrupt.
        @WriteOnly(bits: 7..<8)
        public var duty_chng_end_ch3_int_clr: DUTY_CHNG_END_CH3_INT_CLR

        /// Set this bit to clear the LEDC_DUTY_CHNG_END_CH4_INT interrupt.
        @WriteOnly(bits: 8..<9)
        public var duty_chng_end_ch4_int_clr: DUTY_CHNG_END_CH4_INT_CLR

        /// Set this bit to clear the LEDC_DUTY_CHNG_END_CH5_INT interrupt.
        @WriteOnly(bits: 9..<10)
        public var duty_chng_end_ch5_int_clr: DUTY_CHNG_END_CH5_INT_CLR

        /// Set this bit to clear the LEDC_OVF_CNT_CH0_INT interrupt.
        @WriteOnly(bits: 12..<13)
        public var ovf_cnt_ch0_int_clr: OVF_CNT_CH0_INT_CLR

        /// Set this bit to clear the LEDC_OVF_CNT_CH1_INT interrupt.
        @WriteOnly(bits: 13..<14)
        public var ovf_cnt_ch1_int_clr: OVF_CNT_CH1_INT_CLR

        /// Set this bit to clear the LEDC_OVF_CNT_CH2_INT interrupt.
        @WriteOnly(bits: 14..<15)
        public var ovf_cnt_ch2_int_clr: OVF_CNT_CH2_INT_CLR

        /// Set this bit to clear the LEDC_OVF_CNT_CH3_INT interrupt.
        @WriteOnly(bits: 15..<16)
        public var ovf_cnt_ch3_int_clr: OVF_CNT_CH3_INT_CLR

        /// Set this bit to clear the LEDC_OVF_CNT_CH4_INT interrupt.
        @WriteOnly(bits: 16..<17)
        public var ovf_cnt_ch4_int_clr: OVF_CNT_CH4_INT_CLR

        /// Set this bit to clear the LEDC_OVF_CNT_CH5_INT interrupt.
        @WriteOnly(bits: 17..<18)
        public var ovf_cnt_ch5_int_clr: OVF_CNT_CH5_INT_CLR
    }

    /// Ledc ch%s gamma ram write register.
    @Register(bitWidth: 32)
    public struct CH_GAMMA_WR {
        /// 1: Increase 0: Decrease.
        @ReadWrite(bits: 0..<1)
        public var ch_gamma_duty_inc: CH_GAMMA_DUTY_INC

        /// Ledc ch%s gamma duty cycle of current ram write address.The duty will change every LEDC_CH%s_GAMMA_DUTY_CYCLE on channel %s.
        @ReadWrite(bits: 1..<11)
        public var ch_gamma_duty_cycle: CH_GAMMA_DUTY_CYCLE

        /// Ledc ch%s gamma scale of current ram write address.This register is used to configure the changing step scale of duty on channel %s.
        @ReadWrite(bits: 11..<21)
        public var ch_gamma_scale: CH_GAMMA_SCALE

        /// Ledc ch%s gamma duty num of current ram write address.This register is used to control the number of times the duty cycle will be changed.
        @ReadWrite(bits: 21..<31)
        public var ch_gamma_duty_num: CH_GAMMA_DUTY_NUM
    }

    /// Ledc ch%s gamma ram write address register.
    @Register(bitWidth: 32)
    public struct CH_GAMMA_WR_ADDR {
        /// Ledc ch%s gamma ram write address.
        @ReadWrite(bits: 0..<4)
        public var ch_gamma_wr_addr_field: CH_GAMMA_WR_ADDR_FIELD
    }

    /// Ledc ch%s gamma ram read address register.
    @Register(bitWidth: 32)
    public struct CH_GAMMA_RD_ADDR {
        /// Ledc ch%s gamma ram read address.
        @ReadWrite(bits: 0..<4)
        public var ch_gamma_rd_addr_field: CH_GAMMA_RD_ADDR_FIELD
    }

    /// Ledc ch%s gamma ram read data register.
    @Register(bitWidth: 32)
    public struct CH_GAMMA_RD_DATA {
        /// Ledc ch%s gamma ram read data.
        @ReadOnly(bits: 0..<31)
        public var ch_gamma_rd_data_field: CH_GAMMA_RD_DATA_FIELD
    }

    /// Ledc ch%s gamma config register.
    @Register(bitWidth: 32)
    public struct CH_GAMMA_CONF {
        /// Ledc ch%s gamma entry num.
        @ReadWrite(bits: 0..<5)
        public var ch_gamma_entry_num: CH_GAMMA_ENTRY_NUM

        /// Ledc ch%s gamma pause, write 1 to pause.
        @WriteOnly(bits: 5..<6)
        public var ch_gamma_pause: CH_GAMMA_PAUSE

        /// Ledc ch%s gamma resume, write 1 to resume.
        @WriteOnly(bits: 6..<7)
        public var ch_gamma_resume: CH_GAMMA_RESUME
    }

    /// Ledc event task enable bit register0.
    @Register(bitWidth: 32)
    public struct EVT_TASK_EN0 {
        /// Ledc ch0 duty change end event enable register, write 1 to enable this event.
        @ReadWrite(bits: 0..<1)
        public var evt_duty_chng_end_ch0_en: EVT_DUTY_CHNG_END_CH0_EN

        /// Ledc ch1 duty change end event enable register, write 1 to enable this event.
        @ReadWrite(bits: 1..<2)
        public var evt_duty_chng_end_ch1_en: EVT_DUTY_CHNG_END_CH1_EN

        /// Ledc ch2 duty change end event enable register, write 1 to enable this event.
        @ReadWrite(bits: 2..<3)
        public var evt_duty_chng_end_ch2_en: EVT_DUTY_CHNG_END_CH2_EN

        /// Ledc ch3 duty change end event enable register, write 1 to enable this event.
        @ReadWrite(bits: 3..<4)
        public var evt_duty_chng_end_ch3_en: EVT_DUTY_CHNG_END_CH3_EN

        /// Ledc ch4 duty change end event enable register, write 1 to enable this event.
        @ReadWrite(bits: 4..<5)
        public var evt_duty_chng_end_ch4_en: EVT_DUTY_CHNG_END_CH4_EN

        /// Ledc ch5 duty change end event enable register, write 1 to enable this event.
        @ReadWrite(bits: 5..<6)
        public var evt_duty_chng_end_ch5_en: EVT_DUTY_CHNG_END_CH5_EN

        /// Ledc ch0 overflow count pulse event enable register, write 1 to enable this event.
        @ReadWrite(bits: 8..<9)
        public var evt_ovf_cnt_pls_ch0_en: EVT_OVF_CNT_PLS_CH0_EN

        /// Ledc ch1 overflow count pulse event enable register, write 1 to enable this event.
        @ReadWrite(bits: 9..<10)
        public var evt_ovf_cnt_pls_ch1_en: EVT_OVF_CNT_PLS_CH1_EN

        /// Ledc ch2 overflow count pulse event enable register, write 1 to enable this event.
        @ReadWrite(bits: 10..<11)
        public var evt_ovf_cnt_pls_ch2_en: EVT_OVF_CNT_PLS_CH2_EN

        /// Ledc ch3 overflow count pulse event enable register, write 1 to enable this event.
        @ReadWrite(bits: 11..<12)
        public var evt_ovf_cnt_pls_ch3_en: EVT_OVF_CNT_PLS_CH3_EN

        /// Ledc ch4 overflow count pulse event enable register, write 1 to enable this event.
        @ReadWrite(bits: 12..<13)
        public var evt_ovf_cnt_pls_ch4_en: EVT_OVF_CNT_PLS_CH4_EN

        /// Ledc ch5 overflow count pulse event enable register, write 1 to enable this event.
        @ReadWrite(bits: 13..<14)
        public var evt_ovf_cnt_pls_ch5_en: EVT_OVF_CNT_PLS_CH5_EN

        /// Ledc timer0 overflow event enable register, write 1 to enable this event.
        @ReadWrite(bits: 16..<17)
        public var evt_time_ovf_timer0_en: EVT_TIME_OVF_TIMER0_EN

        /// Ledc timer1 overflow event enable register, write 1 to enable this event.
        @ReadWrite(bits: 17..<18)
        public var evt_time_ovf_timer1_en: EVT_TIME_OVF_TIMER1_EN

        /// Ledc timer2 overflow event enable register, write 1 to enable this event.
        @ReadWrite(bits: 18..<19)
        public var evt_time_ovf_timer2_en: EVT_TIME_OVF_TIMER2_EN

        /// Ledc timer3 overflow event enable register, write 1 to enable this event.
        @ReadWrite(bits: 19..<20)
        public var evt_time_ovf_timer3_en: EVT_TIME_OVF_TIMER3_EN

        /// Ledc timer0 compare event enable register, write 1 to enable this event.
        @ReadWrite(bits: 20..<21)
        public var evt_time0_cmp_en: EVT_TIME0_CMP_EN

        /// Ledc timer1 compare event enable register, write 1 to enable this event.
        @ReadWrite(bits: 21..<22)
        public var evt_time1_cmp_en: EVT_TIME1_CMP_EN

        /// Ledc timer2 compare event enable register, write 1 to enable this event.
        @ReadWrite(bits: 22..<23)
        public var evt_time2_cmp_en: EVT_TIME2_CMP_EN

        /// Ledc timer3 compare event enable register, write 1 to enable this event.
        @ReadWrite(bits: 23..<24)
        public var evt_time3_cmp_en: EVT_TIME3_CMP_EN

        /// Ledc ch0 duty scale update task enable register, write 1 to enable this task.
        @ReadWrite(bits: 24..<25)
        public var task_duty_scale_update_ch0_en: TASK_DUTY_SCALE_UPDATE_CH0_EN

        /// Ledc ch1 duty scale update task enable register, write 1 to enable this task.
        @ReadWrite(bits: 25..<26)
        public var task_duty_scale_update_ch1_en: TASK_DUTY_SCALE_UPDATE_CH1_EN

        /// Ledc ch2 duty scale update task enable register, write 1 to enable this task.
        @ReadWrite(bits: 26..<27)
        public var task_duty_scale_update_ch2_en: TASK_DUTY_SCALE_UPDATE_CH2_EN

        /// Ledc ch3 duty scale update task enable register, write 1 to enable this task.
        @ReadWrite(bits: 27..<28)
        public var task_duty_scale_update_ch3_en: TASK_DUTY_SCALE_UPDATE_CH3_EN

        /// Ledc ch4 duty scale update task enable register, write 1 to enable this task.
        @ReadWrite(bits: 28..<29)
        public var task_duty_scale_update_ch4_en: TASK_DUTY_SCALE_UPDATE_CH4_EN

        /// Ledc ch5 duty scale update task enable register, write 1 to enable this task.
        @ReadWrite(bits: 29..<30)
        public var task_duty_scale_update_ch5_en: TASK_DUTY_SCALE_UPDATE_CH5_EN
    }

    /// Ledc event task enable bit register1.
    @Register(bitWidth: 32)
    public struct EVT_TASK_EN1 {
        /// Ledc timer0 res update task enable register, write 1 to enable this task.
        @ReadWrite(bits: 0..<1)
        public var task_timer0_res_update_en: TASK_TIMER0_RES_UPDATE_EN

        /// Ledc timer1 res update task enable register, write 1 to enable this task.
        @ReadWrite(bits: 1..<2)
        public var task_timer1_res_update_en: TASK_TIMER1_RES_UPDATE_EN

        /// Ledc timer2 res update task enable register, write 1 to enable this task.
        @ReadWrite(bits: 2..<3)
        public var task_timer2_res_update_en: TASK_TIMER2_RES_UPDATE_EN

        /// Ledc timer3 res update task enable register, write 1 to enable this task.
        @ReadWrite(bits: 3..<4)
        public var task_timer3_res_update_en: TASK_TIMER3_RES_UPDATE_EN

        /// Ledc timer0 capture task enable register, write 1 to enable this task.
        @ReadWrite(bits: 4..<5)
        public var task_timer0_cap_en: TASK_TIMER0_CAP_EN

        /// Ledc timer1 capture task enable register, write 1 to enable this task.
        @ReadWrite(bits: 5..<6)
        public var task_timer1_cap_en: TASK_TIMER1_CAP_EN

        /// Ledc timer2 capture task enable register, write 1 to enable this task.
        @ReadWrite(bits: 6..<7)
        public var task_timer2_cap_en: TASK_TIMER2_CAP_EN

        /// Ledc timer3 capture task enable register, write 1 to enable this task.
        @ReadWrite(bits: 7..<8)
        public var task_timer3_cap_en: TASK_TIMER3_CAP_EN

        /// Ledc ch0 signal out disable task enable register, write 1 to enable this task.
        @ReadWrite(bits: 8..<9)
        public var task_sig_out_dis_ch0_en: TASK_SIG_OUT_DIS_CH0_EN

        /// Ledc ch1 signal out disable task enable register, write 1 to enable this task.
        @ReadWrite(bits: 9..<10)
        public var task_sig_out_dis_ch1_en: TASK_SIG_OUT_DIS_CH1_EN

        /// Ledc ch2 signal out disable task enable register, write 1 to enable this task.
        @ReadWrite(bits: 10..<11)
        public var task_sig_out_dis_ch2_en: TASK_SIG_OUT_DIS_CH2_EN

        /// Ledc ch3 signal out disable task enable register, write 1 to enable this task.
        @ReadWrite(bits: 11..<12)
        public var task_sig_out_dis_ch3_en: TASK_SIG_OUT_DIS_CH3_EN

        /// Ledc ch4 signal out disable task enable register, write 1 to enable this task.
        @ReadWrite(bits: 12..<13)
        public var task_sig_out_dis_ch4_en: TASK_SIG_OUT_DIS_CH4_EN

        /// Ledc ch5 signal out disable task enable register, write 1 to enable this task.
        @ReadWrite(bits: 13..<14)
        public var task_sig_out_dis_ch5_en: TASK_SIG_OUT_DIS_CH5_EN

        /// Ledc ch0 overflow count reset task enable register, write 1 to enable this task.
        @ReadWrite(bits: 16..<17)
        public var task_ovf_cnt_rst_ch0_en: TASK_OVF_CNT_RST_CH0_EN

        /// Ledc ch1 overflow count reset task enable register, write 1 to enable this task.
        @ReadWrite(bits: 17..<18)
        public var task_ovf_cnt_rst_ch1_en: TASK_OVF_CNT_RST_CH1_EN

        /// Ledc ch2 overflow count reset task enable register, write 1 to enable this task.
        @ReadWrite(bits: 18..<19)
        public var task_ovf_cnt_rst_ch2_en: TASK_OVF_CNT_RST_CH2_EN

        /// Ledc ch3 overflow count reset task enable register, write 1 to enable this task.
        @ReadWrite(bits: 19..<20)
        public var task_ovf_cnt_rst_ch3_en: TASK_OVF_CNT_RST_CH3_EN

        /// Ledc ch4 overflow count reset task enable register, write 1 to enable this task.
        @ReadWrite(bits: 20..<21)
        public var task_ovf_cnt_rst_ch4_en: TASK_OVF_CNT_RST_CH4_EN

        /// Ledc ch5 overflow count reset task enable register, write 1 to enable this task.
        @ReadWrite(bits: 21..<22)
        public var task_ovf_cnt_rst_ch5_en: TASK_OVF_CNT_RST_CH5_EN

        /// Ledc timer0 reset task enable register, write 1 to enable this task.
        @ReadWrite(bits: 24..<25)
        public var task_timer0_rst_en: TASK_TIMER0_RST_EN

        /// Ledc timer1 reset task enable register, write 1 to enable this task.
        @ReadWrite(bits: 25..<26)
        public var task_timer1_rst_en: TASK_TIMER1_RST_EN

        /// Ledc timer2 reset task enable register, write 1 to enable this task.
        @ReadWrite(bits: 26..<27)
        public var task_timer2_rst_en: TASK_TIMER2_RST_EN

        /// Ledc timer3 reset task enable register, write 1 to enable this task.
        @ReadWrite(bits: 27..<28)
        public var task_timer3_rst_en: TASK_TIMER3_RST_EN

        /// Ledc timer0 pause resume task enable register, write 1 to enable this task.
        @ReadWrite(bits: 28..<29)
        public var task_timer0_pause_resume_en: TASK_TIMER0_PAUSE_RESUME_EN

        /// Ledc timer1 pause resume task enable register, write 1 to enable this task.
        @ReadWrite(bits: 29..<30)
        public var task_timer1_pause_resume_en: TASK_TIMER1_PAUSE_RESUME_EN

        /// Ledc timer2 pause resume task enable register, write 1 to enable this task.
        @ReadWrite(bits: 30..<31)
        public var task_timer2_pause_resume_en: TASK_TIMER2_PAUSE_RESUME_EN

        /// Ledc timer3 pause resume task enable register, write 1 to enable this task.
        @ReadWrite(bits: 31..<32)
        public var task_timer3_pause_resume_en: TASK_TIMER3_PAUSE_RESUME_EN
    }

    /// Ledc event task enable bit register2.
    @Register(bitWidth: 32)
    public struct EVT_TASK_EN2 {
        /// Ledc ch0 gamma restart task enable register, write 1 to enable this task.
        @ReadWrite(bits: 0..<1)
        public var task_gamma_restart_ch0_en: TASK_GAMMA_RESTART_CH0_EN

        /// Ledc ch1 gamma restart task enable register, write 1 to enable this task.
        @ReadWrite(bits: 1..<2)
        public var task_gamma_restart_ch1_en: TASK_GAMMA_RESTART_CH1_EN

        /// Ledc ch2 gamma restart task enable register, write 1 to enable this task.
        @ReadWrite(bits: 2..<3)
        public var task_gamma_restart_ch2_en: TASK_GAMMA_RESTART_CH2_EN

        /// Ledc ch3 gamma restart task enable register, write 1 to enable this task.
        @ReadWrite(bits: 3..<4)
        public var task_gamma_restart_ch3_en: TASK_GAMMA_RESTART_CH3_EN

        /// Ledc ch4 gamma restart task enable register, write 1 to enable this task.
        @ReadWrite(bits: 4..<5)
        public var task_gamma_restart_ch4_en: TASK_GAMMA_RESTART_CH4_EN

        /// Ledc ch5 gamma restart task enable register, write 1 to enable this task.
        @ReadWrite(bits: 5..<6)
        public var task_gamma_restart_ch5_en: TASK_GAMMA_RESTART_CH5_EN

        /// Ledc ch0 gamma pause task enable register, write 1 to enable this task.
        @ReadWrite(bits: 8..<9)
        public var task_gamma_pause_ch0_en: TASK_GAMMA_PAUSE_CH0_EN

        /// Ledc ch1 gamma pause task enable register, write 1 to enable this task.
        @ReadWrite(bits: 9..<10)
        public var task_gamma_pause_ch1_en: TASK_GAMMA_PAUSE_CH1_EN

        /// Ledc ch2 gamma pause task enable register, write 1 to enable this task.
        @ReadWrite(bits: 10..<11)
        public var task_gamma_pause_ch2_en: TASK_GAMMA_PAUSE_CH2_EN

        /// Ledc ch3 gamma pause task enable register, write 1 to enable this task.
        @ReadWrite(bits: 11..<12)
        public var task_gamma_pause_ch3_en: TASK_GAMMA_PAUSE_CH3_EN

        /// Ledc ch4 gamma pause task enable register, write 1 to enable this task.
        @ReadWrite(bits: 12..<13)
        public var task_gamma_pause_ch4_en: TASK_GAMMA_PAUSE_CH4_EN

        /// Ledc ch5 gamma pause task enable register, write 1 to enable this task.
        @ReadWrite(bits: 13..<14)
        public var task_gamma_pause_ch5_en: TASK_GAMMA_PAUSE_CH5_EN

        /// Ledc ch0 gamma resume task enable register, write 1 to enable this task.
        @ReadWrite(bits: 16..<17)
        public var task_gamma_resume_ch0_en: TASK_GAMMA_RESUME_CH0_EN

        /// Ledc ch1 gamma resume task enable register, write 1 to enable this task.
        @ReadWrite(bits: 17..<18)
        public var task_gamma_resume_ch1_en: TASK_GAMMA_RESUME_CH1_EN

        /// Ledc ch2 gamma resume task enable register, write 1 to enable this task.
        @ReadWrite(bits: 18..<19)
        public var task_gamma_resume_ch2_en: TASK_GAMMA_RESUME_CH2_EN

        /// Ledc ch3 gamma resume task enable register, write 1 to enable this task.
        @ReadWrite(bits: 19..<20)
        public var task_gamma_resume_ch3_en: TASK_GAMMA_RESUME_CH3_EN

        /// Ledc ch4 gamma resume task enable register, write 1 to enable this task.
        @ReadWrite(bits: 20..<21)
        public var task_gamma_resume_ch4_en: TASK_GAMMA_RESUME_CH4_EN

        /// Ledc ch5 gamma resume task enable register, write 1 to enable this task.
        @ReadWrite(bits: 21..<22)
        public var task_gamma_resume_ch5_en: TASK_GAMMA_RESUME_CH5_EN
    }

    /// Ledc timer%s compare value register.
    @Register(bitWidth: 32)
    public struct TIMER_CMP {
        /// This register stores ledc timer%s compare value.
        @ReadWrite(bits: 0..<20)
        public var timer_cmp_field: TIMER_CMP_FIELD
    }

    /// Ledc timer%s count value capture register.
    @Register(bitWidth: 32)
    public struct TIMER_CNT_CAP {
        /// This register stores ledc timer%s count value.
        @ReadOnly(bits: 0..<20)
        public var timer_cnt_cap_field: TIMER_CNT_CAP_FIELD
    }

    /// Global ledc configuration register
    @Register(bitWidth: 32)
    public struct CONF {
        /// 2'd1: APB_CLK 2'd2: RTC8M_CLK 2'd3: XTAL_CLK
        @ReadWrite(bits: 0..<2)
        public var apb_clk_sel: APB_CLK_SEL

        /// 1'b1: Force clock on for gamma ram. 1'h0: Support clock only when application writes or read gamma ram.
        @ReadWrite(bits: 2..<3)
        public var gamma_ram_clk_en_ch0: GAMMA_RAM_CLK_EN_CH0

        /// 1'b1: Force clock on for gamma ram. 1'h0: Support clock only when application writes or read gamma ram.
        @ReadWrite(bits: 3..<4)
        public var gamma_ram_clk_en_ch1: GAMMA_RAM_CLK_EN_CH1

        /// 1'b1: Force clock on for gamma ram. 1'h0: Support clock only when application writes or read gamma ram.
        @ReadWrite(bits: 4..<5)
        public var gamma_ram_clk_en_ch2: GAMMA_RAM_CLK_EN_CH2

        /// 1'b1: Force clock on for gamma ram. 1'h0: Support clock only when application writes or read gamma ram.
        @ReadWrite(bits: 5..<6)
        public var gamma_ram_clk_en_ch3: GAMMA_RAM_CLK_EN_CH3

        /// 1'b1: Force clock on for gamma ram. 1'h0: Support clock only when application writes or read gamma ram.
        @ReadWrite(bits: 6..<7)
        public var gamma_ram_clk_en_ch4: GAMMA_RAM_CLK_EN_CH4

        /// 1'b1: Force clock on for gamma ram. 1'h0: Support clock only when application writes or read gamma ram.
        @ReadWrite(bits: 7..<8)
        public var gamma_ram_clk_en_ch5: GAMMA_RAM_CLK_EN_CH5

        /// 1'b1: Force clock on for register. 1'h0: Support clock only when application writes registers.
        @ReadWrite(bits: 31..<32)
        public var clk_en: CLK_EN
    }

    /// Version control register
    @Register(bitWidth: 32)
    public struct DATE {
        /// This is the version control register.
        @ReadWrite(bits: 0..<28)
        public var ledc_date: LEDC_DATE
    }
}
