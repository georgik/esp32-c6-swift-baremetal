// Generated by svd2swift.

import MMIO

/// Input/Output Multiplexer
@RegisterBlock
public struct IO_MUX {
    /// Clock Output Configuration Register
    @RegisterBlock(offset: 0x0)
    public var pin_ctrl: Register<PIN_CTRL>

    /// IO MUX Configure Register for pad XTAL_32K_P
    @RegisterBlock(offset: 0x4, stride: 0x4, count: 31)
    public var gpio: RegisterArray<GPIO>

    /// GPIO MATRIX Configure Register for modem diag
    @RegisterBlock(offset: 0xbc)
    public var modem_diag_en: Register<MODEM_DIAG_EN>

    /// IO MUX Version Control Register
    @RegisterBlock(offset: 0xfc)
    public var date: Register<DATE>
}

extension IO_MUX {
    /// Clock Output Configuration Register
    @Register(bitWidth: 32)
    public struct PIN_CTRL {
        /// If you want to output clock for I2S to CLK_OUT_out1, set this register to 0x0. CLK_OUT_out1 can be found in peripheral output signals.
        @ReadWrite(bits: 0..<5)
        public var clk_out1: CLK_OUT1

        /// If you want to output clock for I2S to CLK_OUT_out2, set this register to 0x0. CLK_OUT_out2 can be found in peripheral output signals.
        @ReadWrite(bits: 5..<10)
        public var clk_out2: CLK_OUT2

        /// If you want to output clock for I2S to CLK_OUT_out3, set this register to 0x0. CLK_OUT_out3 can be found in peripheral output signals.
        @ReadWrite(bits: 10..<15)
        public var clk_out3: CLK_OUT3
    }

    /// IO MUX Configure Register for pad XTAL_32K_P
    @Register(bitWidth: 32)
    public struct GPIO {
        /// Output enable of the pad in sleep mode. 1: output enabled. 0: output disabled.
        @ReadWrite(bits: 0..<1)
        public var mcu_oe: MCU_OE

        /// Sleep mode selection of this pad. Set to 1 to put the pad in pad mode.
        @ReadWrite(bits: 1..<2)
        public var slp_sel: SLP_SEL

        /// Pull-down enable of the pad in sleep mode. 1: internal pull-down enabled. 0: internal pull-down disabled.
        @ReadWrite(bits: 2..<3)
        public var mcu_wpd: MCU_WPD

        /// Pull-up enable of the pad during sleep mode. 1: internal pull-up enabled. 0: internal pull-up disabled.
        @ReadWrite(bits: 3..<4)
        public var mcu_wpu: MCU_WPU

        /// Input enable of the pad during sleep mode. 1: input enabled. 0: input disabled.
        @ReadWrite(bits: 4..<5)
        public var mcu_ie: MCU_IE

        /// Select the drive strength of the pad during sleep mode. 0: ~5 mA. 1: ~10mA. 2: ~20mA. 3: ~40mA.
        @ReadWrite(bits: 5..<7)
        public var mcu_drv: MCU_DRV

        /// Pull-down enable of the pad. 1: internal pull-down enabled. 0: internal pull-down disabled.
        @ReadWrite(bits: 7..<8)
        public var fun_wpd: FUN_WPD

        /// Pull-up enable of the pad. 1: internal pull-up enabled. 0: internal pull-up disabled.
        @ReadWrite(bits: 8..<9)
        public var fun_wpu: FUN_WPU

        /// Input enable of the pad. 1: input enabled. 0: input disabled.
        @ReadWrite(bits: 9..<10)
        public var fun_ie: FUN_IE

        /// Select the drive strength of the pad. 0: ~5 mA. 1: ~10mA. 2: ~20mA. 3: ~40mA.
        @ReadWrite(bits: 10..<12)
        public var fun_drv: FUN_DRV

        /// Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2. etc.
        @ReadWrite(bits: 12..<15)
        public var mcu_sel: MCU_SEL

        /// Enable filter for pin input signals. 1: Filter enabled. 0: Filter disabled.
        @ReadWrite(bits: 15..<16)
        public var filter_en: FILTER_EN
    }

    /// GPIO MATRIX Configure Register for modem diag
    @Register(bitWidth: 32)
    public struct MODEM_DIAG_EN {
        /// bit i to enable modem_diag[i] into gpio matrix. 1:enable modem_diag[i] into gpio matrix. 0:enable other signals into gpio matrix
        @ReadWrite(bits: 0..<32)
        public var modem_diag_en_field: MODEM_DIAG_EN_FIELD
    }

    /// IO MUX Version Control Register
    @Register(bitWidth: 32)
    public struct DATE {
        /// Version control register
        @ReadWrite(bits: 0..<28)
        public var reg_date: REG_DATE
    }
}
