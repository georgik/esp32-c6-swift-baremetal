// Generated by svd2swift.

import MMIO

/// PCR Peripheral
@RegisterBlock
public struct PCR {
    /// MSPI configuration register
    @RegisterBlock(offset: 0x18)
    public var mspi_conf: Register<MSPI_CONF>

    /// MSPI_CLK configuration register
    @RegisterBlock(offset: 0x1c)
    public var mspi_clk_conf: Register<MSPI_CLK_CONF>

    /// I2C configuration register
    @RegisterBlock(offset: 0x20)
    public var i2c0_conf: Register<I2C0_CONF>

    /// I2C_SCLK configuration register
    @RegisterBlock(offset: 0x24)
    public var i2c_sclk_conf: Register<I2C_SCLK_CONF>

    /// UHCI configuration register
    @RegisterBlock(offset: 0x28)
    public var uhci_conf: Register<UHCI_CONF>

    /// RMT configuration register
    @RegisterBlock(offset: 0x2c)
    public var rmt_conf: Register<RMT_CONF>

    /// RMT_SCLK configuration register
    @RegisterBlock(offset: 0x30)
    public var rmt_sclk_conf: Register<RMT_SCLK_CONF>

    /// LEDC configuration register
    @RegisterBlock(offset: 0x34)
    public var ledc_conf: Register<LEDC_CONF>

    /// LEDC_SCLK configuration register
    @RegisterBlock(offset: 0x38)
    public var ledc_sclk_conf: Register<LEDC_SCLK_CONF>

    /// TIMERGROUP0 configuration register
    @RegisterBlock(offset: 0x3c)
    public var timergroup0_conf: Register<TIMERGROUP0_CONF>

    /// TIMERGROUP0_TIMER_CLK configuration register
    @RegisterBlock(offset: 0x40)
    public var timergroup0_timer_clk_conf: Register<TIMERGROUP0_TIMER_CLK_CONF>

    /// TIMERGROUP0_WDT_CLK configuration register
    @RegisterBlock(offset: 0x44)
    public var timergroup0_wdt_clk_conf: Register<TIMERGROUP0_WDT_CLK_CONF>

    /// TIMERGROUP1 configuration register
    @RegisterBlock(offset: 0x48)
    public var timergroup1_conf: Register<TIMERGROUP1_CONF>

    /// TIMERGROUP1_TIMER_CLK configuration register
    @RegisterBlock(offset: 0x4c)
    public var timergroup1_timer_clk_conf: Register<TIMERGROUP1_TIMER_CLK_CONF>

    /// TIMERGROUP1_WDT_CLK configuration register
    @RegisterBlock(offset: 0x50)
    public var timergroup1_wdt_clk_conf: Register<TIMERGROUP1_WDT_CLK_CONF>

    /// SYSTIMER configuration register
    @RegisterBlock(offset: 0x54)
    public var systimer_conf: Register<SYSTIMER_CONF>

    /// SYSTIMER_FUNC_CLK configuration register
    @RegisterBlock(offset: 0x58)
    public var systimer_func_clk_conf: Register<SYSTIMER_FUNC_CLK_CONF>

    /// TWAI0 configuration register
    @RegisterBlock(offset: 0x5c)
    public var twai0_conf: Register<TWAI0_CONF>

    /// TWAI0_FUNC_CLK configuration register
    @RegisterBlock(offset: 0x60)
    public var twai0_func_clk_conf: Register<TWAI0_FUNC_CLK_CONF>

    /// TWAI1 configuration register
    @RegisterBlock(offset: 0x64)
    public var twai1_conf: Register<TWAI1_CONF>

    /// TWAI1_FUNC_CLK configuration register
    @RegisterBlock(offset: 0x68)
    public var twai1_func_clk_conf: Register<TWAI1_FUNC_CLK_CONF>

    /// I2S configuration register
    @RegisterBlock(offset: 0x6c)
    public var i2s_conf: Register<I2S_CONF>

    /// I2S_TX_CLKM configuration register
    @RegisterBlock(offset: 0x70)
    public var i2s_tx_clkm_conf: Register<I2S_TX_CLKM_CONF>

    /// I2S_TX_CLKM_DIV configuration register
    @RegisterBlock(offset: 0x74)
    public var i2s_tx_clkm_div_conf: Register<I2S_TX_CLKM_DIV_CONF>

    /// I2S_RX_CLKM configuration register
    @RegisterBlock(offset: 0x78)
    public var i2s_rx_clkm_conf: Register<I2S_RX_CLKM_CONF>

    /// I2S_RX_CLKM_DIV configuration register
    @RegisterBlock(offset: 0x7c)
    public var i2s_rx_clkm_div_conf: Register<I2S_RX_CLKM_DIV_CONF>

    /// SARADC configuration register
    @RegisterBlock(offset: 0x80)
    public var saradc_conf: Register<SARADC_CONF>

    /// SARADC_CLKM configuration register
    @RegisterBlock(offset: 0x84)
    public var saradc_clkm_conf: Register<SARADC_CLKM_CONF>

    /// TSENS_CLK configuration register
    @RegisterBlock(offset: 0x88)
    public var tsens_clk_conf: Register<TSENS_CLK_CONF>

    /// USB_DEVICE configuration register
    @RegisterBlock(offset: 0x8c)
    public var usb_device_conf: Register<USB_DEVICE_CONF>

    /// INTMTX configuration register
    @RegisterBlock(offset: 0x90)
    public var intmtx_conf: Register<INTMTX_CONF>

    /// PCNT configuration register
    @RegisterBlock(offset: 0x94)
    public var pcnt_conf: Register<PCNT_CONF>

    /// ETM configuration register
    @RegisterBlock(offset: 0x98)
    public var etm_conf: Register<ETM_CONF>

    /// PWM configuration register
    @RegisterBlock(offset: 0x9c)
    public var pwm_conf: Register<PWM_CONF>

    /// PWM_CLK configuration register
    @RegisterBlock(offset: 0xa0)
    public var pwm_clk_conf: Register<PWM_CLK_CONF>

    /// PARL_IO configuration register
    @RegisterBlock(offset: 0xa4)
    public var parl_io_conf: Register<PARL_IO_CONF>

    /// PARL_CLK_RX configuration register
    @RegisterBlock(offset: 0xa8)
    public var parl_clk_rx_conf: Register<PARL_CLK_RX_CONF>

    /// PARL_CLK_TX configuration register
    @RegisterBlock(offset: 0xac)
    public var parl_clk_tx_conf: Register<PARL_CLK_TX_CONF>

    /// SDIO_SLAVE configuration register
    @RegisterBlock(offset: 0xb0)
    public var sdio_slave_conf: Register<SDIO_SLAVE_CONF>

    /// PVT_MONITOR configuration register
    @RegisterBlock(offset: 0xb4)
    public var pvt_monitor_conf: Register<PVT_MONITOR_CONF>

    /// PVT_MONITOR function clock configuration register
    @RegisterBlock(offset: 0xb8)
    public var pvt_monitor_func_clk_conf: Register<PVT_MONITOR_FUNC_CLK_CONF>

    /// GDMA configuration register
    @RegisterBlock(offset: 0xbc)
    public var gdma_conf: Register<GDMA_CONF>

    /// SPI2 configuration register
    @RegisterBlock(offset: 0xc0)
    public var spi2_conf: Register<SPI2_CONF>

    /// SPI2_CLKM configuration register
    @RegisterBlock(offset: 0xc4)
    public var spi2_clkm_conf: Register<SPI2_CLKM_CONF>

    /// AES configuration register
    @RegisterBlock(offset: 0xc8)
    public var aes_conf: Register<AES_CONF>

    /// SHA configuration register
    @RegisterBlock(offset: 0xcc)
    public var sha_conf: Register<SHA_CONF>

    /// RSA configuration register
    @RegisterBlock(offset: 0xd0)
    public var rsa_conf: Register<RSA_CONF>

    /// RSA power control register
    @RegisterBlock(offset: 0xd4)
    public var rsa_pd_ctrl: Register<RSA_PD_CTRL>

    /// ECC configuration register
    @RegisterBlock(offset: 0xd8)
    public var ecc_conf: Register<ECC_CONF>

    /// ECC power control register
    @RegisterBlock(offset: 0xdc)
    public var ecc_pd_ctrl: Register<ECC_PD_CTRL>

    /// DS configuration register
    @RegisterBlock(offset: 0xe0)
    public var ds_conf: Register<DS_CONF>

    /// HMAC configuration register
    @RegisterBlock(offset: 0xe4)
    public var hmac_conf: Register<HMAC_CONF>

    /// IOMUX configuration register
    @RegisterBlock(offset: 0xe8)
    public var iomux_conf: Register<IOMUX_CONF>

    /// IOMUX_CLK configuration register
    @RegisterBlock(offset: 0xec)
    public var iomux_clk_conf: Register<IOMUX_CLK_CONF>

    /// MEM_MONITOR configuration register
    @RegisterBlock(offset: 0xf0)
    public var mem_monitor_conf: Register<MEM_MONITOR_CONF>

    /// REGDMA configuration register
    @RegisterBlock(offset: 0xf4)
    public var regdma_conf: Register<REGDMA_CONF>

    /// retention configuration register
    @RegisterBlock(offset: 0xf8)
    public var retention_conf: Register<RETENTION_CONF>

    /// TRACE configuration register
    @RegisterBlock(offset: 0xfc)
    public var trace_conf: Register<TRACE_CONF>

    /// ASSIST configuration register
    @RegisterBlock(offset: 0x100)
    public var assist_conf: Register<ASSIST_CONF>

    /// CACHE configuration register
    @RegisterBlock(offset: 0x104)
    public var cache_conf: Register<CACHE_CONF>

    /// MODEM_APB configuration register
    @RegisterBlock(offset: 0x108)
    public var modem_apb_conf: Register<MODEM_APB_CONF>

    /// TIMEOUT configuration register
    @RegisterBlock(offset: 0x10c)
    public var timeout_conf: Register<TIMEOUT_CONF>

    /// SYSCLK configuration register
    @RegisterBlock(offset: 0x110)
    public var sysclk_conf: Register<SYSCLK_CONF>

    /// CPU_WAITI configuration register
    @RegisterBlock(offset: 0x114)
    public var cpu_waiti_conf: Register<CPU_WAITI_CONF>

    /// CPU_FREQ configuration register
    @RegisterBlock(offset: 0x118)
    public var cpu_freq_conf: Register<CPU_FREQ_CONF>

    /// AHB_FREQ configuration register
    @RegisterBlock(offset: 0x11c)
    public var ahb_freq_conf: Register<AHB_FREQ_CONF>

    /// APB_FREQ configuration register
    @RegisterBlock(offset: 0x120)
    public var apb_freq_conf: Register<APB_FREQ_CONF>

    /// SYSCLK frequency query 0 register
    @RegisterBlock(offset: 0x124)
    public var sysclk_freq_query_0: Register<SYSCLK_FREQ_QUERY_0>

    /// SPLL DIV clock-gating configuration register
    @RegisterBlock(offset: 0x128)
    public var pll_div_clk_en: Register<PLL_DIV_CLK_EN>

    /// CLK_OUT_EN configuration register
    @RegisterBlock(offset: 0x12c)
    public var ctrl_clk_out_en: Register<CTRL_CLK_OUT_EN>

    /// TICK configuration register
    @RegisterBlock(offset: 0x130)
    public var ctrl_tick_conf: Register<CTRL_TICK_CONF>

    /// 32KHz clock configuration register
    @RegisterBlock(offset: 0x134)
    public var ctrl_32k_conf: Register<CTRL_32K_CONF>

    /// HP SRAM/ROM configuration register
    @RegisterBlock(offset: 0x138)
    public var sram_power_conf: Register<SRAM_POWER_CONF>

    /// reset event bypass backdoor configuration register
    @RegisterBlock(offset: 0xff0)
    public var reset_event_bypass: Register<RESET_EVENT_BYPASS>

    /// fpga debug register
    @RegisterBlock(offset: 0xff4)
    public var fpga_debug: Register<FPGA_DEBUG>

    /// PCR clock gating configure register
    @RegisterBlock(offset: 0xff8)
    public var clock_gate: Register<CLOCK_GATE>

    /// Date register.
    @RegisterBlock(offset: 0xffc)
    public var date: Register<DATE>

    /// Cluster UART%s, containing UART?_CONF, UART?_SCLK_CONF, UART?_PD_CTRL
    @RegisterBlock(offset: 0x0, stride: 0xc, count: 2)
    public var uart: RegisterArray<UART>
}

extension PCR {
    /// MSPI configuration register
    @Register(bitWidth: 32)
    public struct MSPI_CONF {
        /// Set 1 to enable mspi clock, include mspi pll clock
        @ReadWrite(bits: 0..<1)
        public var mspi_clk_en: MSPI_CLK_EN

        /// Set 0 to reset mspi module
        @ReadWrite(bits: 1..<2)
        public var mspi_rst_en: MSPI_RST_EN

        /// Set 1 to enable mspi pll clock
        @ReadWrite(bits: 2..<3)
        public var mspi_pll_clk_en: MSPI_PLL_CLK_EN
    }

    /// MSPI_CLK configuration register
    @Register(bitWidth: 32)
    public struct MSPI_CLK_CONF {
        /// Set as one within (0,1,2) to generate div1(default)/div2/div4 of low-speed clock-source to drive clk_mspi_fast. Only avaiable whe the clck-source is a low-speed clock-source such as XTAL/FOSC.
        @ReadWrite(bits: 0..<8)
        public var mspi_fast_ls_div_num: MSPI_FAST_LS_DIV_NUM

        /// Set as one within (3,4,5) to generate div4(default)/div5/div6 of high-speed clock-source to drive clk_mspi_fast. Only avaiable whe the clck-source is a high-speed clock-source such as SPLL.
        @ReadWrite(bits: 8..<16)
        public var mspi_fast_hs_div_num: MSPI_FAST_HS_DIV_NUM
    }

    /// I2C configuration register
    @Register(bitWidth: 32)
    public struct I2C0_CONF {
        /// Set 1 to enable i2c apb clock
        @ReadWrite(bits: 0..<1)
        public var i2c0_clk_en: I2C0_CLK_EN

        /// Set 0 to reset i2c module
        @ReadWrite(bits: 1..<2)
        public var i2c0_rst_en: I2C0_RST_EN
    }

    /// I2C_SCLK configuration register
    @Register(bitWidth: 32)
    public struct I2C_SCLK_CONF {
        /// The denominator of the frequency divider factor of the i2c function clock.
        @ReadWrite(bits: 0..<6)
        public var i2c_sclk_div_a: I2C_SCLK_DIV_A

        /// The numerator of the frequency divider factor of the i2c function clock.
        @ReadWrite(bits: 6..<12)
        public var i2c_sclk_div_b: I2C_SCLK_DIV_B

        /// The integral part of the frequency divider factor of the i2c function clock.
        @ReadWrite(bits: 12..<20)
        public var i2c_sclk_div_num: I2C_SCLK_DIV_NUM

        /// set this field to select clock-source. 0(default): XTAL, 1: FOSC.
        @ReadWrite(bits: 20..<21)
        public var i2c_sclk_sel: I2C_SCLK_SEL

        /// Set 1 to enable i2c function clock
        @ReadWrite(bits: 22..<23)
        public var i2c_sclk_en: I2C_SCLK_EN
    }

    /// UHCI configuration register
    @Register(bitWidth: 32)
    public struct UHCI_CONF {
        /// Set 1 to enable uhci clock
        @ReadWrite(bits: 0..<1)
        public var uhci_clk_en: UHCI_CLK_EN

        /// Set 0 to reset uhci module
        @ReadWrite(bits: 1..<2)
        public var uhci_rst_en: UHCI_RST_EN
    }

    /// RMT configuration register
    @Register(bitWidth: 32)
    public struct RMT_CONF {
        /// Set 1 to enable rmt apb clock
        @ReadWrite(bits: 0..<1)
        public var rmt_clk_en: RMT_CLK_EN

        /// Set 0 to reset rmt module
        @ReadWrite(bits: 1..<2)
        public var rmt_rst_en: RMT_RST_EN
    }

    /// RMT_SCLK configuration register
    @Register(bitWidth: 32)
    public struct RMT_SCLK_CONF {
        /// The denominator of the frequency divider factor of the rmt function clock.
        @ReadWrite(bits: 0..<6)
        public var sclk_div_a: SCLK_DIV_A

        /// The numerator of the frequency divider factor of the rmt function clock.
        @ReadWrite(bits: 6..<12)
        public var sclk_div_b: SCLK_DIV_B

        /// The integral part of the frequency divider factor of the rmt function clock.
        @ReadWrite(bits: 12..<20)
        public var sclk_div_num: SCLK_DIV_NUM

        /// set this field to select clock-source. 0: do not select anyone clock, 1(default): 80MHz, 2: FOSC, 3: XTAL.
        @ReadWrite(bits: 20..<22)
        public var sclk_sel: SCLK_SEL

        /// Set 1 to enable rmt function clock
        @ReadWrite(bits: 22..<23)
        public var sclk_en: SCLK_EN
    }

    /// LEDC configuration register
    @Register(bitWidth: 32)
    public struct LEDC_CONF {
        /// Set 1 to enable ledc apb clock
        @ReadWrite(bits: 0..<1)
        public var ledc_clk_en: LEDC_CLK_EN

        /// Set 0 to reset ledc module
        @ReadWrite(bits: 1..<2)
        public var ledc_rst_en: LEDC_RST_EN
    }

    /// LEDC_SCLK configuration register
    @Register(bitWidth: 32)
    public struct LEDC_SCLK_CONF {
        /// set this field to select clock-source. 0(default): do not select anyone clock, 1: 80MHz, 2: FOSC, 3: XTAL.
        @ReadWrite(bits: 20..<22)
        public var ledc_sclk_sel: LEDC_SCLK_SEL

        /// Set 1 to enable ledc function clock
        @ReadWrite(bits: 22..<23)
        public var ledc_sclk_en: LEDC_SCLK_EN
    }

    /// TIMERGROUP0 configuration register
    @Register(bitWidth: 32)
    public struct TIMERGROUP0_CONF {
        /// Set 1 to enable timer_group0 apb clock
        @ReadWrite(bits: 0..<1)
        public var tg0_clk_en: TG0_CLK_EN

        /// Set 0 to reset timer_group0 module
        @ReadWrite(bits: 1..<2)
        public var tg0_rst_en: TG0_RST_EN
    }

    /// TIMERGROUP0_TIMER_CLK configuration register
    @Register(bitWidth: 32)
    public struct TIMERGROUP0_TIMER_CLK_CONF {
        /// set this field to select clock-source. 0(default): XTAL, 1: 80MHz, 2: FOSC, 3: reserved.
        @ReadWrite(bits: 20..<22)
        public var tg0_timer_clk_sel: TG0_TIMER_CLK_SEL

        /// Set 1 to enable timer_group0 timer clock
        @ReadWrite(bits: 22..<23)
        public var tg0_timer_clk_en: TG0_TIMER_CLK_EN
    }

    /// TIMERGROUP0_WDT_CLK configuration register
    @Register(bitWidth: 32)
    public struct TIMERGROUP0_WDT_CLK_CONF {
        /// set this field to select clock-source. 0(default): XTAL, 1: 80MHz, 2: FOSC, 3: reserved.
        @ReadWrite(bits: 20..<22)
        public var tg0_wdt_clk_sel: TG0_WDT_CLK_SEL

        /// Set 1 to enable timer_group0 wdt clock
        @ReadWrite(bits: 22..<23)
        public var tg0_wdt_clk_en: TG0_WDT_CLK_EN
    }

    /// TIMERGROUP1 configuration register
    @Register(bitWidth: 32)
    public struct TIMERGROUP1_CONF {
        /// Set 1 to enable timer_group1 apb clock
        @ReadWrite(bits: 0..<1)
        public var tg1_clk_en: TG1_CLK_EN

        /// Set 0 to reset timer_group1 module
        @ReadWrite(bits: 1..<2)
        public var tg1_rst_en: TG1_RST_EN
    }

    /// TIMERGROUP1_TIMER_CLK configuration register
    @Register(bitWidth: 32)
    public struct TIMERGROUP1_TIMER_CLK_CONF {
        /// set this field to select clock-source. 0(default): XTAL, 1: 80MHz, 2: FOSC, 3: reserved.
        @ReadWrite(bits: 20..<22)
        public var tg1_timer_clk_sel: TG1_TIMER_CLK_SEL

        /// Set 1 to enable timer_group1 timer clock
        @ReadWrite(bits: 22..<23)
        public var tg1_timer_clk_en: TG1_TIMER_CLK_EN
    }

    /// TIMERGROUP1_WDT_CLK configuration register
    @Register(bitWidth: 32)
    public struct TIMERGROUP1_WDT_CLK_CONF {
        /// set this field to select clock-source. 0(default): XTAL, 1: 80MHz, 2: FOSC, 3: reserved.
        @ReadWrite(bits: 20..<22)
        public var tg1_wdt_clk_sel: TG1_WDT_CLK_SEL

        /// Set 1 to enable timer_group0 wdt clock
        @ReadWrite(bits: 22..<23)
        public var tg1_wdt_clk_en: TG1_WDT_CLK_EN
    }

    /// SYSTIMER configuration register
    @Register(bitWidth: 32)
    public struct SYSTIMER_CONF {
        /// Set 1 to enable systimer apb clock
        @ReadWrite(bits: 0..<1)
        public var systimer_clk_en: SYSTIMER_CLK_EN

        /// Set 0 to reset systimer module
        @ReadWrite(bits: 1..<2)
        public var systimer_rst_en: SYSTIMER_RST_EN
    }

    /// SYSTIMER_FUNC_CLK configuration register
    @Register(bitWidth: 32)
    public struct SYSTIMER_FUNC_CLK_CONF {
        /// set this field to select clock-source. 0(default): XTAL, 1: FOSC.
        @ReadWrite(bits: 20..<21)
        public var systimer_func_clk_sel: SYSTIMER_FUNC_CLK_SEL

        /// Set 1 to enable systimer function clock
        @ReadWrite(bits: 22..<23)
        public var systimer_func_clk_en: SYSTIMER_FUNC_CLK_EN
    }

    /// TWAI0 configuration register
    @Register(bitWidth: 32)
    public struct TWAI0_CONF {
        /// Set 1 to enable twai0 apb clock
        @ReadWrite(bits: 0..<1)
        public var twai0_clk_en: TWAI0_CLK_EN

        /// Set 0 to reset twai0 module
        @ReadWrite(bits: 1..<2)
        public var twai0_rst_en: TWAI0_RST_EN
    }

    /// TWAI0_FUNC_CLK configuration register
    @Register(bitWidth: 32)
    public struct TWAI0_FUNC_CLK_CONF {
        /// set this field to select clock-source. 0(default): XTAL, 1: FOSC.
        @ReadWrite(bits: 20..<21)
        public var twai0_func_clk_sel: TWAI0_FUNC_CLK_SEL

        /// Set 1 to enable twai0 function clock
        @ReadWrite(bits: 22..<23)
        public var twai0_func_clk_en: TWAI0_FUNC_CLK_EN
    }

    /// TWAI1 configuration register
    @Register(bitWidth: 32)
    public struct TWAI1_CONF {
        /// Set 1 to enable twai1 apb clock
        @ReadWrite(bits: 0..<1)
        public var twai1_clk_en: TWAI1_CLK_EN

        /// Set 0 to reset twai1 module
        @ReadWrite(bits: 1..<2)
        public var twai1_rst_en: TWAI1_RST_EN
    }

    /// TWAI1_FUNC_CLK configuration register
    @Register(bitWidth: 32)
    public struct TWAI1_FUNC_CLK_CONF {
        /// set this field to select clock-source. 0(default): XTAL, 1: FOSC.
        @ReadWrite(bits: 20..<21)
        public var twai1_func_clk_sel: TWAI1_FUNC_CLK_SEL

        /// Set 1 to enable twai1 function clock
        @ReadWrite(bits: 22..<23)
        public var twai1_func_clk_en: TWAI1_FUNC_CLK_EN
    }

    /// I2S configuration register
    @Register(bitWidth: 32)
    public struct I2S_CONF {
        /// Set 1 to enable i2s apb clock
        @ReadWrite(bits: 0..<1)
        public var i2s_clk_en: I2S_CLK_EN

        /// Set 0 to reset i2s module
        @ReadWrite(bits: 1..<2)
        public var i2s_rst_en: I2S_RST_EN
    }

    /// I2S_TX_CLKM configuration register
    @Register(bitWidth: 32)
    public struct I2S_TX_CLKM_CONF {
        /// a/2, z * [n-div + x * (n+1)-div] + y * (n+1)-div.
        @ReadWrite(bits: 12..<20)
        public var i2s_tx_clkm_div_num: I2S_TX_CLKM_DIV_NUM

        /// Select I2S Tx module source clock. 0: XTAL clock. 1: APLL. 2: CLK160. 3: I2S_MCLK_in.
        @ReadWrite(bits: 20..<22)
        public var i2s_tx_clkm_sel: I2S_TX_CLKM_SEL

        /// Set 1 to enable i2s_tx function clock
        @ReadWrite(bits: 22..<23)
        public var i2s_tx_clkm_en: I2S_TX_CLKM_EN
    }

    /// I2S_TX_CLKM_DIV configuration register
    @Register(bitWidth: 32)
    public struct I2S_TX_CLKM_DIV_CONF {
        /// a/2, the value of I2S_TX_CLKM_DIV_Z is (a-b).
        @ReadWrite(bits: 0..<9)
        public var i2s_tx_clkm_div_z: I2S_TX_CLKM_DIV_Z

        /// a/2, the value of I2S_TX_CLKM_DIV_Y is (a%(a-b)).
        @ReadWrite(bits: 9..<18)
        public var i2s_tx_clkm_div_y: I2S_TX_CLKM_DIV_Y

        /// a/2, the value of I2S_TX_CLKM_DIV_X is (a/(a-b)) - 1.
        @ReadWrite(bits: 18..<27)
        public var i2s_tx_clkm_div_x: I2S_TX_CLKM_DIV_X

        /// a/2, the value of I2S_TX_CLKM_DIV_YN1 is 1.
        @ReadWrite(bits: 27..<28)
        public var i2s_tx_clkm_div_yn1: I2S_TX_CLKM_DIV_YN1
    }

    /// I2S_RX_CLKM configuration register
    @Register(bitWidth: 32)
    public struct I2S_RX_CLKM_CONF {
        /// Integral I2S clock divider value
        @ReadWrite(bits: 12..<20)
        public var i2s_rx_clkm_div_num: I2S_RX_CLKM_DIV_NUM

        /// Select I2S Rx module source clock. 0: no clock. 1: APLL. 2: CLK160. 3: I2S_MCLK_in.
        @ReadWrite(bits: 20..<22)
        public var i2s_rx_clkm_sel: I2S_RX_CLKM_SEL

        /// Set 1 to enable i2s_rx function clock
        @ReadWrite(bits: 22..<23)
        public var i2s_rx_clkm_en: I2S_RX_CLKM_EN

        /// This field is used to select master-clock. 0(default): clk_i2s_rx, 1: clk_i2s_tx
        @ReadWrite(bits: 23..<24)
        public var i2s_mclk_sel: I2S_MCLK_SEL
    }

    /// I2S_RX_CLKM_DIV configuration register
    @Register(bitWidth: 32)
    public struct I2S_RX_CLKM_DIV_CONF {
        /// a/2, the value of I2S_RX_CLKM_DIV_Z is (a-b).
        @ReadWrite(bits: 0..<9)
        public var i2s_rx_clkm_div_z: I2S_RX_CLKM_DIV_Z

        /// a/2, the value of I2S_RX_CLKM_DIV_Y is (a%(a-b)).
        @ReadWrite(bits: 9..<18)
        public var i2s_rx_clkm_div_y: I2S_RX_CLKM_DIV_Y

        /// a/2, the value of I2S_RX_CLKM_DIV_X is (a/(a-b)) - 1.
        @ReadWrite(bits: 18..<27)
        public var i2s_rx_clkm_div_x: I2S_RX_CLKM_DIV_X

        /// a/2, the value of I2S_RX_CLKM_DIV_YN1 is 1.
        @ReadWrite(bits: 27..<28)
        public var i2s_rx_clkm_div_yn1: I2S_RX_CLKM_DIV_YN1
    }

    /// SARADC configuration register
    @Register(bitWidth: 32)
    public struct SARADC_CONF {
        /// no use
        @ReadWrite(bits: 0..<1)
        public var saradc_clk_en: SARADC_CLK_EN

        /// Set 0 to reset function_register of saradc module
        @ReadWrite(bits: 1..<2)
        public var saradc_rst_en: SARADC_RST_EN

        /// Set 1 to enable saradc apb clock
        @ReadWrite(bits: 2..<3)
        public var saradc_reg_clk_en: SARADC_REG_CLK_EN

        /// Set 0 to reset apb_register of saradc module
        @ReadWrite(bits: 3..<4)
        public var saradc_reg_rst_en: SARADC_REG_RST_EN
    }

    /// SARADC_CLKM configuration register
    @Register(bitWidth: 32)
    public struct SARADC_CLKM_CONF {
        /// The denominator of the frequency divider factor of the saradc function clock.
        @ReadWrite(bits: 0..<6)
        public var saradc_clkm_div_a: SARADC_CLKM_DIV_A

        /// The numerator of the frequency divider factor of the saradc function clock.
        @ReadWrite(bits: 6..<12)
        public var saradc_clkm_div_b: SARADC_CLKM_DIV_B

        /// The integral part of the frequency divider factor of the saradc function clock.
        @ReadWrite(bits: 12..<20)
        public var saradc_clkm_div_num: SARADC_CLKM_DIV_NUM

        /// set this field to select clock-source. 0(default): XTAL, 1: 240MHz, 2: FOSC, 3: reserved.
        @ReadWrite(bits: 20..<22)
        public var saradc_clkm_sel: SARADC_CLKM_SEL

        /// Set 1 to enable saradc function clock
        @ReadWrite(bits: 22..<23)
        public var saradc_clkm_en: SARADC_CLKM_EN
    }

    /// TSENS_CLK configuration register
    @Register(bitWidth: 32)
    public struct TSENS_CLK_CONF {
        /// set this field to select clock-source. 0(default): FOSC, 1: XTAL.
        @ReadWrite(bits: 20..<21)
        public var tsens_clk_sel: TSENS_CLK_SEL

        /// Set 1 to enable tsens clock
        @ReadWrite(bits: 22..<23)
        public var tsens_clk_en: TSENS_CLK_EN

        /// Set 0 to reset tsens module
        @ReadWrite(bits: 23..<24)
        public var tsens_rst_en: TSENS_RST_EN
    }

    /// USB_DEVICE configuration register
    @Register(bitWidth: 32)
    public struct USB_DEVICE_CONF {
        /// Set 1 to enable usb_device clock
        @ReadWrite(bits: 0..<1)
        public var usb_device_clk_en: USB_DEVICE_CLK_EN

        /// Set 0 to reset usb_device module
        @ReadWrite(bits: 1..<2)
        public var usb_device_rst_en: USB_DEVICE_RST_EN
    }

    /// INTMTX configuration register
    @Register(bitWidth: 32)
    public struct INTMTX_CONF {
        /// Set 1 to enable intmtx clock
        @ReadWrite(bits: 0..<1)
        public var intmtx_clk_en: INTMTX_CLK_EN

        /// Set 0 to reset intmtx module
        @ReadWrite(bits: 1..<2)
        public var intmtx_rst_en: INTMTX_RST_EN
    }

    /// PCNT configuration register
    @Register(bitWidth: 32)
    public struct PCNT_CONF {
        /// Set 1 to enable pcnt clock
        @ReadWrite(bits: 0..<1)
        public var pcnt_clk_en: PCNT_CLK_EN

        /// Set 0 to reset pcnt module
        @ReadWrite(bits: 1..<2)
        public var pcnt_rst_en: PCNT_RST_EN
    }

    /// ETM configuration register
    @Register(bitWidth: 32)
    public struct ETM_CONF {
        /// Set 1 to enable etm clock
        @ReadWrite(bits: 0..<1)
        public var etm_clk_en: ETM_CLK_EN

        /// Set 0 to reset etm module
        @ReadWrite(bits: 1..<2)
        public var etm_rst_en: ETM_RST_EN
    }

    /// PWM configuration register
    @Register(bitWidth: 32)
    public struct PWM_CONF {
        /// Set 1 to enable pwm clock
        @ReadWrite(bits: 0..<1)
        public var pwm_clk_en: PWM_CLK_EN

        /// Set 0 to reset pwm module
        @ReadWrite(bits: 1..<2)
        public var pwm_rst_en: PWM_RST_EN
    }

    /// PWM_CLK configuration register
    @Register(bitWidth: 32)
    public struct PWM_CLK_CONF {
        /// The integral part of the frequency divider factor of the pwm function clock.
        @ReadWrite(bits: 12..<20)
        public var pwm_div_num: PWM_DIV_NUM

        /// set this field to select clock-source. 0(default): do not select anyone clock, 1: 160MHz, 2: XTAL, 3: FOSC.
        @ReadWrite(bits: 20..<22)
        public var pwm_clkm_sel: PWM_CLKM_SEL

        /// set this field as 1 to activate pwm clkm.
        @ReadWrite(bits: 22..<23)
        public var pwm_clkm_en: PWM_CLKM_EN
    }

    /// PARL_IO configuration register
    @Register(bitWidth: 32)
    public struct PARL_IO_CONF {
        /// Set 1 to enable parl apb clock
        @ReadWrite(bits: 0..<1)
        public var parl_clk_en: PARL_CLK_EN

        /// Set 0 to reset parl apb reg
        @ReadWrite(bits: 1..<2)
        public var parl_rst_en: PARL_RST_EN
    }

    /// PARL_CLK_RX configuration register
    @Register(bitWidth: 32)
    public struct PARL_CLK_RX_CONF {
        /// The integral part of the frequency divider factor of the parl rx clock.
        @ReadWrite(bits: 0..<16)
        public var parl_clk_rx_div_num: PARL_CLK_RX_DIV_NUM

        /// set this field to select clock-source. 0(default): XTAL, 1: 240MHz, 2: FOSC, 3: user clock from pad.
        @ReadWrite(bits: 16..<18)
        public var parl_clk_rx_sel: PARL_CLK_RX_SEL

        /// Set 1 to enable parl rx clock
        @ReadWrite(bits: 18..<19)
        public var parl_clk_rx_en: PARL_CLK_RX_EN

        /// Set 0 to reset parl rx module
        @ReadWrite(bits: 19..<20)
        public var parl_rx_rst_en: PARL_RX_RST_EN
    }

    /// PARL_CLK_TX configuration register
    @Register(bitWidth: 32)
    public struct PARL_CLK_TX_CONF {
        /// The integral part of the frequency divider factor of the parl tx clock.
        @ReadWrite(bits: 0..<16)
        public var parl_clk_tx_div_num: PARL_CLK_TX_DIV_NUM

        /// set this field to select clock-source. 0(default): XTAL, 1: 240MHz, 2: FOSC, 3: user clock from pad.
        @ReadWrite(bits: 16..<18)
        public var parl_clk_tx_sel: PARL_CLK_TX_SEL

        /// Set 1 to enable parl tx clock
        @ReadWrite(bits: 18..<19)
        public var parl_clk_tx_en: PARL_CLK_TX_EN

        /// Set 0 to reset parl tx module
        @ReadWrite(bits: 19..<20)
        public var parl_tx_rst_en: PARL_TX_RST_EN
    }

    /// SDIO_SLAVE configuration register
    @Register(bitWidth: 32)
    public struct SDIO_SLAVE_CONF {
        /// Set 1 to enable sdio_slave clock
        @ReadWrite(bits: 0..<1)
        public var sdio_slave_clk_en: SDIO_SLAVE_CLK_EN

        /// Set 0 to reset sdio_slave module
        @ReadWrite(bits: 1..<2)
        public var sdio_slave_rst_en: SDIO_SLAVE_RST_EN
    }

    /// PVT_MONITOR configuration register
    @Register(bitWidth: 32)
    public struct PVT_MONITOR_CONF {
        /// Set 1 to enable apb clock of pvt module
        @ReadWrite(bits: 0..<1)
        public var pvt_monitor_clk_en: PVT_MONITOR_CLK_EN

        /// Set 0 to reset all pvt monitor module
        @ReadWrite(bits: 1..<2)
        public var pvt_monitor_rst_en: PVT_MONITOR_RST_EN

        /// Set 1 to enable function clock of modem pvt module
        @ReadWrite(bits: 2..<3)
        public var pvt_monitor_site1_clk_en: PVT_MONITOR_SITE1_CLK_EN

        /// Set 1 to enable function clock of cpu pvt module
        @ReadWrite(bits: 3..<4)
        public var pvt_monitor_site2_clk_en: PVT_MONITOR_SITE2_CLK_EN

        /// Set 1 to enable function clock of hp_peri pvt module
        @ReadWrite(bits: 4..<5)
        public var pvt_monitor_site3_clk_en: PVT_MONITOR_SITE3_CLK_EN
    }

    /// PVT_MONITOR function clock configuration register
    @Register(bitWidth: 32)
    public struct PVT_MONITOR_FUNC_CLK_CONF {
        /// The integral part of the frequency divider factor of the pvt_monitor function clock.
        @ReadWrite(bits: 0..<4)
        public var pvt_monitor_func_clk_div_num: PVT_MONITOR_FUNC_CLK_DIV_NUM

        /// set this field to select clock-source. 0: XTAL, 1(default): 160MHz drived by SPLL divided by 3.
        @ReadWrite(bits: 20..<21)
        public var pvt_monitor_func_clk_sel: PVT_MONITOR_FUNC_CLK_SEL

        /// Set 1 to enable source clock of pvt sitex
        @ReadWrite(bits: 22..<23)
        public var pvt_monitor_func_clk_en: PVT_MONITOR_FUNC_CLK_EN
    }

    /// GDMA configuration register
    @Register(bitWidth: 32)
    public struct GDMA_CONF {
        /// Set 1 to enable gdma clock
        @ReadWrite(bits: 0..<1)
        public var gdma_clk_en: GDMA_CLK_EN

        /// Set 0 to reset gdma module
        @ReadWrite(bits: 1..<2)
        public var gdma_rst_en: GDMA_RST_EN
    }

    /// SPI2 configuration register
    @Register(bitWidth: 32)
    public struct SPI2_CONF {
        /// Set 1 to enable spi2 apb clock
        @ReadWrite(bits: 0..<1)
        public var spi2_clk_en: SPI2_CLK_EN

        /// Set 0 to reset spi2 module
        @ReadWrite(bits: 1..<2)
        public var spi2_rst_en: SPI2_RST_EN
    }

    /// SPI2_CLKM configuration register
    @Register(bitWidth: 32)
    public struct SPI2_CLKM_CONF {
        /// set this field to select clock-source. 0(default): XTAL, 1: 80MHz, 2: FOSC, 3: reserved.
        @ReadWrite(bits: 20..<22)
        public var spi2_clkm_sel: SPI2_CLKM_SEL

        /// Set 1 to enable spi2 function clock
        @ReadWrite(bits: 22..<23)
        public var spi2_clkm_en: SPI2_CLKM_EN
    }

    /// AES configuration register
    @Register(bitWidth: 32)
    public struct AES_CONF {
        /// Set 1 to enable aes clock
        @ReadWrite(bits: 0..<1)
        public var aes_clk_en: AES_CLK_EN

        /// Set 0 to reset aes module
        @ReadWrite(bits: 1..<2)
        public var aes_rst_en: AES_RST_EN
    }

    /// SHA configuration register
    @Register(bitWidth: 32)
    public struct SHA_CONF {
        /// Set 1 to enable sha clock
        @ReadWrite(bits: 0..<1)
        public var sha_clk_en: SHA_CLK_EN

        /// Set 0 to reset sha module
        @ReadWrite(bits: 1..<2)
        public var sha_rst_en: SHA_RST_EN
    }

    /// RSA configuration register
    @Register(bitWidth: 32)
    public struct RSA_CONF {
        /// Set 1 to enable rsa clock
        @ReadWrite(bits: 0..<1)
        public var rsa_clk_en: RSA_CLK_EN

        /// Set 0 to reset rsa module
        @ReadWrite(bits: 1..<2)
        public var rsa_rst_en: RSA_RST_EN
    }

    /// RSA power control register
    @Register(bitWidth: 32)
    public struct RSA_PD_CTRL {
        /// Set this bit to power down rsa internal memory.
        @ReadWrite(bits: 0..<1)
        public var rsa_mem_pd: RSA_MEM_PD

        /// Set this bit to force power up rsa internal memory
        @ReadWrite(bits: 1..<2)
        public var rsa_mem_force_pu: RSA_MEM_FORCE_PU

        /// Set this bit to force power down rsa internal memory.
        @ReadWrite(bits: 2..<3)
        public var rsa_mem_force_pd: RSA_MEM_FORCE_PD
    }

    /// ECC configuration register
    @Register(bitWidth: 32)
    public struct ECC_CONF {
        /// Set 1 to enable ecc clock
        @ReadWrite(bits: 0..<1)
        public var ecc_clk_en: ECC_CLK_EN

        /// Set 0 to reset ecc module
        @ReadWrite(bits: 1..<2)
        public var ecc_rst_en: ECC_RST_EN
    }

    /// ECC power control register
    @Register(bitWidth: 32)
    public struct ECC_PD_CTRL {
        /// Set this bit to power down ecc internal memory.
        @ReadWrite(bits: 0..<1)
        public var ecc_mem_pd: ECC_MEM_PD

        /// Set this bit to force power up ecc internal memory
        @ReadWrite(bits: 1..<2)
        public var ecc_mem_force_pu: ECC_MEM_FORCE_PU

        /// Set this bit to force power down ecc internal memory.
        @ReadWrite(bits: 2..<3)
        public var ecc_mem_force_pd: ECC_MEM_FORCE_PD
    }

    /// DS configuration register
    @Register(bitWidth: 32)
    public struct DS_CONF {
        /// Set 1 to enable ds clock
        @ReadWrite(bits: 0..<1)
        public var ds_clk_en: DS_CLK_EN

        /// Set 0 to reset ds module
        @ReadWrite(bits: 1..<2)
        public var ds_rst_en: DS_RST_EN
    }

    /// HMAC configuration register
    @Register(bitWidth: 32)
    public struct HMAC_CONF {
        /// Set 1 to enable hmac clock
        @ReadWrite(bits: 0..<1)
        public var hmac_clk_en: HMAC_CLK_EN

        /// Set 0 to reset hmac module
        @ReadWrite(bits: 1..<2)
        public var hmac_rst_en: HMAC_RST_EN
    }

    /// IOMUX configuration register
    @Register(bitWidth: 32)
    public struct IOMUX_CONF {
        /// Set 1 to enable iomux apb clock
        @ReadWrite(bits: 0..<1)
        public var iomux_clk_en: IOMUX_CLK_EN

        /// Set 0 to reset iomux module
        @ReadWrite(bits: 1..<2)
        public var iomux_rst_en: IOMUX_RST_EN
    }

    /// IOMUX_CLK configuration register
    @Register(bitWidth: 32)
    public struct IOMUX_CLK_CONF {
        /// set this field to select clock-source. 0: do not select anyone clock, 1: 80MHz, 2: FOSC, 3(default): XTAL.
        @ReadWrite(bits: 20..<22)
        public var iomux_func_clk_sel: IOMUX_FUNC_CLK_SEL

        /// Set 1 to enable iomux function clock
        @ReadWrite(bits: 22..<23)
        public var iomux_func_clk_en: IOMUX_FUNC_CLK_EN
    }

    /// MEM_MONITOR configuration register
    @Register(bitWidth: 32)
    public struct MEM_MONITOR_CONF {
        /// Set 1 to enable mem_monitor clock
        @ReadWrite(bits: 0..<1)
        public var mem_monitor_clk_en: MEM_MONITOR_CLK_EN

        /// Set 0 to reset mem_monitor module
        @ReadWrite(bits: 1..<2)
        public var mem_monitor_rst_en: MEM_MONITOR_RST_EN
    }

    /// REGDMA configuration register
    @Register(bitWidth: 32)
    public struct REGDMA_CONF {
        /// Set 1 to enable regdma clock
        @ReadWrite(bits: 0..<1)
        public var regdma_clk_en: REGDMA_CLK_EN

        /// Set 0 to reset regdma module
        @ReadWrite(bits: 1..<2)
        public var regdma_rst_en: REGDMA_RST_EN
    }

    /// retention configuration register
    @Register(bitWidth: 32)
    public struct RETENTION_CONF {
        /// Set 1 to enable retention clock
        @ReadWrite(bits: 0..<1)
        public var retention_clk_en: RETENTION_CLK_EN

        /// Set 0 to reset retention module
        @ReadWrite(bits: 1..<2)
        public var retention_rst_en: RETENTION_RST_EN
    }

    /// TRACE configuration register
    @Register(bitWidth: 32)
    public struct TRACE_CONF {
        /// Set 1 to enable trace clock
        @ReadWrite(bits: 0..<1)
        public var trace_clk_en: TRACE_CLK_EN

        /// Set 0 to reset trace module
        @ReadWrite(bits: 1..<2)
        public var trace_rst_en: TRACE_RST_EN
    }

    /// ASSIST configuration register
    @Register(bitWidth: 32)
    public struct ASSIST_CONF {
        /// Set 1 to enable assist clock
        @ReadWrite(bits: 0..<1)
        public var assist_clk_en: ASSIST_CLK_EN

        /// Set 0 to reset assist module
        @ReadWrite(bits: 1..<2)
        public var assist_rst_en: ASSIST_RST_EN
    }

    /// CACHE configuration register
    @Register(bitWidth: 32)
    public struct CACHE_CONF {
        /// Set 1 to enable cache clock
        @ReadWrite(bits: 0..<1)
        public var cache_clk_en: CACHE_CLK_EN

        /// Set 0 to reset cache module
        @ReadWrite(bits: 1..<2)
        public var cache_rst_en: CACHE_RST_EN
    }

    /// MODEM_APB configuration register
    @Register(bitWidth: 32)
    public struct MODEM_APB_CONF {
        /// This field indicates if modem_apb clock is enable. 0: disable, 1: enable(default).
        @ReadWrite(bits: 0..<1)
        public var modem_apb_clk_en: MODEM_APB_CLK_EN

        /// Set this file as 1 to reset modem-subsystem.
        @ReadWrite(bits: 1..<2)
        public var modem_rst_en: MODEM_RST_EN
    }

    /// TIMEOUT configuration register
    @Register(bitWidth: 32)
    public struct TIMEOUT_CONF {
        /// Set 0 to reset cpu_peri timeout module
        @ReadWrite(bits: 1..<2)
        public var cpu_timeout_rst_en: CPU_TIMEOUT_RST_EN

        /// Set 0 to reset hp_peri timeout module and hp_modem timeout module
        @ReadWrite(bits: 2..<3)
        public var hp_timeout_rst_en: HP_TIMEOUT_RST_EN
    }

    /// SYSCLK configuration register
    @Register(bitWidth: 32)
    public struct SYSCLK_CONF {
        /// clk_hproot is div1 of low-speed clock-source if clck-source is a low-speed clock-source such as XTAL/FOSC.
        @ReadOnly(bits: 0..<8)
        public var ls_div_num: LS_DIV_NUM

        /// clk_hproot is div3 of SPLL if the clock-source is high-speed clock SPLL.
        @ReadOnly(bits: 8..<16)
        public var hs_div_num: HS_DIV_NUM

        /// This field is used to select clock source. 0: XTAL, 1: SPLL, 2: FOSC, 3: reserved.
        @ReadWrite(bits: 16..<18)
        public var soc_clk_sel: SOC_CLK_SEL

        /// This field indicates the frequency(MHz) of XTAL.
        @ReadOnly(bits: 24..<31)
        public var clk_xtal_freq: CLK_XTAL_FREQ
    }

    /// CPU_WAITI configuration register
    @Register(bitWidth: 32)
    public struct CPU_WAITI_CONF {
        /// Reserved. This filed has been replaced by PCR_CPU_HS_DIV_NUM and PCR_CPU_LS_DIV_NUM
        @ReadOnly(bits: 0..<2)
        public var cpuperiod_sel: CPUPERIOD_SEL

        /// Reserved. This filed has been replaced by PCR_CPU_HS_DIV_NUM and PCR_CPU_LS_DIV_NUM
        @ReadOnly(bits: 2..<3)
        public var pll_freq_sel: PLL_FREQ_SEL

        /// Set 1 to force cpu_waiti_clk enable.
        @ReadWrite(bits: 3..<4)
        public var cpu_wait_mode_force_on: CPU_WAIT_MODE_FORCE_ON

        /// This field used to set delay cycle when cpu enter waiti mode, after delay waiti_clk will close
        @ReadWrite(bits: 4..<8)
        public var cpu_waiti_delay_num: CPU_WAITI_DELAY_NUM
    }

    /// CPU_FREQ configuration register
    @Register(bitWidth: 32)
    public struct CPU_FREQ_CONF {
        /// Set as one within (0,1,3) to generate clk_cpu drived by clk_hproot. The clk_cpu is div1(default)/div2/div4 of clk_hproot. This field is only avaliable for low-speed clock-source such as XTAL/FOSC, and should be used together with PCR_AHB_LS_DIV_NUM.
        @ReadWrite(bits: 0..<8)
        public var cpu_ls_div_num: CPU_LS_DIV_NUM

        /// Set as one within (0,1,3) to generate clk_cpu drived by clk_hproot. The clk_cpu is div1(default)/div2/div4 of clk_hproot. This field is only avaliable for high-speed clock-source such as SPLL, and should be used together with PCR_AHB_HS_DIV_NUM.
        @ReadWrite(bits: 8..<16)
        public var cpu_hs_div_num: CPU_HS_DIV_NUM

        /// Given that PCR_CPU_HS_DIV_NUM is 0, set this field as 1 to force clk_cpu at 120MHz. Only avaliable when PCR_CPU_HS_DIV_NUM is 0 and clk_cpu is driven by SPLL.
        @ReadWrite(bits: 16..<17)
        public var cpu_hs_120m_force: CPU_HS_120M_FORCE
    }

    /// AHB_FREQ configuration register
    @Register(bitWidth: 32)
    public struct AHB_FREQ_CONF {
        /// Set as one within (0,1,3,7) to generate clk_ahb drived by clk_hproot. The clk_ahb is div1(default)/div2/div4/div8 of clk_hproot. This field is only avaliable for low-speed clock-source such as XTAL/FOSC, and should be used together with PCR_CPU_LS_DIV_NUM.
        @ReadWrite(bits: 0..<8)
        public var ahb_ls_div_num: AHB_LS_DIV_NUM

        /// Set as one within (3,7,15) to generate clk_ahb drived by clk_hproot. The clk_ahb is div4(default)/div8/div16 of clk_hproot. This field is only avaliable for high-speed clock-source such as SPLL, and should be used together with PCR_CPU_HS_DIV_NUM.
        @ReadWrite(bits: 8..<16)
        public var ahb_hs_div_num: AHB_HS_DIV_NUM
    }

    /// APB_FREQ configuration register
    @Register(bitWidth: 32)
    public struct APB_FREQ_CONF {
        /// If this field's value is grater than PCR_APB_DIV_NUM, the clk_apb will be automatically down to clk_apb_decrease only when no access is on apb-bus, and will recover to the previous frequency when a new access appears on apb-bus. Set as one within (0,1,3) to set clk_apb_decrease as div1/div2/div4(default) of clk_ahb. Note that enable this function will reduce performance. Users can set this field as zero to disable the auto-decrease-apb-freq function. By default, this function is disable.
        @ReadWrite(bits: 0..<8)
        public var apb_decrease_div_num: APB_DECREASE_DIV_NUM

        /// Set as one within (0,1,3) to generate clk_apb drived by clk_ahb. The clk_apb is div1(default)/div2/div4 of clk_ahb.
        @ReadWrite(bits: 8..<16)
        public var apb_div_num: APB_DIV_NUM
    }

    /// SYSCLK frequency query 0 register
    @Register(bitWidth: 32)
    public struct SYSCLK_FREQ_QUERY_0 {
        /// This field indicates the frequency(MHz) of FOSC.
        @ReadOnly(bits: 0..<8)
        public var fosc_freq: FOSC_FREQ

        /// This field indicates the frequency(MHz) of SPLL.
        @ReadOnly(bits: 8..<18)
        public var pll_freq: PLL_FREQ
    }

    /// SPLL DIV clock-gating configuration register
    @Register(bitWidth: 32)
    public struct PLL_DIV_CLK_EN {
        /// This field is used to open 240 MHz clock (div2 of SPLL) drived from SPLL. 0: close, 1: open(default). Only avaliable when high-speed clock-source SPLL is active.
        @ReadWrite(bits: 0..<1)
        public var pll_240m_clk_en: PLL_240M_CLK_EN

        /// This field is used to open 160 MHz clock (div3 of SPLL) drived from SPLL. 0: close, 1: open(default). Only avaliable when high-speed clock-source SPLL is active.
        @ReadWrite(bits: 1..<2)
        public var pll_160m_clk_en: PLL_160M_CLK_EN

        /// This field is used to open 120 MHz clock (div4 of SPLL) drived from SPLL. 0: close, 1: open(default). Only avaliable when high-speed clock-source SPLL is active.
        @ReadWrite(bits: 2..<3)
        public var pll_120m_clk_en: PLL_120M_CLK_EN

        /// This field is used to open 80 MHz clock (div6 of SPLL) drived from SPLL. 0: close, 1: open(default). Only avaliable when high-speed clock-source SPLL is active.
        @ReadWrite(bits: 3..<4)
        public var pll_80m_clk_en: PLL_80M_CLK_EN

        /// This field is used to open 48 MHz clock (div10 of SPLL) drived from SPLL. 0: close, 1: open(default). Only avaliable when high-speed clock-source SPLL is active.
        @ReadWrite(bits: 4..<5)
        public var pll_48m_clk_en: PLL_48M_CLK_EN

        /// This field is used to open 40 MHz clock (div12 of SPLL) drived from SPLL. 0: close, 1: open(default). Only avaliable when high-speed clock-source SPLL is active.
        @ReadWrite(bits: 5..<6)
        public var pll_40m_clk_en: PLL_40M_CLK_EN

        /// This field is used to open 20 MHz clock (div24 of SPLL) drived from SPLL. 0: close, 1: open(default). Only avaliable when high-speed clock-source SPLL is active.
        @ReadWrite(bits: 6..<7)
        public var pll_20m_clk_en: PLL_20M_CLK_EN
    }

    /// CLK_OUT_EN configuration register
    @Register(bitWidth: 32)
    public struct CTRL_CLK_OUT_EN {
        /// Set 1 to enable 20m clock
        @ReadWrite(bits: 0..<1)
        public var clk20_oen: CLK20_OEN

        /// Set 1 to enable 22m clock
        @ReadWrite(bits: 1..<2)
        public var clk22_oen: CLK22_OEN

        /// Set 1 to enable 44m clock
        @ReadWrite(bits: 2..<3)
        public var clk44_oen: CLK44_OEN

        /// Set 1 to enable bb clock
        @ReadWrite(bits: 3..<4)
        public var clk_bb_oen: CLK_BB_OEN

        /// Set 1 to enable 80m clock
        @ReadWrite(bits: 4..<5)
        public var clk80_oen: CLK80_OEN

        /// Set 1 to enable 160m clock
        @ReadWrite(bits: 5..<6)
        public var clk160_oen: CLK160_OEN

        /// Set 1 to enable 320m clock
        @ReadWrite(bits: 6..<7)
        public var clk_320m_oen: CLK_320M_OEN

        /// Reserved
        @ReadWrite(bits: 7..<8)
        public var clk_adc_inf_oen: CLK_ADC_INF_OEN

        /// Reserved
        @ReadWrite(bits: 8..<9)
        public var clk_dac_cpu_oen: CLK_DAC_CPU_OEN

        /// Set 1 to enable 40x_bb clock
        @ReadWrite(bits: 9..<10)
        public var clk40x_bb_oen: CLK40X_BB_OEN

        /// Set 1 to enable xtal clock
        @ReadWrite(bits: 10..<11)
        public var clk_xtal_oen: CLK_XTAL_OEN
    }

    /// TICK configuration register
    @Register(bitWidth: 32)
    public struct CTRL_TICK_CONF {
        /// ******* Description ***********
        @ReadWrite(bits: 0..<8)
        public var xtal_tick_num: XTAL_TICK_NUM

        /// ******* Description ***********
        @ReadWrite(bits: 8..<16)
        public var fosc_tick_num: FOSC_TICK_NUM

        /// ******* Description ***********
        @ReadWrite(bits: 16..<17)
        public var tick_enable: TICK_ENABLE

        /// ******* Description ***********
        @ReadWrite(bits: 17..<18)
        public var rst_tick_cnt: RST_TICK_CNT
    }

    /// 32KHz clock configuration register
    @Register(bitWidth: 32)
    public struct CTRL_32K_CONF {
        /// This field indicates which one 32KHz clock will be used by MODEM_SYSTEM and timergroup. 0: OSC32K(default), 1: XTAL32K, 2/3: 32KHz from pad GPIO0.
        @ReadWrite(bits: 0..<2)
        public var clk_32k_sel: CLK_32K_SEL
    }

    /// HP SRAM/ROM configuration register
    @Register(bitWidth: 32)
    public struct SRAM_POWER_CONF {
        /// Set this bit to force power up SRAM
        @ReadWrite(bits: 0..<4)
        public var sram_force_pu: SRAM_FORCE_PU

        /// Set this bit to force power down SRAM.
        @ReadWrite(bits: 4..<8)
        public var sram_force_pd: SRAM_FORCE_PD

        /// 1: Force to open the clock and bypass the gate-clock when accessing the SRAM. 0: A gate-clock will be used when accessing the SRAM.
        @ReadWrite(bits: 8..<12)
        public var sram_clkgate_force_on: SRAM_CLKGATE_FORCE_ON

        /// Set this bit to force power up ROM
        @ReadWrite(bits: 12..<15)
        public var rom_force_pu: ROM_FORCE_PU

        /// Set this bit to force power down ROM.
        @ReadWrite(bits: 15..<18)
        public var rom_force_pd: ROM_FORCE_PD

        /// 1: Force to open the clock and bypass the gate-clock when accessing the ROM. 0: A gate-clock will be used when accessing the ROM.
        @ReadWrite(bits: 18..<21)
        public var rom_clkgate_force_on: ROM_CLKGATE_FORCE_ON
    }

    /// reset event bypass backdoor configuration register
    @Register(bitWidth: 32)
    public struct RESET_EVENT_BYPASS {
        /// This field is used to control reset event relationship for tee_reg/apm_reg/hp_system_reg. 1: tee_reg/apm_reg/hp_system_reg will only be reset by power-reset. some reset event will be bypass. 0: tee_reg/apm_reg/hp_system_reg will not only be reset by power-reset, but also some reset event.
        @ReadWrite(bits: 0..<1)
        public var apm: APM

        /// This field is used to control reset event relationship for system-bus. 1: system bus (including arbiter/router) will only be reset by power-reset. some reset event will be bypass. 0: system bus (including arbiter/router) will not only be reset by power-reset, but also some reset event.
        @ReadWrite(bits: 1..<2)
        public var reset_event_bypass_field: RESET_EVENT_BYPASS_FIELD
    }

    /// fpga debug register
    @Register(bitWidth: 32)
    public struct FPGA_DEBUG {
        /// Only used in fpga debug.
        @ReadWrite(bits: 0..<32)
        public var fpga_debug_field: FPGA_DEBUG_FIELD
    }

    /// PCR clock gating configure register
    @Register(bitWidth: 32)
    public struct CLOCK_GATE {
        /// Set this bit as 1 to force on clock gating.
        @ReadWrite(bits: 0..<1)
        public var clk_en: CLK_EN
    }

    /// Date register.
    @Register(bitWidth: 32)
    public struct DATE {
        /// PCR version information.
        @ReadWrite(bits: 0..<28)
        public var date_field: DATE_FIELD
    }

    /// Cluster UART%s, containing UART?_CONF, UART?_SCLK_CONF, UART?_PD_CTRL
    @RegisterBlock
    public struct UART {
        /// UART0 configuration register
        @RegisterBlock(offset: 0x0)
        public var conf: Register<CONF>

        /// UART0_SCLK configuration register
        @RegisterBlock(offset: 0x4)
        public var clk_conf: Register<CLK_CONF>

        /// UART0 power control register
        @RegisterBlock(offset: 0x8)
        public var pd_ctrl: Register<PD_CTRL>
    }
}

extension PCR.UART {
    /// UART0 configuration register
    @Register(bitWidth: 32)
    public struct CONF {
        /// Set 1 to enable uart0 apb clock
        @ReadWrite(bits: 0..<1)
        public var clk_en: CLK_EN

        /// Set 0 to reset uart0 module
        @ReadWrite(bits: 1..<2)
        public var rst_en: RST_EN
    }

    /// UART0_SCLK configuration register
    @Register(bitWidth: 32)
    public struct CLK_CONF {
        /// The denominator of the frequency divider factor of the uart0 function clock.
        @ReadWrite(bits: 0..<6)
        public var sclk_div_a: SCLK_DIV_A

        /// The numerator of the frequency divider factor of the uart0 function clock.
        @ReadWrite(bits: 6..<12)
        public var sclk_div_b: SCLK_DIV_B

        /// The integral part of the frequency divider factor of the uart0 function clock.
        @ReadWrite(bits: 12..<20)
        public var sclk_div_num: SCLK_DIV_NUM

        /// set this field to select clock-source. 0: do not select anyone clock, 1: 80MHz, 2: FOSC, 3(default): XTAL.
        @ReadWrite(bits: 20..<22)
        public var sclk_sel: SCLK_SEL

        /// Set 1 to enable uart0 function clock
        @ReadWrite(bits: 22..<23)
        public var sclk_en: SCLK_EN
    }

    /// UART0 power control register
    @Register(bitWidth: 32)
    public struct PD_CTRL {
        /// Set this bit to force power down UART0 memory.
        @ReadWrite(bits: 1..<2)
        public var mem_force_pu: MEM_FORCE_PU

        /// Set this bit to force power up UART0 memory.
        @ReadWrite(bits: 2..<3)
        public var mem_force_pd: MEM_FORCE_PD
    }
}
